<?php

ini_set("mssql.datetimeconvert", 0);
ini_set("mssql.charset", "UTF8");

/**
 * Upskill Data Class
 *
 * This class *should* be the only place where the Linux tools part of Upskill's software connects to the MS SQL Server database.
 *
 * <code>
 * require 'upskill.class.php';
 * $upskill = new Upskill();
 * </code>
 *
 * @author Stephen Hall <stephen@hallnet.co.uk>
 *
 */
class upskill {

    private $mssql_connection = false;
    public $server_type = 'DEV';
    public $staging = false;
    public $testing = true;
    // Set by constructor
    public $survey_xml_location = false;
    public $login_url = '/login.php';
    public $config = false;
    public $platform_config = false;
    public $client = false;
    public $debug = false;
    public $customer_id = false;
    public $logged_in_user = false;
    public $last_error = false;
    private $db_ip = '94.236.15.92';
    public $current_db_connection = false;
    private $db_users = array(
        'LIVE' => array(
            'user' => 'generic_reporting_live_user',
            'pass' => 'VE77tp9a',
        ),
        'STAGING' => array(
            'user' => 'generic_reporting_staging_user',
            'pass' => 'M112z29w',
        ),
        'LIVE_READ' => array(
            'user' => 'generic_ro_user',
            'pass' => '66gGFjiE',
        ),
        'TESTING' => array(
            'user' => 'generic_reporting_live_user',
            'pass' => 'VE77tp9a',
        ),
    );
    public $survey_report_types = array(
        'question_by_question' => false,
        'free_text_export' => false,
        'completion' => false,
        'positivity' => false,
        'highlow' => false,
        'classification' => false,
        'comparison' => false,
        "question_by_question_comparison" => false,
        "question_group_comparison" => false,
        "reference_data" => false,
        "answer_group_score" => false
    );
    private $default_survey_report_types = array(
        'question_by_question' => 'Question by Question Analysis',
        'free_text_export' => 'Free Text Answer Export',
        'completion' => 'Completion Report',
        'positivity' => 'Positivity Report',
        'highlow' => 'High / Low Report',
        'classification' => 'Classification Report',
        'comparison' => 'Comparison Report',
        'question_by_question_comparison' => "Question By Question Comparison",
        "question_group_comparison" => "Question Group Comparison",
        'reference_data' => "Reference Data Report",
        "answer_group_score" => "Answer Group Score"
    );
    // Cache

    public $survey_questions = false;

    public function __construct() {

        //increase mssql timeout to accomodate a few long running queries
        ini_set("mssql.timeout", "180");

        $this->survey_xml_location = dirname(__FILE__) . '/surveys/<CUSTOMER_ID>-<SURVEY_ID>.xml';
    }

    /**
     * Internal function for logging errors.
     */
    private function log_error($error_code, $error_extra_info = '', $severity = 0) {

        $this->last_error = array('error_code' => $error_code, 'error_extra_info' => $error_extra_info, 'severity' => $severity);

        error_log($error_code . ' - ' . $error_extra_info);
    }

    /**
     * Check if a column exists in a given table
     * @param string $table
     * @param string $column
     * @return boolean
     */
    public function column_exists($table, $column) {
        $sql = "SELECT COUNT(*) AS count FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '" . $table . "' AND COLUMN_NAME = '" . $column . "'";
        list($result) = $this->udb_fetch_all($sql);

        return $result["count"] > 0;
    }

    /**
     * Check if a table exists
     * @param  string $table The name of the table to check for
     * @return boolean
     */
    public function table_exists($table){
		$sql = "SELECT COUNT(*) AS count FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '" . $table . "'";
		list($result) = $this->udb_fetch_all($sql);

		return $result["count"] > 0;
    }

    //---------------------------------

    private function udb_last_insert_id() {
        if ($this->mssql_connection) {
            list($value) = $this->udb_fetch_row($this->udb_query('SELECT LAST_INSERT_ID=@@IDENTITY'));
            return $value;
        }

        $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
        return false;
    }

    //---------------------------------

    private function udb_rows_affected() {

        if ($this->mssql_connection) {
            return mssql_rows_affected($this->mssql_connection);
        }

        $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
        return false;
    }

    //---------------------------------

    private function udb_num_rows($query) {

        if ($this->mssql_connection) {
            return mssql_num_rows($query);
        }

        $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
        return false;
    }

    //---------------------------------

    public function udb_query($sql) {

        if($this->debug){
            $backtrace = debug_backtrace();
            $backtrace_line = $backtrace[0]['file'].'-'.$backtrace[0]['line'];
            unset($backtrace);
            $start_time = microtime(true);
        }


        if ($this->mssql_connection) {
            $tmp_query = mssql_query($sql, $this->mssql_connection);

            if ($tmp_query === false and $last_error = mssql_get_last_message() and substr($last_error, 0, 27) != 'Changed database context to') {

                $this->log_error('SQL Error', $last_error . '/ - ' . $sql);
            }

            if($this->debug){
                $end_time = microtime(true);
                print $backtrace_line.'|'.($end_time-$start_time)."<br />";
            }

            return $tmp_query;
        }
        else {
            $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
            return false;
        }
    }

    //---------------------------------

     function udb_fetch_row($query) {

        if ($this->mssql_connection) {

            if ($row = mssql_fetch_row($query)) {

                if (!empty($this->config['filter_terms']['search']) and is_array($this->config['filter_terms']['search'])) {
                    $row = str_ireplace($this->config['filter_terms']['search'], $this->config['filter_terms']['replace'], $row);
                }

                return $row;
            }
        }
        else {
            $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
            return false;
        }
    }

    //---------------------------------

    function udb_fetch_assoc($query) {

        if ($this->mssql_connection) {

            $row = mssql_fetch_assoc($query);

            if (!empty($this->config['filter_terms']['search']) and is_array($this->config['filter_terms']['search'])) {
                $row = str_ireplace($this->config['filter_terms']['search'], $this->config['filter_terms']['replace'], $row);
            }

            return $row;
        }
        else {
            $this->log_error('DB_CONNECTION_NOT_OPEN', false, 1);
            return false;
        }
    }

    //---------------------------------

    protected function udb_fetch_all($sql) {

        if($this->debug){
            $backtrace = debug_backtrace();
            $backtrace_line = $backtrace[0]['file'].'-'.$backtrace[0]['line'];
            unset($backtrace);
            $start_time = microtime(true);
        }


        if ($this->mssql_connection) {

            $out_array = array();
            if ($tmp_query = mssql_query($sql)) {

                if ($tmp_query and mssql_num_rows($tmp_query) > 0) {
                    while ($row = mssql_fetch_assoc($tmp_query)) {

                        if (!empty($this->config['filter_terms']['search']) and is_array($this->config['filter_terms']['search'])) {
                            $row = str_ireplace($this->config['filter_terms']['search'], $this->config['filter_terms']['replace'], $row);
                        }
                        $out_array[] = $row;
                    }
                }

                if($this->debug){
                    $end_time = microtime(true);
                    print $backtrace_line.'|'.($end_time-$start_time)."<br />";
                }

                return $out_array;
            }
            else {

                if ($last_error = mssql_get_last_message()) {
                    $this->log_error('SQL Error', $last_error);
                }
                return false;
            }
        }
    }

    /**
     * Retrieves an array of column information for the given table, indexed
     * by column name.  The result is cached for one hour.
     * @param  string $table
     * @return array
     */
    public function table_info($table){
        $apc_key = $this->generate_cache_key("table info", $table);

        if(($results = apc_fetch($apc_key)) === false){
            $results = array();

            $table = $this->udb_escape_string($table);

            $sql = "SELECT
                        COLUMN_NAME,
                        COLUMN_DEFAULT,
                        IS_NULLABLE,
                        DATA_TYPE,
                        CHARACTER_MAXIMUM_LENGTH
                    FROM
                        information_schema.columns
                    WHERE
                        TABLE_NAME='".$table."'";

            $qry = $this->udb_query($sql);

            while($row = $this->udb_fetch_assoc($qry)){
                $results[$row["COLUMN_NAME"]] = array(
                    "name" => $row["COLUMN_NAME"],
                    "default" => $row["COLUMN_DEFAULT"],
                    "is_nullable" => ($row["IS_NULLABLE"] ? true : false),
                    "data_type" => $row["DATA_TYPE"],
                    "max_length" => $row["CHARACTER_MAXIMUM_LENGTH"]
                    );
            }

            apc_store($apc_key, $results, 14400);
        }

        return $results;
    }

    /**
     * Retrieve an array of column information about the given column from
     * the given table.
     * @param  string $table  Table column belongs to.
     * @param  string $column Column to get information from.
     * @return array
     */
    public function column_info($table, $column){
        $apc_key = $this->generate_cache_key("table info", $table);

        $result = array();

        if(($info = apc_fetch($apc_key)) === false){
            $info = $this->table_info($table);
        }

        if(array_key_exists($column, $info)){
            $result = $info[$column];
        }

        return $result;
    }

    //---------------------------------

    /**
     * Connect to a customer database
     */
    private function get_org_level_names() {
        $org_names = array();
        $tmp_query = $this->udb_query('SELECT orgLevel, orgDescriptor FROM tblOrgDescriptors');
        while (list($orgLevel, $orgDescriptor) = $this->udb_fetch_row($tmp_query)) {
            $org_names[$orgLevel] = $orgDescriptor;
        }
        return $org_names;
    }

    //---------------------------------

    /**
     * Raw Connect
     */
    public function raw_connect($customer_id, $server_type, $staging, $testing) {

        $client_file = dirname(__FILE__) . '/client.' . $customer_id . '.php';

        if(!$customer_id || !file_exists($client_file)){
            $client_file = dirname(__FILE__) . '/client.class.php';

            require_once($client_file);

            $this->client = new Client($this);
        }
        else{
            require_once($client_file);

            $client_class = ucfirst($customer_id)."Client";

            $this->client = new $client_class($this);
        }

        $config_file = dirname(__FILE__) . '/config_' . $customer_id . '.php';

        if (file_exists($config_file) and $customer_id and ($server_type == 'DEV' or $server_type == 'LIVE')) {

            // Load in the customer config settings
            require($config_file);
            $this->config = $config;
            // Work out the database details

            $this->server_type = $server_type;
            if ($staging) {
                $this->staging = true;
            }
            else {
                $this->staging = false;
            }

            if ($testing) {
                $this->testing = true;
            }
            else {
                $this->testing = false;
            }

            $db_config = $this->get_db_config();

            $this->mssql_connection = mssql_connect($db_config['host'], $db_config['user'], $db_config['pass']);

            //horrible, horrible kludge to work around intermittent failed connection
            if ($this->mssql_connection === null || $this->mssql_connection === false) {

                $retry_count = 0;

                while ($retry_count < 3) {
                    $retry_count = $retry_count + 1;

                    $this->mssql_connection = mssql_connect($db_config['host'], $db_config['user'], $db_config['pass']);

                    if ($this->mssql_connection !== null && $this->mssql_connection !== false) {
                        $retry_count = 3;
                    }
                }
            }

            if ($this->mssql_connection) {

                //get the platform configuration data
                mssql_select_db("platform_manager", $this->mssql_connection);
                $this->platform_config = $this->udb_fetch_assoc($this->udb_query("SELECT * FROM tblConfig WHERE subdomain='".$customer_id.($staging ? "staging" : "")."'"));

                mssql_select_db($db_config['database'], $this->mssql_connection);
                $this->current_db_connection = array(
                    'database' => $db_config['database'],
                    'user' => $db_config['user'],
                );

                $this->customer_id = $customer_id;
                $this->survey_questions = array();

                $this->config['org_level_names'] = $this->get_org_level_names();

                //If we don't have a Flash LMS Domain, use the contentional
                //default.
                if (empty($this->config['flash_lms_domain'])) {
                    $this->config['flash_lms_domain'] = array(
                        'live' => $customer_id.'.usplive.com',
                        'staging' => $customer_id.'staging.usplive.com',
                        'testing' => $customer_id.'testing.usplive.com'
                    );
                }

                //Normalise the flash_lms_domain to a single string value.
                if ($this->staging) {
                    $this->config['flash_lms_domain'] = $this->config['flash_lms_domain']["staging"];
                }
                elseif ($this->testing) {
                    $this->config['flash_lms_domain'] = $this->config['flash_lms_domain']["testing"];
                }
                else {
                    $this->config['flash_lms_domain'] = $this->config['flash_lms_domain']["live"];
                }

                //If we don't have a Flash LMS dir, default to an empty string
                //since we can't provide a saner default.
                if (!isset($this->config['flash_lms_dir'])) {
                    $this->config['flash_lms_dir'] = '';
                }

                $this->config['flash_lms_url'] = 'http://' . $this->config['flash_lms_domain'] . '/' . $this->config['flash_lms_dir'] . '/lms';

                $this->config['flash_course_url'] = 'http://' . $this->config['flash_lms_domain'] . '/courses';

                $this->client->boot();

                return true;
            }
        }

        //If this the customer is helpcentre, return false - we're not connected
        //to the database, but we also don't need to log any additional errors.
        if ($customer_id === "helpcentre") {
            return false;
        }

        $this->log_error('Invalid Customer', $customer_id, 2);

        return false;
    }

    /**
     * Builds a platform manager database configuration.
     * @return array containing user, pass and database name
     */
    public function get_platform_manager_db_config()
    {
        $config = array(
            'host' => $this->db_ip,
            'database' => 'platform_manager',
            'user' => $this->db_users['LIVE_READ']['user'],
            'pass' => $this->db_users['LIVE_READ']['pass']
        );

        if ($this->staging) {
            $config['user'] = $this->db_users['STAGING']['user'];
            $config['pass'] = $this->db_users['STAGING']['pass'];
        } elseif ($this->testing) {
            $config['user'] = $this->db_users['TESTING']['user'];
            $config['pass'] = $this->db_users['TESTING']['pass'];
        } elseif ($this->server_type === "LIVE") {
            $config['user'] = $this->db_users['LIVE']['user'];
            $config['pass'] = $this->db_users['LIVE']['pass'];
        }

        return $config;
    }

    /**
     * Builds a client database configuration.
     * @return array containing user, pass and database name
     */
    public function get_db_config()
    {
        $config = array(
            'host' => $this->db_ip,
            'database' => '',
            'user' => $this->db_users['LIVE_READ']['user'],
            'pass' => $this->db_users['LIVE_READ']['pass']
        );

        $client_config = $this->config['database']['LIVE'];

        if ($this->staging) {
            $client_config = $this->config['database']['STAGING'];
            $config['user'] = $this->db_users['STAGING']['user'];
            $config['pass'] = $this->db_users['STAGING']['pass'];
        } elseif ($this->testing) {
            $client_config = $this->config['database']['TESTING'];
            $config['user'] = $this->db_users['TESTING']['user'];
            $config['pass'] = $this->db_users['TESTING']['pass'];
        }

        if (!is_array($client_config)) {
            $client_config = array(
                'database' => $client_config,
            );
        }

        $config['database'] = $client_config['database'];

        if (!empty($client_config['host'])) {
            $config['host'] = $client_config['host'];
        }

        if (!empty($client_config['user'])) {
            $config['user'] = $client_config['user'];
        } elseif ($this->server_type === 'LIVE' && !$this->staging && !$this->testing) {
            $config['user'] = $this->db_users['LIVE']['user'];
        }

        if (!empty($client_config['pass'])) {
            $config['pass'] = $client_config['pass'];
        } elseif ($this->server_type === 'LIVE' && !$this->staging && !$this->testing) {
            $config['pass'] = $this->db_users['LIVE']['pass'];
        }

        return $config;
    }

    /**
     * Connect to a customer database
     */
    public function company_list() {
        $company_list = array();
        foreach (scandir(dirname(__FILE__)) as $file) {
            if (substr($file, 0, 7) == 'config_' and substr($file, -4) == '.php') {
                $company_list[] = substr($file, 7, -4);
            }
        }
        return $company_list;
    }

    /**
     * Checks if client subdomain is valid
     *
     * @return boolean
     */
    public function valid_subdomain($host) {
        if (is_string($host)) {
            $clients = $this->company_list();
            $host_details = $this->parse_hostname($host);

            return is_array($host_details) && in_array($host_details['customer_id'], $clients);
        }

        return false;
    }

    /**
     * Parse the hostname to extract client's subdomain and other details
     */
    public function parse_hostname($hostname) {

        //Defaults
        $host_details = array(
                'customer_id' => '',
                'staging'     => false,
                'testing'     => false,
                'checkout'    => ''
            );

        $parts = explode('.', $hostname);

        if (count($parts) >= 3) {

            // Customer ID and Staging

            if (substr($parts[0], -7) == 'staging') {
                $host_details['customer_id'] = substr($parts[0], 0, -7);
                $host_details['staging'] = true;
                $host_details['testing'] = false;
            }
            else if (substr($parts[0], -7) == 'testing') {
                $host_details['customer_id'] = substr($parts[0], 0, -7);
                $host_details['staging'] = false;
                $host_details['testing'] = true;
            }
            else {
                $host_details['customer_id'] = $parts[0];
                $host_details['staging'] = false;
                $host_details['testing'] = false;
            }

            $website_key = $parts[1];
            $parts_count = count($parts);

            // Server Type

            if ($parts[count($parts) - 1] == 'com') { // This will need changing if we ever have a LIVE domain ending in anything but .com
                $host_details['server_type'] = 'LIVE';
            }
            else {
                $host_details['server_type'] = 'DEV';
                //If on dev and there are more than 5 parts in host, there probably is a developer name following usptools
                if ($parts_count === 6 && $website_key !== 'api') {
                    $website_key = $parts[1];
                    $host_details['checkout'] = $parts[2];
                } elseif ($parts_count > 6) {
                    $host_details['checkout'] = $parts[1];
                }
            }

            // Website
            $host_details['website'] = $website_key;

            $valid_site_keys = array(
                    'usptools',
                    'usplogin',
                    'api'
                );

            if (!in_array($website_key, $valid_site_keys)) {
                $this->log_error('Invalid Website', $website_key);
                return false;
            }

            return $host_details;
        }

        $this->log_error('Invalid Hostname', $hostname);
        return false;
    }

    /**
     * Returns the configured redirect options for the client.
     * @return string
     */
    public function get_config_redirect() {
        $result = '';

        if (isset($this->config['redirect'])) {
            $redirectConfig = $this->config['redirect'];
            $redirectURL = '';

            if ($this->staging) {
                if (isset($redirectConfig['STAGING']) && is_string($redirectConfig['STAGING'])) {
                    $redirectURL = $redirectConfig['STAGING'];
                }
            } elseif ($this->testing) {
                if (isset($redirectConfig['TESTING']) && is_string($redirectConfig['TESTING'])) {
                    $redirectURL = $redirectConfig['TESTING'];
                }
            } elseif (isset($redirectConfig['LIVE']) && is_string($redirectConfig['LIVE'])) {
                $redirectURL = $redirectConfig['LIVE'];
            }

            if (!empty($redirectURL)) {
                $result = $redirectURL;
            }
        }

        return $result;
    }

    /**
     * Connect to a customer database
     */
    public function connect($hostname = false) {

        if (!$hostname) {
            $hostname = $_SERVER['HTTP_HOST'];
        }

        if ($host_details = $this->parse_hostname($hostname)) {
            return $this->raw_connect($host_details['customer_id'], $host_details['server_type'], $host_details['staging'], $host_details["testing"]);
        }

        return false;
    }

    //=====================================================================
    // Login Functions
    //=====================================================================

    /**
     * Login as an UpSkill user
     */
    public function login($username, $password, $restrictions = true) {

        return $this->raw_login($username, $password, false, $restrictions);
    }

    private function raw_login($username = false, $password = false, $user_id = false, $restrictions = true) {

        $user_sql = false;

        if ($username and $password) {

            $username = str_replace("'", '', str_replace('"', '', $username));
            $password = str_replace("'", '', str_replace('"', '', $password));

            $user_sql = 'username = N\'' . $username . '\' AND password = N\'' . $password . '\'';
        }
        elseif ($user_id and is_numeric($user_id)) {
            $user_sql = 'UserID = ' . $user_id;
        }

        if ($user_sql) {

            $logged_in_user = $this->udb_fetch_assoc($this->udb_query('SELECT 1 AS Success, UserID, UserName, FirstName, LastName, Administrator, SystemUser, passwordHint, languageID, (SELECT orgAccessPermissions FROM tblReportAccess WHERE tblReportAccess.userID = tblUser.userID) AS ReportAccess FROM tblUser WHERE ' . $user_sql . ' AND accountActive = 1'));

            if ($logged_in_user['Success'] == 1) {

                // Temporary (According to Gary) - Don't log people in if they have no report access - BODGE CITY
                if (($logged_in_user['ReportAccess'] and preg_match('/^([0-9]+)\:([0-9\,]+)$/', $logged_in_user['ReportAccess'], $matches)) or $logged_in_user['Administrator'] == 1 or $this->customer_id == 'ccequality' or $this->customer_id == 'uspshow' or $restrictions === false) {


                    if (!empty($matches) and is_array($matches)) {

                        if ($this->org_level_valid($matches[1])) {
                            $logged_in_user['ReportAccess'] = array($matches[1] => explode(',', $matches[2]));
                        }
                        else {
                            $this->log_error('Org Level Invalid', $matches[1]);
                        }
                    }

                    if (substr($_SERVER['SCRIPT_NAME'], 0, 11) == '/orgeditor/') {
                        $org4_list = array();
                        foreach ($this->udb_fetch_all('SELECT Org4ID FROM tblOrg4') as $row) {
                            $org4_list[] = $row['Org4ID'];
                        }
                        $logged_in_user['ReportAccess'] = array(4 => array_values($org4_list));
                    }

                    $_SESSION['login_user_id'] = $logged_in_user['UserID'];
                    $this->logged_in_user = $logged_in_user;

                    return true;
                }
            }
        }

        $this->logged_in_user = false;
        return false;
    }

    /**
     * Creates a silent login token for supplied user, or the currently logged in user if no user id is provided
     * @param  int|null $user_id Optional User ID to create token for.  If null, the logged in user is used instead
     * @return int|boolean Returns the created token on success, or false on failure
     */
    public function create_silent_login_token($user_id = null){

        if ($user_id === null && is_array($this->logged_in_user) && array_key_exists("UserID", $this->logged_in_user)){
            $user_id = $this->logged_in_user["UserID"];
        }

        if($user_id !== null && is_numeric($user_id))
        {
            $token = $user_id.time();

            $user_id = $this->udb_escape_string($user_id);
            $token = $this->udb_escape_string($token);
            $user_exists = $this->udb_fetch_assoc($this->udb_query('SELECT 1 AS success FROM tblUser WHERE UserID = ' . $user_id . ''));
            if ($user_exists['success'] == 1){
                $sql = "INSERT INTO tblDashboardLaunch (userID, token, dateTime) VALUES(".$user_id.", ".$token.", GETDATE())";
                if($this->udb_query($sql) !== false){
                    return $token;
                }
            }
        }

        return false;
    }


    /**
     * Gets a valid token for use with silent login
     * @param  int|null $user_id Optional User ID to get token for.  If null, then logged in user is used instead
     * @return int|boolean Returns token if one is avalable for the user, otherwise deletes
     */
    public function get_valid_token($user_id=null){

        $token = false;

        if($user_id === null && is_array($this->logged_in_user) && array_key_exists("UserID", $this->logged_in_user)){
            $user_id = $this->logged_in_user["UserID"];
        }

        if($user_id !== null && is_numeric($user_id)){
            $token_valid_minutes = 5;
            $user_id = $this->udb_escape_string($user_id);
            list($token) = $this->udb_fetch_row($this->udb_query('SELECT token FROM tblDashboardLaunch WHERE userId = \'' . $user_id . '\' AND DATEDIFF(mi, dateTime, GETDATE()) <= ' . $token_valid_minutes));
        }

        if(!empty($token)){
            return $token;
        }

        return false;
    }

    /**
     * Silent Login
     * This function validates a token against tblDashboardLaunch and then runs raw_login if the token is correct
     * @param int $user_id
     * @param int $token
     */
    public function silent_login($user_id, $token, $restrictions=true) {

        $token_valid_minutes = 5;

        if (!empty($user_id) and is_numeric($user_id) and !empty($token) and is_numeric($token)) {
            $user_id = $this->udb_escape_string($user_id);
            $token = $this->udb_escape_string($token);

            list($token_valid) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblDashboardLaunch WHERE userId = \'' . $user_id . '\' AND token = \'' . $token . '\' AND DATEDIFF(mi, dateTime, GETDATE()) <= ' . $token_valid_minutes));

            if ($token_valid == 1) {
                return $this->raw_login(false, false, $user_id, $restrictions);
            }
        }

        $this->logged_in_user = false;
        $_SESSION = array();

        return false;
    }


    /**
     * Forces a login for the given user ID with the given resitrctions setting
     * @param int $user_id
     * @param boolean $restrictions
     * @return boolean
     */
    public function force_login($user_id, $restrictions = true)
    {
        if (is_numeric($user_id)) {
            return $this->raw_login(false, false, $user_id, $restrictions);
        }

        $this->logout();
        return false;
    }

    /**
     * Check Login
     */
    public function check_login($restrictions = true) {

        if (!empty($_SESSION['login_user_id']) and is_numeric($_SESSION['login_user_id'])) {
            return $this->raw_login(false, false, $_SESSION['login_user_id'], $restrictions);
        }


        $this->logged_in_user = false;
        unset($_SESSION["login_user_id"]);

        return false;
    }

    /**
     * Logout
     */
    public function logout() {

        $this->logged_in_user = false;
        $_SESSION = array();

        return true;
    }

    /**
     * Get or set the user's selected language.
     * @param string|null If set set as a string value, used for the user's selected language.
     * @return string The user's currently selected language.
     */
    public function user_language($lang = null)
    {
        if (is_string($lang)) {
            $_SESSION["language"] = $lang;
        }

        if (isset($_SESSION["language"])) {
            return $_SESSION["language"];
        } elseif (isset($this->config["lang_code"])) {
            return $this->config["lang_code"];
        } else {
            return "";
        }
    }

    /**
     * Escape a string for use in SQL Server
     * @param string $str
     * @return string
     */
    public function udb_escape_string($str) {

        //strip any previously added escapes
        $str = str_replace("''", "'", $str);

        //(re-)apply any neccessary escapes
        $str = str_replace("'", "''", $str);

        return $str;
    }

    //=====================================================================
    // HELPER FUNCTIONS
    //=====================================================================


    //=====================================================================
    // ORG FUNCTIONS
    //=====================================================================

    /**
     * Retrieve a list of Org Attributes
     * @return array
     */
    public function org_attribute_list($org1_id=null){
    	$result = array();

    	if($this->table_exists("tblOrgAttribute") && $this->table_exists("tblOrgAttributeName")){
            $sql = "SELECT orgAttributeNameID, orgAttributeDesc FROM tblOrgAttributeName ORDER BY orgAttributeDesc ASC";

	    	foreach($this->udb_fetch_all($sql) as $row){
	    		$result[$row["orgAttributeNameID"]] = $row["orgAttributeDesc"];
	    	}
    	}

    	return $result;
    }

    /**
     * Returns an array of org attributes indexed by org1ID.
     * @param $org_ids int|array An org1 ID or array of org IDs to limit by.
     * @return array();
     */
    public function org_attributes($org_ids=null){
        $result = array();

        $where = "";

        if(!is_null($org_ids)){
            if(!is_array($org_ids)){
                $org_ids = array($org_ids);
            }

            $org_ids = array_filter($org_ids, "is_numeric");

            if(!empty($org_ids)){
                $where = " WHERE tblOrg1.org1ID IN(".implode(",", $org_ids).") ";
            }
        }

    	if($this->table_exists("tblOrgAttribute") && $this->table_exists("tblOrgAttributeName")){
            $sql = "SELECT
                        tblOrg1.org1ID,
                        tblOrgAttributeName.orgAttributeNameID,
                        tblOrgAttributeName.orgAttributeDesc
                    FROM
                        tblOrg1
                        LEFT JOIN tblOrgAttribute ON tblOrg1.org1ID = tblOrgAttribute.org1ID
                        LEFT JOIN tblOrgAttributeName ON tblOrgAttribute.orgAttributeNameID = tblOrgAttributeName.orgAttributeNameID "
                    .$where.
                    "ORDER BY
                    tblOrg1.org1ID ASC";

            foreach($this->udb_fetch_all($sql) as $row){
                if(!array_key_exists($row["org1ID"], $result)){
                    $result[$row["org1ID"]] = array();
                }

                if($row["orgAttributeNameID"] !== null){
                    $result[$row["org1ID"]][$row["orgAttributeNameID"]] = $row["orgAttributeDesc"];
                }
	    	}
    	}

        return $result;
    }

    /**
     * Org Delete
     * This function deletes an org providing that it has no children.
     * @param int $org_level
     * @param int $org_id
     */
    public function org_delete($org_level, $org_id) {

        if ($this->org_level_valid($org_level)) {

            if (!empty($org_id) and is_numeric($org_id) and $org_id >= 0) {

                if ($this->org_count_children($org_level, $org_id) === 0) {

                    $sql = 'DELETE FROM tblOrg' . $org_level . ' WHERE org' . $org_level . 'ID = "' . $org_id . '"';

                    $this->udb_query($sql);

                    if ($this->udb_rows_affected() == 1) {
                        return true;
                    }
                    else {
                        $this->log_error('Org Delete Failed', $org_level . '-' . $org_id, 2);
                    }
                }
                else {

                    $this->log_error('Tried to delete org with children', $org_level . '-' . $org_id, 0);
                }
            }
            else {

                $this->log_error('Org ID Invalid', $org_id, 0);
            }
        }
        else {

            $this->log_error('Org Level Invalid', $org_level, 0);
        }

        return false;
    }

    //--------------------------------------------------------------------

    private function org_count_children($org_level, $org_id) {

        if ($this->org_level_valid($org_level)) {

            if (!empty($org_id) and is_numeric($org_id) and $org_id >= 0) {

                if ($org_level == 1) {

                    list($children) = $this->udb_fetch_row($this->udb_query('SELECT COUNT(*) FROM tblUser WHERE org1ID = "' . $org_id . '"'));
                }
                else {

                    list($children) = $this->udb_fetch_row($this->udb_query('SELECT COUNT(*) FROM tblOrg' . ($org_level - 1) . ' WHERE org' . $org_level . 'ID = "' . $org_id . '"'));
                }

                if (empty($children)) {
                    $children = 0;
                }
                return $children;
            }
            else {

                $this->log_error('Org ID Invalid', $org_id, 0);
            }
        }
        else {

            $this->log_error('Org Level Invalid', $org_level, 0);
        }

        return false;
    }

    //--------------------------------------------------------------------

    private function org_level_valid($org_level) {
        if ($org_level == 1 or $org_level == 2 or $org_level == 3 or $org_level == 4) {
            return true;
        }
        else {
            return false;
        }
    }

    //--------------------------------------------------------------------

    public function user_type_list($exclude_list = array(), $restrictions = true) {

        $out_array = array();

        if ($this->customer_id) {

            //If restrictions are set to false, disregard hard coded restrictions
            //(useful for tools such as the UME which should have user type list restrictions in place
            if ($restrictions !== false) {

                // TODO: Replace this FUDGE
                if ($this->customer_id == 'travelodge') {
                    $exclude_list = array(1, 2, 3, 4, 5, 6, 7, 8);
                }
                elseif ($this->customer_id == 'hmsmvtsme') {
                    $exclude_list = array(1, 2, 3);
                }
            }

            $exclude_sql = '';

            if ($exclude_list and is_array($exclude_list) and count($exclude_list) > 0) {
                $exclude_sql = 'WHERE userTypeID NOT IN (' . implode(',', $exclude_list) . ')';
            }

            if ($this->column_exists("tblUserType", "clientUserType")) {
                foreach ($this->udb_fetch_all('SELECT userTypeID, COALESCE(userTypeDescription, clientUserType) AS userTypeName FROM tblUserType ' . $exclude_sql . ' ORDER BY userTypeDescription') as $row) {
                    $out_array[$row['userTypeID']] = $row['userTypeName'];
                }
            }
            else {
                foreach ($this->udb_fetch_all('SELECT userTypeID, userTypeDescription AS userTypeName FROM tblUserType ' . $exclude_sql . ' ORDER BY userTypeDescription') as $row) {
                    $out_array[$row['userTypeID']] = $row['userTypeName'];
                }
            }
        }

        return $out_array;
    }

    //--------------------------------------------------------------------

    /**
     * Returns a list of user profiles
     * @return array
     */
    public function user_profile_list() {

        $out_array = array();

        if ($this->customer_id) {
            foreach ($this->udb_fetch_all('SELECT userProfileID, userProfileDescription FROM tblUserProfile ORDER BY userProfileDescription') as $row) {
                $out_array[$row['userProfileID']] = $row['userProfileDescription'];
            }
        }

        return $out_array;
    }

    /**
     * Returns the given user profile
     * @param  int $id
     * @return array
     */
    public function user_profile($id){
        $result = array();

        if(is_numeric($id)){
            $id = intval($id);

            $sql = "SELECT userProfileID, userProfileDescription FROM tblUserProfile WHERE userProfileID = ".$id;
            $qry = $this->udb_query($sql);

            while($row = $this->udb_fetch_assoc($qry)){
                $result["userProfileID"] = $row["userProfileID"];
                $result["userProfileDescription"] = $row["userProfileDescription"];
            }
        }

        return $result;
    }

    /**
     * Returns a list of course IDs available to the given user profile
     * @param  int $id userProfileID
     * @return array
     */
    public function user_profile_course_list($id){
        $result = array();

        if(is_numeric($id)){
            $id = intval($id);

            $sql = "SELECT courseID FROM tblUserProfileCourses WHERE userProfileID = ".$id;
            $qry = $this->udb_query($sql);

            while($row = $this->udb_fetch_row($qry)){
                $result[] = $row[0];
            }
        }

        return $result;
    }

    public function user_profile_courses_add($profile_id, $course_id, $course_code){
        if(is_numeric($profile_id) && is_numeric($course_id) && is_string($course_code)){
            $sql = "INSERT INTO tblUserProfileCourses (userProfileID, courseID, AICCCourseID) VALUES (".$profile_id.", ".$course_id.", '".$this->udb_escape_string($course_code)."')";

            $this->udb_query($sql);
            return true;
        }

        return false;
    }

    public function user_profile_courses_clear($filters){

        if(is_array($filters) && !empty($filters)){
            $sql = "DELETE FROM tblUserProfileCourses WHERE ";
            $where = array();

            if(array_key_exists("userProfileID", $filters)){

                if(!is_array($filters["userProfileID"]) && is_numeric($filters["userProfileID"])){
                    $filters["userProfileID"] = array(intval($filters["userProfileID"]));
                }

                //Run through array filter to ensure only numeric values are given
                $filters["userProfileID"] = array_filter($filters["userProfileID"], "is_numeric");

                //Run through array map to ensure all numeric values are parsed as ints
                $filters["userProfileID"] = array_map("intval", $filters["userProfileID"]);

                $where[] = "userProfileID IN (".implode(", ", $filters["userProfileID"]).")";
            }

            if(array_key_exists("courseID", $filters)){

                if(!is_array($filters["courseID"]) && is_numeric($filters["courseID"])){
                    $filters["courseID"] = array(intval($filters["courseID"]));
                }

                //Run through array filter to ensure only numeric values are given
                $filters["courseID"] = array_filter($filters["courseID"], "is_numeric");

                //Run through array map to ensure all numeric values are parsed as ints
                $filters["courseID"] = array_map("intval", $filters["courseID"]);

                $where[] = "courseID IN (".implode(", ", $filters["courseID"]).")";
            }

            if(!empty($where)){
                $sql .= implode(" AND ", $where);

                $this->udb_query($sql);
                return true;
            }
        }

        return false;
    }

    /**
     * Synchronises user flexible profile courses. Use empty array of course ids to remove all courses
     *
     * @param  numeric $user_id    The id of the user to sync courses for
     * @param  array   $course_ids The id of the courses which will be left on the user's flexible profile course list. If empty, the user's course list will be cleared
     * @return boolean false on failure, true on success
     */
    public function user_flex_profile_course_sync($user_id, array $course_ids = array()) {

        if (is_numeric($user_id) && $user_id > 0) {
            $user_id = $this->udb_escape_string($user_id);

            //Start by clearing all flexible course assignments for this user.
            $delete_query = $this->udb_query('DELETE FROM tblUserFlexibleProfiles WHERE userID = ' . $this->udb_escape_string($user_id));

            if (!empty($course_ids)) {
                return $this->user_flex_profile_course_attach($user_id, $course_ids);
            }

            return (bool)$delete_query;

        }
        return false;
    }

    public function user_flex_profile_course_attach($user_id, array $course_ids = array()) {

        if (is_numeric($user_id) && $user_id > 0) {
            $user_id = $this->udb_escape_string($user_id);

            $existing_course_ids = $this->user_flexible_profile_ids($user_id);

            //Filter out any non numeric values given.
            $course_ids = array_filter($course_ids, 'is_numeric');
            //Ensure we have no duplicate entries.
            $course_ids = array_unique($course_ids);
            //Ensure we're only adding entries that aren't already attached.
            $course_ids = array_diff($course_ids, $existing_course_ids);

            if (!empty($course_ids)) {
                $insert_parts = array();
                foreach ($course_ids as $course_id) {
                    $insert_parts[] = '(' . $user_id . ', ' . $this->udb_escape_string($course_id) . ')';
                }

                $sql = 'INSERT INTO tblUserFlexibleProfiles (UserID, CourseID) VALUES ' . implode(', ', $insert_parts);

                return (bool)$this->udb_query($sql);
            }
        }

        return false;
    }

    public function user_flex_profile_course_detach($user_id, array $course_ids = array()) {
        if (is_numeric($user_id) && $user_id > 0) {
            $user_id = $this->udb_escape_string($user_id);

            $existing_course_ids = $this->user_flexible_profile_ids($user_id);

            //Filter out any non numeric values given.
            $course_ids = array_filter($course_ids, 'is_numeric');
            //Ensure we have no duplicate entries.
            $course_ids = array_unique($course_ids);
            //Ensure we're only removing entries that are already attached.
            $course_ids = array_intersect($course_ids, $existing_course_ids);

            if (!empty($course_ids)) {
                $sql = sprintf(
                    'DELETE FROM tblUserFlexibleProfiles WHERE userID=%d AND courseID IN(%s)',
                    $user_id,
                    implode(', ', $course_ids)
                );

                return (bool)$this->udb_query($sql);
            }
        }

        return false;
    }

    //--------------------------------------------------------------------

    public function user_type_group_list() {

        $user_type_groups = array();

        if($this->column_exists("tblUserType", "userTypeGroupID")){

            $sql = "SELECT tbluserTypeGroup.userTypeGroupID, userTypeGroupDescription, userTypeGroupDisplayName, userTypeID FROM tblUserTypeGroup LEFT JOIN tblUserType ON tblUserTypeGroup.userTypeGroupID = tblUserType.userTypeGroupID ORDER BY userTypeGroupDisplayName";
            foreach($this->udb_fetch_all($sql) as $row){
                $user_type_groups[$row["userTypeGroupID"]]["userTypeGroup"] = $row["userTypeGroupDisplayName"];
                $user_type_groups[$row["userTypeGroupID"]]["userTypeIDs"][] = $row["userTypeID"];
            }
        }

        if (!empty($this->config['reporting_user_type_groups']) and is_array($this->config['reporting_user_type_groups'])) {

            foreach($this->config["reporting_user_type_groups"] as $key => $user_type_group){
                $user_type_groups[$key]["userTypeGroup"] = $user_type_group["name"];

                foreach($user_type_group["values"] as $value){
                    $user_type_groups[$key]["userTypeIDs"][] = $value;
                }
            }
        }

        if(count($user_type_groups) > 0){
            return $user_type_groups;
        }

        return false;
    }

    //--------------------------------------------------------------------

    public function job_type_list($only_used = true) {

        $out_array = array();

        if ($this->customer_id) {

            $used_sql = '';
            if ($only_used) {
                $used_sql = 'WHERE (SELECT TOP 1 1 FROM tblUser WHERE jobTypeID = tblJobType.jobTypeID) IS NOT NULL';
            }

            $selects = array(
                "jobTypeID",
                "userProfileID",
                "jobCode",
                "[default]",
                "jobDescription"
                );

            if($this->column_exists("tblJobType", "userTypeID") === true){
                $selects[] = "userTypeID";
            }

            foreach ($this->udb_fetch_all('SELECT '.implode(", ", $selects).' FROM tblJobType ' . $used_sql . ' ORDER BY jobCode ASC') as $row) {
                $out_array[$row['jobTypeID']] = $row;
            }
        }

        return $out_array;
    }

    //--------------------------------------------------------------------

    public function job_type_add($user_profile_id, $job_code, $job_description, $default = 0) {

        if (!is_numeric($user_profile_id)) {
            return false;
        }

        if ($default !== 0 && $default !== 1) {
            return false;
        }

        $job_code =  $this->udb_escape_string($job_code);
        $job_description = $this->udb_escape_string($job_description);

        $sql = "INSERT INTO tblJobType (userProfileID, jobCode, jobDescription, [default]) VALUES (" . $user_profile_id . ", '" . $job_code . "', '" . $job_description . "', " . $default . ")";

        $this->udb_query($sql);
    }

    //--------------------------------------------------------------------

    public function employment_type_list() {
        $out_array = array();

        if ($this->customer_id) {
            foreach ($this->udb_fetch_all('SELECT employmentTypeID, employmentTypeDesc FROM tblEmploymentType ORDER BY employmentTypeDesc') as $row) {
                $out_array[$row['employmentTypeID']] = $row['employmentTypeDesc'];
            }
        }

        return $out_array;
    }

    //--------------------------------------------------------------------

    public function employment_type_add($employment_type_description, $default = 0) {

        if ($default !== 0 && $default !== 1) {
            return false;
        }

        $employment_type_description = str_replace("'", "''", $employment_type_description);

        $sql = "INSERT INTO tblEmploymentType (employmentTypeDesc, [default]) VALUES ('" . $employment_type_description . "', " . $default . ")";

        $this->udb_query($sql);
    }

    //--------------------------------------------------------------------

    public function org_structure($long_name = false, $ignore_reporting_excludes = false) {

        if ($long_name) {
            $name_field_name = 'LongName';
        }
        else {
            $name_field_name = 'Name';
        }

        $where_sql = array();

        //--- Global Org Excludes ---

        if (!$ignore_reporting_excludes and array_key_exists('reporting_org_excludes', $this->config) and is_array($this->config['reporting_org_excludes'])) {
            foreach ($this->config['reporting_org_excludes'] as $tmp_org_level => $tmp_org_exclude_list) {
                if ($org_level <= $tmp_org_level) {
                    $where_sql[] = 'tblOrg' . $tmp_org_level . '.org' . $tmp_org_level . 'ID NOT IN (' . implode(',', $tmp_org_exclude_list) . ')';
                }
            }
        }

        //--- Restricted Views ---

        if (array_key_exists('ReportAccess', $this->logged_in_user) and is_array($this->logged_in_user['ReportAccess'])) {

            list($ra_level) = array_keys($this->logged_in_user['ReportAccess']);

            if ($ra_level < $org_level) { // No org lists are possible where you don't have access to anything at this level
                return array();
            }

            $where_sql[] = 'tblOrg' . $ra_level . '.org' . $ra_level . 'ID IN (' . implode(',', $this->logged_in_user['ReportAccess'][$ra_level]) . ')';
        }

        if (count($where_sql) > 0) {
            $where_sql = ' WHERE ' . implode(' AND ', $where_sql);
        }
        else {
            $where_sql = '';
        }

        //--- Get Structure ---

        $org_structure_dump = $this->udb_fetch_all('SELECT tblOrg4.Org4ID, tblOrg4.Org4' . $name_field_name . ', tblOrg3.Org3ID, tblOrg3.Org3' . $name_field_name . ', tblOrg2.Org2ID, tblOrg2.Org2' . $name_field_name . ' FROM tblOrg4 LEFT JOIN tblOrg3 ON (tblOrg4.Org4ID = tblOrg3.Org4ID) LEFT JOIN tblOrg2 ON (tblOrg2.Org3ID = tblOrg3.Org3ID) ' . $where_sql . ' ORDER BY tblOrg4.Org4Name, tblOrg4.Org4ID, tblOrg3.Org3Name, tblOrg3.Org3ID, tblOrg2.Org2Name, tblOrg2.Org2ID');

        $org_structure = array();

        foreach ($org_structure_dump as $row) {

            $org_structure[$row['Org4ID']]['level'] = 4;
            $org_structure[$row['Org4ID']]['id'] = $row['Org4ID'];
            $org_structure[$row['Org4ID']]['name'] = $row['Org4' . $name_field_name];

            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['level'] = 3;
            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['id'] = $row['Org3ID'];
            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['name'] = $row['Org3' . $name_field_name];

            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['children'][$row['Org2ID']]['level'] = 2;
            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['children'][$row['Org2ID']]['id'] = $row['Org2ID'];
            $org_structure[$row['Org4ID']]['children'][$row['Org3ID']]['children'][$row['Org2ID']]['name'] = $row['Org2' . $name_field_name];
        }

        return $org_structure;
    }

    //--------------------------------------------------------------------

    /**
     * Org List
     * Get details about a list of Orgs in a Level
     * Filters can contain the following:
     * "parent" => (1,2,3) - filter by parent org ID.
     * "org_id" => (1,2,3) - Only show these Orgs
     * @param int $org_level
     * @param array $filters
     * @param boolean $ignore_reporting_excludes
     * @param mixed $restriction_level valid options are "report" or false and indicates the level of restriction to apply to the org list
     */
    public function org_list($org_level, $filters = array(), $ignore_reporting_excludes = false, $restriction_level = "report") {
        if ($this->org_level_valid($org_level)) {

            $this_table = 'tblOrg' . $org_level;
            $this_field = 'Org' . $org_level . 'ID';

            $parent_table = false;
            $child_table = false;

            if ($org_level < 4) {
                $parent_table = 'tblOrg' . ($org_level + 1);
                $parent_field = 'Org' . ($org_level + 1) . 'ID';
            }
            if ($org_level > 1) {
                $child_table = 'tblOrg' . ($org_level - 1);
                $child_field = 'Org' . ($org_level - 1) . 'ID';
            }

            //=== SELECT ===

            $select_sql = array();
            $join_sql = '';
            $order_by_sql = 'orgName';

            // Join to all Org tables above this one
            $tmp_org_level = $org_level + 1;
            while ($tmp_org_level <= 4) {
                $join_sql .= 'JOIN tblOrg' . $tmp_org_level . ' ON (tblOrg' . ($tmp_org_level - 1) . '.org' . $tmp_org_level . 'ID = tblOrg' . $tmp_org_level . '.org' . $tmp_org_level . 'ID) ';
                $tmp_org_level++;
            }

            $select_sql[] = $org_level . ' AS orgLevel';
            $select_sql[] = $this_table . '.' . $this_field . ' AS orgID';
            $select_sql[] = $this_table . '.org' . $org_level . 'Name AS orgName';
            $select_sql[] = $this_table . '.org' . $org_level . 'LongName AS orgLongName';

            if($this->column_exists("tblOrg".$org_level, "email")){
                $select_sql[] = $this_table . '.email';
            }

            if($org_level == 1 and $this->column_exists("tblOrg1", "org1_sco")) {
                $select_sql[] = $this_table . '.org1_sco AS org1Sco';
            }

            if($this->column_exists($this_table, "email")){
                $select_sql[] = $this_table . '.email';
            }

            if($this->column_exists($this_table, "address1")){
                $select_sql[] = $this_table . '.address1';
            }

            if($this->column_exists($this_table, "address2")){
                $select_sql[] = $this_table . '.address2';
            }

            if($this->column_exists($this_table, "address3")){
                $select_sql[] = $this_table . '.address3';
            }

            if($this->column_exists($this_table, "town")){
                $select_sql[] = $this_table . '.town';
            }

            if($this->column_exists($this_table, "county")){
                $select_sql[] = $this_table . '.county';
            }

            if($this->column_exists($this_table, "postcode")){
                $select_sql[] = $this_table . '.postcode';
            }

            if($this->column_exists($this_table, "org".$org_level."PrimaryUserID")){
                $select_sql[] = $this_table . ".org".$org_level."PrimaryUserID AS orgPrimaryUserID";
            }


            if ($parent_table) {
                $select_sql[] = $parent_table . '.org' . ($org_level + 1) . 'ID AS parentOrgID';
                $select_sql[] = $parent_table . '.org' . ($org_level + 1) . 'Name AS parentOrgName';
                $select_sql[] = $parent_table . '.org' . ($org_level + 1) . 'LongName AS parentOrgLongName';
                $order_by_sql = 'parentOrgName, ' . $order_by_sql;
            }

            $select_sql[] = '(SELECT COUNT(*) FROM tblUser WHERE tblUser.' . $this_field . ' = ' . $this_table . '.' . $this_field . ') AS UserCount';

            if ($child_table) {
                $select_sql[] = '(SELECT COUNT(*) FROM ' . $child_table . ' WHERE ' . $child_table . '.' . $this_field . ' = ' . $this_table . '.' . $this_field . ') AS ChildCount';
            }

            //=== FILTERS ===

            $where_sql = array();

            //--- Global Org Excludes ---

            if (!$ignore_reporting_excludes and !empty($this->config['reporting_org_excludes']) and is_array($this->config['reporting_org_excludes'])) {
                foreach ($this->config['reporting_org_excludes'] as $tmp_org_level => $tmp_org_exclude_list) {
                    if ($org_level <= $tmp_org_level) {
                        $where_sql[] = 'tblOrg' . $tmp_org_level . '.org' . $tmp_org_level . 'ID NOT IN (' . implode(',', $tmp_org_exclude_list) . ')';
                    }
                }
            }

            //--- Restricted Views ---

            if (is_array($this->logged_in_user['ReportAccess']) && $restriction_level !== false) {

                list($ra_level) = array_keys($this->logged_in_user['ReportAccess']);

                if ($ra_level < $org_level) { // No org lists are possible where you don't have access to anything at this level
                    return array();
                }

                $where_sql[] = 'tblOrg' . $ra_level . '.org' . $ra_level . 'ID IN (' . implode(',', $this->logged_in_user['ReportAccess'][$ra_level]) . ')';
            }

            //--- Org ID Filter ---

            if (!empty($filters['org_id'])) {

                if (!is_array($filters['org_id'])) {
                    $filters['org_id'] = array($filters['org_id']);
                }

                $tmp_sql = '';

                foreach ($filters['org_id'] as $org_id) {

                    if (is_numeric($org_id)) {
                        $tmp_sql .= $this_field . ' = ' . $org_id . ' OR ';
                    }
                    else {
                        $this->log_error('Org ID Invalid', $org_id, 0);
                    }
                }

                if ($tmp_sql) {
                    $where_sql[] = substr($tmp_sql, 0, -4);
                }
            }

            //--- Parent Filter ---

            if (!empty($filters['parent'])) {

                if (!is_array($filters['parent'])) {
                    $filters['parent'] = array($filters['parent']);
                }

                $tmp_sql = '';

                foreach ($filters['parent'] as $parent_id) {

                    if (is_numeric($parent_id)) {
                        $tmp_sql .= $parent_table . '.' . $parent_field . ' = ' . $parent_id . ' OR ';
                    }
                    else {
                        $this->log_error('Parent ID Invalid', $parent_id, 0);
                    }
                }

                if ($tmp_sql) {
                    $where_sql[] = substr($tmp_sql, 0, -4);
                }
            }

            //=== Run Statement ===
            $tmp_sql = 'SELECT ' . implode(', ', $select_sql) . ' FROM ' . $this_table . ' ' . $join_sql;

            if ($where_sql) {
                $tmp_sql .= ' WHERE ' . implode(' AND ', $where_sql);
            }

            $tmp_sql .= ' ORDER BY ' . $order_by_sql;

            $result = $this->udb_fetch_all($tmp_sql);

            if($org_level == 1 && $this->table_exists("tblOrgAttributeName")){
                $tmp_sql = "SELECT tblOrgAttribute.orgAttributeNameID, orgAttributeDesc, org1ID
                            FROM tblOrgAttribute JOIN tblOrgAttributeName
                            ON tblOrgattribute.orgAttributeNameID = tblOrgAttributeName.orgAttributeNameID";

                $raw_attributes = $this->udb_fetch_all($tmp_sql);
                $attributes = array();

                foreach($raw_attributes as $attr){
                    $attributes[$attr["org1ID"]][$attr["orgAttributeNameID"]] = $attr["orgAttributeDesc"];
                }

                foreach($result as $key => $org){
                    if($org["orgLevel"] === 1){
                        $result[$key]["orgAttributes"] = array_key_exists($org["orgID"], $attributes) ? $attributes[$org["orgID"]] : array();
                    }
                }
            }

            return $result;
        }
        else {

            $this->log_error('Org Level Invalid', $org_level, 1);
        }
    }

    /**
     * Returns org family ids (org1id, parent org2id, parent org3id, parent org4id)
     * Filters can contain the following:
     * "id" => ("level" => 1, "id" => (1,2,3)) - filter by org level & ID.
     * "name" => ("level" => 1, "name" => "n420") - filter by org level & name.
     * @param array $filter
     * @param boolean $onestop
     * @return boolean|array
     */
    public function org_family_ids($filter = array(), $onestop = false) {

        if ($filter !== null && is_array($filter)) {

            $where = "";

            if (count($filter) > 0) {
                $where = " WHERE ";

                if(array_key_exists("id", $filter)){

                    if(!is_array($filter["id"])){
                        $filter["id"] = array($filter["id"]);
                    }

                    $where .= "tblOrg" . $filter["level"] . ".org" . $filter["level"] . "ID IN(" . implode(", ", $filter["id"]) . ")";
                }
                else if (array_key_exists("name", $filter)) {

                    if(!is_array($filter["name"])){
                        $filter["name"] = array($filter["name"]);
                    }

                    $where .= "tblOrg" . $filter["level"] . ".org" . $filter["level"] . "Name IN ('" . implode("', '", $filter["name"]) . "')";
                }
            }

            $sql = "SELECT tblOrg1.org1ID, tblOrg1.org1Name, tblOrg2.org2ID, tblOrg2.org2Name, tblOrg3.org3ID, tblOrg3.org3Name, tblOrg4.org4ID, tblOrg4.org4Name " .
                    ( $onestop === true ? ", tblOrg1.Org1PrimaryUserID, tblOrg2.Org2PrimaryUserID, tblOrg3.Org3PrimaryUserID, tblOrg4.Org4PrimaryUserID " : "" ) .
                    "FROM ((tblOrg4 LEFT JOIN tblOrg3 ON tblOrg3.org4ID = tblOrg4.org4ID) LEFT JOIN tblOrg2 ON tblOrg2.org3ID = tblOrg3.org3ID) " .
                    "LEFT JOIN tblOrg1 ON tblOrg1.org2ID = tblOrg2.org2ID " . $where . " ORDER BY tblOrg4.org4ID ASC, tblOrg3.org3ID ASC, tblOrg2.org2ID ASC, tblOrg1.org1ID ASC";

            $rows = $this->udb_fetch_all($sql);

            if (count($rows) > 0) {
                return $rows;
            }
        }

        return false;
    }

    //--------------------------------------------------------------------

    /**
     * Org Details
     * This is a wrapper for org_list which just returns one row matching the org_id sent in.
     * @param int $org_level
     * @param int $org_id
     * @param boolean $ignore_reporting_excludes
     * @param mixed $restriction_level valid options are "report" or false and indicates the level of restriction to apply to the org list
     * @return array|false False if not found, else array of org details
     */
    public function org_details($org_level, $org_id, $ignore_reporting_excludes = false, $restriction_level = "report") {

        if ($this->org_level_valid($org_level)) {

            $org_id = intval($org_id);

            if ($org_id > 0) {

                $tmp_results = $this->org_list($org_level, array('org_id' => $org_id), $ignore_reporting_excludes, $restriction_level);

                if (count($tmp_results) == 1) {
                    return $tmp_results[0];
                }
                else {
                    return false;
                }
            }
        }
        else {

            $this->log_error('Org Level Invalid', $org_level, 1);
        }
    }

    //--------------------------------------------------------------------

    public function org_set_attributes($org_id, $attributes, $clear_existing=true){
    	if($this->table_exists("tblOrgAttribute")){

	    	if(!is_numeric($org_id) || !is_array($attributes)){
	    		return false;
	    	}

	    	//Clear existing org attributes, if required
	    	if($clear_existing === true){
	    		$this->org_clear_attributes($org_id);
	    	}

	    	$sql = "INSERT INTO tblOrgAttribute (org1ID, OrgAttributeNameID) VALUES";

			//insert the new attributes into the table
			foreach($attributes as $attribute){
				$sql .= "(".$org_id.", ".$attribute."),";
			}

			$sql = trim($sql, ",");

			return $this->udb_rows_affected($this->udb_query($sql)) > 0 ? true : false;
		}

        return false;
    }

    public function org_clear_attributes($org_id){
		if($this->table_exists("tblOrgAttribute")){

	    	if(!is_numeric($org_id)){
    			return false;
	    	}

    		$this->udb_query("DELETE FROM tblOrgAttribute WHERE org1ID=".$org_id);
    	}
    }


    /**
     * Org Update
     * This function updates an Org of any level and also makes sure that the user tables is updated to match if the parent org id has changed.
     * @param int $org_level
     * @param int $org_id
     * @param string $name
     * @param string $long_name
     * @param int $parent_org_id (Optional / Must not be set if $org_level = 4)
     * @param boolean $scotland_flag (Default NULL)
     * @param array $attributes Collections of org attributes to set, if attributes are supported
     * @param string $email Email address for org
     */
    public function org_update($org_level, $org_id, $name, $long_name, $parent_org_id = false, $scotland_flag = null, $attributes=array(), $email="") {

        if ($this->org_level_valid($org_level)) {

            $org_id = intval($org_id);

            if ($org_id > 0) {

                // SQL for parents
                $parent_sql = '';

                if ($org_level < 4 and is_numeric($parent_org_id)) {

                    list($parent_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblOrg' . ($org_level + 1) . ' WHERE org' . ($org_level + 1) . 'ID = \'' . $parent_org_id . '\''));

                    if ($parent_exists == 1) {
                        $parent_sql = ', org' . ($org_level + 1) . 'ID = \'' . $parent_org_id . '\'';
                    }
                    else {
                        $this->log_error('Parent Org ID does not exist', $parent_org_id, 1);
                        return false;
                    }
                }

                if($org_level === 1 && $this->table_exists("tblOrgAttribute")){
                	if(is_array($attributes) && count($attributes) > 0){
                		$this->org_set_attributes($org_id, $attributes);
                	}
                	else{
                		$this->org_clear_attributes($org_id);
                	}
                }

                // SQL for the scotland flag "feature"
                $scotland_sql = '';
                if ($org_level == 1 and $scotland_flag !== null and $this->column_exists("tblOrg1", "org1_sco")) {
                    if ($scotland_flag) {
                        $scotland_sql = ', org1_sco = 1';
                    }
                    else {
                        $scotland_sql = ', org1_sco = 0';
                    }
                }

                //SQL for email support
                $email_sql = '';
                if($this->column_exists("tblOrg".$org_level, "email")){
                    $email_sql = ", email='".$this->udb_escape_string($email)."'";
                }

                $sql =  'UPDATE tblOrg' . $org_level . ' SET
                        org' . $org_level . 'Name = \'' . $this->udb_escape_string($name) . '\',
                        org' . $org_level . 'LongName = \'' . $this->udb_escape_string($long_name) . '\'
                        ' . $parent_sql . $scotland_sql . $email_sql .'
                    WHERE org' . $org_level . 'ID = \'' . $org_id . '\'';

                $tmp_query = $this->udb_query($sql);

                if ($this->udb_rows_affected($tmp_query) == 1) {

                    if ($parent_sql != '') {
                        $this->update_user_parents();
                    }

                    return true;
                }
                else {
                    $this->log_error('Org Update Failed', $org_level . '-' . $org_id, 1);
                }
            }
            else {
                $this->log_error('Org ID Invalid', $org_id, 1);
            }
        }
        else {
            $this->log_error('Org Level Invalid', $org_level, 1);
        }

        return false;
    }

    //--------------------------------------------------------------------

    public function update_user_parents() {

        // $this->udb_query('UPDATE tblUser SET tblUser.org2ID = (SELECT tblOrg1.org2ID FROM tblOrg1 WHERE tblOrg1.org1ID = tblUser.org1ID), tblUser.org3ID = (SELECT tblOrg2.org3ID FROM tblOrg2 WHERE tblOrg2.org2ID = tblUser.org2ID), tblUser.org4ID = (SELECT tblOrg3.org4ID FROM tblOrg3 WHERE tblOrg3.org3ID = tblUser.org3ID)');
        $this->udb_query('UPDATE tblUser SET tblUser.org2ID = (SELECT tblOrg1.org2ID FROM tblOrg1 WHERE tblOrg1.org1ID = tblUser.org1ID)');
        $this->udb_query('UPDATE tblUser SET tblUser.org3ID = (SELECT tblOrg2.org3ID FROM tblOrg2 WHERE tblOrg2.org2ID = tblUser.org2ID)');
        $this->udb_query('UPDATE tblUser SET tblUser.org4ID = (SELECT tblOrg3.org4ID FROM tblOrg3 WHERE tblOrg3.org3ID = tblUser.org3ID)');
    }

    //--------------------------------------------------------------------

    /**
     * Org Name Exists
     * Checks if either an org shortname or longname exists within the specified org level and NOT matching the optional org ID
     * @param string $type The type of name to search for.  Valid values are either "Name" or "longName"
     * @param string $name The name to check
     * @param int $org_level
     * @param int $org_id
     * @return boolean
     */
    public function org_name_exists($type, $name, $org_level, $org_id = null) {
        if ($this->org_level_valid($org_level)) {

            $sql = "SELECT 1 FROM tblOrg" . $org_level . " WHERE ";
            $where_sql = array();

            if ($org_id !== null) {
                $where_sql[] = "org" . $org_level . "ID <> " . $org_id;
            }

            if ($type === "Name" || $type === "longName") {
                $where_sql[] = "org" . $org_level . $type . " = '" . $name . "'";
            }
            else {
                return false;
            }

            $sql .= implode(' AND ', $where_sql);

            list($tmp) = $this->udb_fetch_row($this->udb_query($sql));

            if ($tmp === 1) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }

    /**
     * Org Add
     * This function creates a new org at any level and returns the new org ID.
     * @param int $org_level
     * @param string $name
     * @param string $long_name
     * @param int $parent_org_id (Must be set if $org_level < 4 and ignored if $org_level = 4)
     * @param boolean $scotland_flag (Default NULL)
     * @param array $attributes Collections of org attributes to set, if attributes are supported
     * @param string $email Email address for org
     */
    public function org_add($org_level, $name, $long_name, $parent_org_id = false, $scotland_flag = null, $attributes=array(), $email="") {

        if ($this->org_level_valid($org_level)) {

            // SQL for parent

            $parent_sql_field = '';
            $parent_sql_value = '';
            if ($org_level < 4) {

                if (!is_numeric($parent_org_id)) {
                    $this->log_error('No Parent Org specified on add', $org_level . '-' . $parent_org_id, 1);
                    return false;
                }

                list($parent_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblOrg' . ($org_level + 1) . ' WHERE org' . ($org_level + 1) . 'ID = \'' . $parent_org_id . '\''));

                if ($parent_exists != 1) {
                    $this->log_error('Parent Org ID does not exist', $parent_org_id, 1);
                    return false;
                }

                $parent_sql_field = ', org' . ($org_level + 1) . 'ID';
                $parent_sql_value = ', \'' . $parent_org_id . '\'';

                // SQL for the scotland flag "feature"
                $scotland_sql_field = '';
                $scotland_sql_value = '';

                if ($org_level == 1 and $scotland_flag !== null && $this->column_exists("tblOrg1", "org1_sco")) {

                    $scotland_sql_field = ', org1_sco';
                    if ($scotland_flag) {
                        $scotland_sql_value = ', 1';
                    }
                    else {
                        $scotland_sql_value = ', 0';
                    }
                }
            }

            //SQL for email support
            $email_sql_field = '';
            $email_sql_value = '';
            if($this->column_exists("tblOrg".$org_level, "email")){
                $email_sql_field = ", email";
                $email_sql_value = ", '".$this->udb_escape_string($email)."'";
            }

            // Run the statement

            $sql = 'INSERT INTO tblOrg' . $org_level . ' (
                        orgLevel,
                        org' . $org_level . 'Name,
                        org' . $org_level . 'LongName
                        ' . $parent_sql_field . $scotland_sql_field . $email_sql_field .'
                    ) VALUES (
                        \'' . $org_level . '\',
                        \'' . $this->udb_escape_string($name) . '\',
                        \'' . $this->udb_escape_string($long_name) . '\'
                        ' . $parent_sql_value . $scotland_sql_value . $email_sql_value .
                    ')';

            $tmp_query = $this->udb_query($sql);

            if ($this->udb_rows_affected($tmp_query) == 1) {

                $org_id = $this->udb_last_insert_id();

                //Set up org attributes, if available
                if($org_level === 1 && $this->table_exists("tblOrgAttribute")){
                    if(is_array($attributes) && count($attributes) > 0){
                        $this->org_set_attributes($org_id, $attributes);
                    }
                }

                return $org_id;
            }
            else {
                $this->log_error('Org Add Failed', $org_level, 1);
            }
        }
        else {

            $this->log_error('Org Level Invalid', $org_level, 1);
        }

        return false;
    }

    //---------------------------------

    public function org_level_name($org_level) {

        $default_org_level_names = array(// Hopefully these shouldn't be used
            1 => 'Org 1',
            2 => 'Org 2',
            3 => 'Org 3',
            4 => 'Org 4',
        );

        if ($this->org_level_valid($org_level)) {
            if (!empty($this->config['org_level_names']) and is_array($this->config['org_level_names']) and !empty($this->config['org_level_names'][$org_level])) {
                return $this->config['org_level_names'][$org_level];
            }
            else {
                return $default_org_level_names[$org_level];
            }
        }

        return false;
    }


    /**
     * Retrieves a list of ticker tape messages for the given language
     * @param  int  $language_id
     * @param  boolean $active_only Only returns active records if true, or all if false
     * @return array
     */
    public function ticker_tape_messages($language_id, $active_only=true){
        $messages = array();

        if($this->table_exists("tblTickerTape")){

            $sql = "SELECT message, active FROM tblTickerTape WHERE languageID=".$language_id;

            if($active_only){
                $sql .= " AND active=1";
            }

            $qry = $this->udb_query($sql);

            while($row = $this->udb_fetch_row($qry)){
                $messages[] = array("message" => $row[0], "active" => $row[1]);
            }
        }

        return $messages;
    }

    //=====================================================================
    // USER FUNCTIONS
    //=====================================================================

    /**
     * Get whether a user should be forced to change their password
     * @param  int|boolean $user_id The userID of the user to get the changePasswordFlag value for
     * @return boolean
     */
    public function user_password_change_required($user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id)) {
            $sql = "SELECT changePasswordFlag FROM tblUser WHERE userID=".$user_id;

            list($required) = $this->udb_fetch_row($this->udb_query($sql));

            return $required === 1 ? true : false;
        }

        return false;
    }

    /**
     * Set the changePasswordFlag field in tblUser
     * @param  boolean      $required If true, a password change is required, else password change not required
     * @param  int|boolean  $user_id  The userID of the user to change. If false, change the logged in user
     * @return boolean
     */
    public function user_password_change_required_update($required, $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id) && is_bool($required)) {
            $sql = "UPDATE tblUser SET changePasswordFlag = ".($required === true ? 1: 0)." WHERE userID=".$user_id;

            $this->udb_query($sql);

            return true;
        }

        return false;
    }

    /**
     * Gets whether a user has accepted the EULA
     * @param  int|boolean $user_id The user to check the eula field for
     * @return boolean
     */
    public function user_eula($user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id !== false and is_numeric($user_id)) {
            $sql = "SELECT eula FROM tblUser WHERE userID=".$user_id;

            list($required) = $this->udb_fetch_row($this->udb_query($sql));

            return $required ? true : false;
        }

        return false;
    }

    /**
     * Sets the EULA field for the user
     * @param  boolean      $accepted Whether the EULA has been accepted or not
     * @param  int|boolean  $user_id  The userID of the user to change.  If false, defaults to logged in user
     * @return
     */
    public function user_eula_update($accepted, $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id) && is_bool($accepted)) {
            $sql = "UPDATE tblUser SET eula = ".($accepted === true ? 1: 0)." WHERE userID=".$user_id;

            $this->udb_query($sql);

            return true;
        }

        return false;
    }

    /**
     * Retrieves user alerts for the given user
     * @param  int|boolean $user_id The user ID to retrieve alerts for.  If none provided, defaults to logge din user
     * @return Array|Boolean Returns an array of alerts if successful, or false on error
     */
    public function user_alerts($user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id)) {
            $sql = "SELECT userAlertID, alertCode FROM tblUserAlert WHERE userID=".$user_id;

            return $this->udb_fetch_all($sql);
        }

        return false;
    }

    /**
     * Add a user alert for the given user is provided, else the logged in user
     * @param  int  $alert_code
     * @param  int|boolean $user_id    If false, use logged in user
     * @return boolean
     */
    public function user_alert_add($alert_code, $user_id=false){
        if($user_id === false){
            $user_id = $this->logged_in_user["UserID"];
        }

        if(is_numeric($user_id) && is_numeric($alert_code)){
            $user_id = intval($user_id);
            $alert_code = intval($alert_code);

            return $this->udb_query("INSERT INTO tblUserAlert (userID, alertCode) VALUES(".$user_id.", ".$alert_code.")");
        }

        return false;

    }

    /**
     * Deletes either an individual userAlertID or all alert codes for the user
     * @param  int  $alert          Either the userAlertID or the alertCode to be removed
     * @param  boolean $clear_type  If true, treats $alert as an alertCode, otherwise, treats $alert as a userAlertID
     * @param  int|boolean $user_id If false, logged in user is used
     * @return boolean
     */
    public function user_alerts_delete($alert, $clear_type=false, $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if(is_numeric($user_id) && is_numeric($alert)){

            if($clear_type){
                $sql = "DELETE FROM tblUserAlert WHERE alertCode=".$alert." AND userID=".$user_id;
            }
            else{
                $sql = "DELETE FROM tblUserAlert WHERE userAlertID=".$alert." AND userID=".$user_id;
            }

            $this->udb_query($sql);

            return true;
        }

        return false;
    }


    /**
     * User Update Password
     * This function updates the password and password hint for a user.
     */
    public function user_password_update($new_password, $new_password_hint = false, $user_id = false, $edited_by = null) {

        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id)) {

            $updates = array(
                'password = \''.$this->udb_escape_string($new_password).'\'',
                'lastModifiedDate=GETDATE()',
                'changePasswordFlag=0',
                'changePwdNextLogin=0'
            );

            if ($new_password_hint !== false) {
                $updates[] = 'passwordHint = \''.$this->udb_escape_string($new_password_hint).'\'';
            }

            //If the edited by value is not a numeric value, default to null.
            if (!is_numeric($edited_by)) {
                $edited_by = 'null';
            }

            $updates[] = 'lastModifiedBy='.$edited_by;

            $sql = sprintf(
                'UPDATE tblUser SET %s WHERE userID = %d',
                implode(', ', $updates),
                $user_id
            );

            $this->udb_query($sql);

            return true;
        }

        return false;
    }

    /**
     * Returns the password hint for the given user
     * @param string $user_name
     * @return boolean
     */
    public function user_password_hint($user_name) {
        if (!isset($user_name) || !is_string($user_name)) {
            return false;
        }

        $sql = "SELECT passwordHint FROM tblUser WHERE userName = '" . $this->udb_escape_string($user_name) . "'";

        list($hint) = $this->udb_fetch_row($this->udb_query($sql));

        return $hint;
    }

    /**
     * Returns the userTypePermissions for the given user
     *
     * @param  int|boolean $user_id If false, uses logged in user
     * @return array
     */
    public function user_permissions($user_id=false){
        $permissions = array();

        if($user_id === false && $this->logged_in_user !== false){
            $user_id = $this->logged_in_user["UserID"];
        }

        if(is_numeric($user_id)){
            $sql = "SELECT displayOrder, permissionName, permissionDescription,
            permissionActive FROM tblUserTypePermissions JOIN tblUser ON
            tblUserTypePermissions.userTypeID = tblUser.userTypeID WHERE
            userID=".$user_id." ORDER BY displayOrder ASC";

            $qry = $this->udb_query($sql);

            while($row = $this->udb_fetch_assoc($qry)){
                $permissions[] = $row;
            }
        }

        return $permissions;
    }

    /**
     * User Add
     * This function adds a new user
     * @param array $in_details
     * @param int|null $created_by ID of the user that created the record, or
     *                              null if automatically created.
     */
    public function user_add($in_details, $created_by = null) {

        $required_fields = array(
            'userName' => 'Username',
            'org1ID' => 'Org 1 ID',
            'firstName' => 'First Name',
            'lastName' => 'Last Name',
            'jobTypeID' => 'Job Type',
            'userProfileID' => 'User Profile',
            'password' => 'Password'
        );

        // Default Values
        $user = array(
            'userTypeID' => 1,
            'employmentTypeID' => 1,
            'accountActive' => 1,
            'administrator' => 0,
            'selfEnroller' => 0,
            'ChangePwdNextLogin' => 0,
            'passwordReminder' => 0,
            'creationDateTime' => date('Y-m-d H:i:s'),
            'createdBy' => null,
            'userCreditBalance' => 0,
            'tmpExclude' => 0,
            'email' => '',
            'passwordHint' => ''
        );

        if (is_numeric($created_by)) {
            $user['createdBy'] = $created_by;
        }

        //--- Username ---

        if (!empty($in_details['userName'])) {

            $username_col = $this->column_info("tblUser", "userName");

            if($username_col["max_length"] < mb_strlen($in_details['userName'], 'UTF-8')){
                return 'The username is too long.';
            }

            $user['userName'] = $in_details['userName'];
            unset($required_fields['userName']);

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblUser WHERE userName = \'' . $this->udb_escape_string($in_details['userName']) . '\''));

            if ($tmp_exists == 1) {
                return 'The username already exists.';
            }
        }

        //--- First and Last Name ---

        if (!empty($in_details['firstName'])) {
            $user['firstName'] = $in_details['firstName'];
            unset($required_fields['firstName']);
        }

        if (!empty($in_details['lastName'])) {
            $user['lastName'] = $in_details['lastName'];
            unset($required_fields['lastName']);
        }

        //--- Country ---

        if (!empty($in_details['countryID']) and is_numeric($in_details['countryID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblCountry WHERE CountryID = ' . $in_details['countryID']));

            if($tmp_exists == 1){
                $user['countryID'] = $in_details['countryID'];
            }

        }

        if (empty($user['countryID'])) {

            list($tmp_id) = $this->udb_fetch_row($this->udb_query('SELECT countryID FROM tblCountry WHERE [default] = 1'));
            if ($tmp_id and is_numeric($tmp_id)) {
                $user['countryID'] = $tmp_id;
            }
        }

        //--- Language ---

        if (!empty($in_details['languageID']) and is_numeric($in_details['languageID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblLanguage WHERE LanguageID = ' . $in_details['languageID']));

            if($tmp_exists == 1){
                $user['languageID'] = $in_details['languageID'];
            }
        }


        if (empty($user['languageID'])) {

            list($tmp_id) = $this->udb_fetch_row($this->udb_query('SELECT languageID FROM tblLanguage WHERE [default] = 1'));
            if ($tmp_id and is_numeric($tmp_id)) {
                $user['languageID'] = $tmp_id;
            }
        }

        //--- Orgs ---

        if (!empty($in_details['org1ID']) and is_numeric($in_details['org1ID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblOrg1 WHERE Org1ID = ' . $in_details['org1ID']));

            if ($tmp_exists == 1) {
                $user['org1ID'] = $in_details['org1ID'];
                unset($required_fields['org1ID']);
            }
        }

        //--- Job Type ---

        if (!empty($in_details['jobTypeID']) and is_numeric($in_details['jobTypeID'])) {

            list($tmp_exists, $user_profile_id) = $this->udb_fetch_row($this->udb_query('SELECT 1, userProfileID FROM tblJobType WHERE jobTypeID = ' . $in_details['jobTypeID']));

            if ($tmp_exists == 1) {

                $user['jobTypeID'] = $in_details['jobTypeID'];
                unset($required_fields['jobTypeID']);

                if ($user_profile_id and is_numeric($user_profile_id)) {

                    $user['userProfileID'] = $user_profile_id;
                    unset($required_fields['userProfileID']);
                }
            }
        }

        //--- User Profile ---

        if (!empty($in_details['userProfileID'])) {
            $user['userProfileID'] = $in_details['userProfileID'];
            unset($required_fields['userProfileID']);
        }
        else if(array_key_exists("userProfileID", $required_fields)){
            $user_profile_id = $this->user_defaults("userProfileDefault");

            if(is_numeric($user_profile_id)){
                $user['userProfileID'] = $user_profile_id;
                unset($required_fields['userProfileID']);
            }
        }

        //--- Flexible profile

        if (isset($in_details['flexProfile']) && $this->column_exists("tblUser", 'flexProfile')) {
            $user['flexProfile'] = (int)$in_details['flexProfile'];
        }
        //--- Employment Type ---

        if (!empty($in_details['employmentTypeID']) and is_numeric($in_details['employmentTypeID'])) {
            list($row_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 AS rowExists FROM tblEmploymentType WHERE employmentTypeID = ' . $in_details['employmentTypeID']));
            if ($row_exists == 1) {
                $user['employmentTypeID'] = $in_details['employmentTypeID'];
            }
        }

        //--- User Type ---

        if (!empty($in_details["userTypeID"])) {
            $user["userTypeID"] = $in_details["userTypeID"];
        }

        //--- Password ---

        if (!empty($in_details['password'])) {
            $user['password'] = $in_details['password'];
            unset($required_fields['password']);
        }

        //--- Password Hint ---

        if (!empty($in_details['passwordHint'])) {
            $user['passwordHint'] = $in_details['passwordHint'];
        }

        //--- Password Change Flag ---

        if(!empty($in_details["changePasswordFlag"])){
            $user["changePasswordFlag"] = $in_details["changePasswordFlag"];
        }

        //--- Change Password Next Login ---

        if(!empty($in_details["ChangePwdNextLogin"])){
            $user["ChangePwdNextLogin"] = $in_details["ChangePwdNextLogin"];
        }

        //--- Email ---

        if (!empty($in_details['email']) and preg_match('/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/i', $in_details['email'])) {
            $user['email'] = $in_details['email'];
        }

        //--- Date Of Birth ---

        if (array_key_exists("DOB", $in_details)) {
            $user['DOB'] = $in_details['DOB'];
        }

        //--- Company Start Date / Role Change Date ---

        if (array_key_exists("joiningDate", $in_details)) {
            $user['joiningDate'] = $in_details['joiningDate'];
        }

        if($this->column_exists("tblUser", "companyStartDate") && array_key_exists("companyStartDate", $in_details)){
            $user["companyStartDate"] = $in_details["companyStartDate"];
        }

        //--- Company Leave Date ---

        if (array_key_exists("leavingDate", $in_details)) {
            $user['leavingDate'] = $in_details['leavingDate'];
        }

        //--- Account Active ---

        if (array_key_exists('accountActive', $in_details) && !is_null($in_details['accountActive'])) {
            $user['accountActive'] = $in_details['accountActive'];
        }

        //--- TMP Exclude ---

        if (array_key_exists('tmpExclude', $in_details) && !is_null($in_details['tmpExclude'])) {
            $user['tmpExclude'] = $in_details['tmpExclude'];
        }

        //--- Administrator ---

        if (array_key_exists("administrator", $in_details)) {
            $user['administrator'] = $in_details['administrator'];
        }

        //--- nominatedUser1 ---
        if (array_key_exists("nominatedUser1", $in_details) && !is_null($in_details["nominatedUser1"])) {
            $user["nominatedUser1"] = $in_details["nominatedUser1"];
        }

        //--- nominatedUser2 ---
        if (array_key_exists("nominatedUser2", $in_details) && !is_null($in_details["nominatedUser2"])) {
            $user["nominatedUser2"] = $in_details["nominatedUser2"];
        }

        //--- nominatedUser3 ---
        if (array_key_exists("nominatedUser3", $in_details) && !is_null($in_details["nominatedUser3"])) {
            $user["nominatedUser3"] = $in_details["nominatedUser3"];
        }

        //--- keepActive ---
        if (array_key_exists("keepActive", $in_details) && !is_null($in_details["keepActive"]) && $this->column_exists("tbluser", "keepActive")) {
            $user["keepActive"] = $in_details["keepActive"];
        }

        if (count($required_fields)) {

            return $required_fields;
        }
        else {

            $fields_sql = '';
            $values_sql = '';

            foreach ($user as $field_name => $field_value) {
                $fields_sql .= '[' . $field_name . '], ';
                if (is_numeric($field_value) && $field_name !== "userName" && $field_name !== "alt_userName" && $field_name !== "password") {
                    $values_sql .= $field_value . ', ';
                }
                else if (is_null($field_value)) {
                    $values_sql .= "NULL, ";
                }
                else {
                    $values_sql .= "N'" . $this->udb_escape_string($field_value) . "', ";
                }
            }

            $this->udb_query('INSERT INTO tblUser (' . substr($fields_sql, 0, -2) . ') VALUES (' . substr($values_sql, 0, -2) . ')');

            $id = $this->udb_last_insert_id();

            $this->update_user_parents();

            return $id;
        }
    }

    public function user_forgotten_password_reminder($username){
        $username = $this->udb_escape_string($username);

        $sql = "SELECT TOP 1 username, firstName, lastName, password, email FROM tblUser WHERE username='".$username."' AND email <> '' AND email IS NOT NULL";

        return $this->udb_fetch_assoc($this->udb_query($sql));
    }

    public function user_forgotten_username_reminder($email){
        $email = $this->udb_escape_string($email);

        $sql = "SELECT TOP 1 username, firstName, lastName, password, email FROM tblUser WHERE email='".$email."'";

        return $this->udb_fetch_assoc($this->udb_query($sql));
    }

    /**
     * User Edit
     * This function updates the specified user id
     * @param int $user_id
     * @param array $in_details
     * @param string|null $edited_by Specifies the user id who made the edits, or null if edited by the importer
     * @param bool $update_orgs Specifies if orgs should be updated along with the user
     * @return string|true
     */
    public function user_edit($user_id, $in_details, $edited_by = null, $update_orgs = true) {

        //--- Username ---

        $user_id = $this->udb_escape_string($user_id);

        list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblUser WHERE userID = ' . $user_id ));

        if ($tmp_exists !== 1) {
            return 'The user id does not exist.';
        }

        if (!empty($in_details['userName'])) {

            $user['userName'] = $in_details['userName'];

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblUser WHERE userName = "' . $this->udb_escape_string($user["userName"]) . '" AND userID <> "' . $user_id . '"'));

            if ($tmp_exists == 1) {
                return 'The username already exists.';
            }
        }

        //--- First and Last Name ---

        if (!empty($in_details['firstName'])) {
            $user['firstName'] = $in_details['firstName'];
        }

        if (!empty($in_details['lastName'])) {
            $user['lastName'] = $in_details['lastName'];
        }

        //--- Username ---
        if(!empty($in_details["alt_userName"])){
            $user["alt_userName"] = $in_details["alt_userName"];
        }

        //--- Country ---

        if (!empty($in_details['countryID']) and is_numeric($in_details['countryID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query("SELECT 1 FROM tblCountry WHERE countryID = ".$in_details['countryID']));

            if($tmp_exists == 1){
                $user["countryID"] = $in_details['countryID'];
            }
        }

        if (empty($user['countryID'])) {

            list($tmp_id) = $this->udb_fetch_row($this->udb_query('SELECT countryID FROM tblCountry WHERE [default] = 1'));
            if ($tmp_id and is_numeric($tmp_id)) {
                $user['countryID'] = $tmp_id;
            }
        }

        //--- Language ---

        if (!empty($in_details['languageID']) and is_numeric($in_details['languageID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query("SELECT 1 FROM tblLanguage WHERE languageID = ".$in_details['languageID']));

            if($tmp_exists == 1){
                $user["languageID"] = $in_details['languageID'];
            }
        }

        if (empty($user['languageID'])) {

            list($tmp_id) = $this->udb_fetch_row($this->udb_query('SELECT languageID FROM tblLanguage WHERE [default] = 1'));
            if ($tmp_id and is_numeric($tmp_id)) {
                $user['languageID'] = $tmp_id;
            }
        }

        //--- Employment Type ---

        if (!empty($in_details['employmentTypeID']) and is_numeric($in_details['employmentTypeID'])) {
            list($row_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 AS rowExists FROM tblEmploymentType WHERE employmentTypeID = ' . $in_details['employmentTypeID']));
            if ($row_exists == 1) {
                $user['employmentTypeID'] = $in_details['employmentTypeID'];
            }
        }

        //--- Orgs ---

        if (!empty($in_details['org1ID']) and is_numeric($in_details['org1ID'])) {

            list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT 1 FROM tblOrg1 WHERE Org1ID = ' . $in_details['org1ID']));

            if ($tmp_exists == 1) {
                $user['org1ID'] = $in_details['org1ID'];
            }
        }
        else {

            // $user["org1ID"] = $this->user_defaults("org1Default");

            list($org1) = $this->udb_fetch_row($this->udb_query('SELECT org1ID FROM tblUser WHERE userID = ' . $user_id));

            if ($org1 !== false) {
                $user["org1ID"] = $org1;
            }
        }

        //--- Job Type ---

        if (!empty($in_details['jobTypeID']) and is_numeric($in_details['jobTypeID'])) {

            list($tmp_exists, $user_profile_id) = $this->udb_fetch_row($this->udb_query('SELECT 1, userProfileID FROM tblJobType WHERE jobTypeID = ' . $in_details['jobTypeID']));

            if ($tmp_exists == 1) {

                $user['jobTypeID'] = $in_details['jobTypeID'];

                if ($user_profile_id and is_numeric($user_profile_id)) {

                    $user['userProfileID'] = $user_profile_id;
                }
            }
        }

        //--- User Profile ---

        if (!empty($in_details['userProfileID'])) {
            $user['userProfileID'] = $in_details['userProfileID'];
        }

        // --- Flexible Profile ---

        if (isset($in_details['flexProfile']) && $this->column_exists("tblUser", 'flexProfile')) {
            $user['flexProfile'] = (int)$in_details['flexProfile'];
        }

        //--- User Type ---

        if (!empty($in_details["userTypeID"])) {
            $user["userTypeID"] = $in_details["userTypeID"];
        }

        //--- Password ---

        if (!empty($in_details['password'])) {

            $user['password'] = $in_details['password'];
        }

        //--- Password Hint ---

        if (array_key_exists("passwordHint", $in_details)) {
            $user['passwordHint'] = $in_details['passwordHint'];
        }

        //--- Password Change Flag ---
        if (array_key_exists("changePasswordFlag", $in_details)){
            $user["changePasswordFlag"] = $in_details["changePasswordFlag"];
        }

        //--- Email ---
        if (array_key_exists('email', $in_details)) {
            $in_details['email'] = trim($in_details['email']);

            if (preg_match('/^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$/i', $in_details['email'])) {
                $user['email'] = $in_details['email'];
            } elseif ($in_details['email'] === '') {
                $user['email'] = null;
            }
        }

        //--- Date Of Birth ---

        if (array_key_exists('DOB', $in_details)) {
            $user['DOB'] = $in_details['DOB'];
        }

        //--- Company Start Date & Role Change Date ---

        if (array_key_exists('joiningDate', $in_details)) {
            $user['joiningDate'] = $in_details['joiningDate'];
        }

        if($this->column_exists("tblUser", "companyStartDate") && array_key_exists('companyStartDate', $in_details)) {
            $user['companyStartDate'] = $in_details['companyStartDate'];
        }

        //--- Company Leave Date ---

        if (array_key_exists('leavingDate', $in_details)) {
            $user['leavingDate'] = $in_details['leavingDate'];
        }

        //--- Account Active ---

        if (array_key_exists("accountActive", $in_details)) {
            $user['accountActive'] = $in_details['accountActive'];
        }

        //--- TMP Exclude ---

        if (array_key_exists("tmpExclude", $in_details)) {
            $user['tmpExclude'] = $in_details['tmpExclude'];
        }

        //--- user Exclude Attribute ID ---

        if (array_key_exists("UserExcludeAttributeID", $in_details)) {
            $user['UserExcludeAttributeID'] = $in_details['UserExcludeAttributeID'];
        }

        //--- tmp Exclude From Date ---

        if (array_key_exists("tmpExcludeFromDate", $in_details)) {
            $user['tmpExcludeFromDate'] = $in_details['tmpExcludeFromDate'];
        }

        //--- tmp Exclude To Date ---

        if (array_key_exists("tmpExcludeToDate", $in_details)) {
            $user['tmpExcludeToDate'] = $in_details['tmpExcludeToDate'];
        }
        //--- Administrator ---

        if (array_key_exists("administrator", $in_details)) {
            $user['administrator'] = $in_details['administrator'];
        }

        //--- nominatedUser1 ---
        if (array_key_exists("nominatedUser1", $in_details) && !is_null($in_details["nominatedUser1"])) {
            $user["nominatedUser1"] = $in_details["nominatedUser1"];
        }

        //--- nominatedUser2 ---
        if (array_key_exists("nominatedUser2", $in_details) && !is_null($in_details["nominatedUser2"])) {
            $user["nominatedUser2"] = $in_details["nominatedUser2"];
        }

        //--- nominatedUser3 ---
        if (array_key_exists("nominatedUser3", $in_details) && !is_null($in_details["nominatedUser3"])) {
            $user["nominatedUser3"] = $in_details["nominatedUser3"];
        }

        //--- keepActive ---
        if (array_key_exists("keepActive", $in_details) && !is_null($in_details["keepActive"]) && $this->column_exists("tbluser", "keepActive")) {
            $user["keepActive"] = $in_details["keepActive"];
        }

        $set_sql = '';

        foreach ($user as $field_name => $field_value) {
            $set_sql .= '[' . $field_name . '] = ';

            //workaround for "numeric" usernames & passwords
            if (is_numeric($field_value) && $field_name !== "userName" && $field_name !== "alt_userName" && $field_name !== "password") {
                $set_sql .= $field_value . ', ';
            }
            else if (is_null($field_value)) {
                $set_sql .= "NULL, ";
            }
            else {
                $set_sql .= "N'" . $this->udb_escape_string($field_value) . "', ";
            }
        }


        if($this->column_exists("tblUser", "lastModifiedBy")){
            $set_sql .= '[lastModifiedBy] = ';

            if ($edited_by === null || !is_numeric($edited_by)) {
                $set_sql .= "NULL, ";
            }
            else {
                $set_sql .= $edited_by . ", ";
            }

            $set_sql .= '[lastModifiedDate] = \'' . strftime("%Y-%m-%d %H:%I:%S") . '\', ';
        }

        $this->udb_query('UPDATE tblUser SET ' . substr($set_sql, 0, -2) . ' WHERE userID = ' . $user_id);

        if($update_orgs){
            $this->update_user_parents();
        }

        return true;
    }

    /**
     * Updates users scheduled for re-inclusion within the given date range.
     * @param \DateTime $date The date after which users should be re-included.
     * @return boolean
     */
    public function user_scheduled_inclusions(DateTime $date)
    {
        //If we don't have the required column, return false to indicate failure.
        if ($this->column_exists('tblUser', 'tmpExcludeToDate') === false) {
            return false;
        }

        $updateParts = array(
            'lastModifiedDate=GETDATE()',
            'lastModifiedBy=null',
            'tmpExclude=null',
            'tmpExcludeFromDate=null',
            'tmpExcludeToDate=null'
        );

        $sql = sprintf(
            'UPDATE tblUser SET %s WHERE tmpExclude=1 AND tmpExcludeToDate < \'%s\'',
            implode(", ", $updateParts),
            $date->format('Y-m-d H:i:s')
        );

        return (bool)$this->udb_query($sql);
    }

    /**
     * Updates users scheduled for exclusion within the given date range.
     * @param \DateTime $date The beginning of the date range to exclude users for.
     * @param \DateTime $date The date from which users should be excluded.
     * @return boolean
     */
    public function user_scheduled_exclusions(DateTime $date)
    {
        //If we don't have the required column, return false to indicate failure.
        if ($this->column_exists('tblUser', 'tmpExcludeFromDate') === false) {
            return false;
        }

        $sql = sprintf(
            'UPDATE tblUser SET lastModifiedDate=GETDATE(), lastModifiedBy=null, tmpExclude=1 WHERE tmpExclude <> 1 AND tmpExcludeFromDate >= \'%s\'',
            $date->format('Y-m-d H:i:s')
        );

        return (bool)$this->udb_query($sql);
    }

    /**
     * Checks if the username already exists in the database
     * @param string $username
     * @param int $id
     * @return int 0 denotes no user found, 1 denotes inactive user found, 2 denotes active user found
     */
    public function username_exists($username, $id = null) {

        $username = $this->udb_escape_string($username);
        $where = "";

        if ($id !== null && is_numeric($id)) {
            $where = 'userName = "' . $username . '" AND userID <> ' . $id;
        }
        else {
            $where = 'userName = "' . $username . '"';
        }

        list($tmp_exists) = $this->udb_fetch_row($this->udb_query('SELECT CASE WHEN accountActive = 1 THEN 2 ELSE 1 END FROM tblUser WHERE ' . $where));

        if ($tmp_exists !== 1 && $tmp_exists !== 2) {
            $tmp_exists = 0;
        }

        return $tmp_exists;

    }

    /**
     * Set user report access levels (access levels deleted if a null $access_ids is passed)
     * @param int $user_id
     * @param int $access_level
     * @param array $access_ids
     * @return boolean
     */
    public function user_set_report_access($user_id, $access_level, $access_ids) {

        //If access level is null, or access ids is not an array with at least 1 item, then delete existing reporting level
        if ($access_level === null || !is_array($access_ids) || count($access_ids) === 0) {
            $qry = "DELETE FROM tblReportAccess WHERE userID = " . $user_id;

            $result = $this->udb_query($qry);
        }
        //If the access level is a valid org, set report access
        else if ($this->org_level_valid($access_level)) {

            $permissions_string = $access_level . ":" . implode($access_ids, ",");

            $qry = "SELECT COUNT(tblReportAccess.userID) FROM tblUser LEFT JOIN tblReportAccess ON tblUser.userID = tblReportAccess.userID WHERE tblUser.userID = " . $user_id;

            $count = $this->udb_fetch_row($this->udb_query($qry));

            //If the user already has report access, update their settings
            if ($count[0] != null && $count[0] > 0) {

                $qry = "UPDATE tblReportAccess SET orgAccessPermissions = '" . $permissions_string . "' WHERE userID = " . $user_id;

                $result = $this->udb_query($qry);
            }
            //Otherwise, insert their settings
            else {

                $qry = "INSERT INTO tblReportAccess (userID, orgAccessPermissions) VALUES (" . $user_id . ", '" . $permissions_string . "')";

                $result = $this->udb_query($qry);
            }
        }
        else {
            return false;
        }

        return $result;
    }

    /**
     * Retrieve user information
     * @param int $user_id
     * @return array
     */
    public function user_info($user_id=false) {

        if($user_id === false && $this->logged_in_user !== false){
            $user_id = $this->logged_in_user["UserID"];
        }

        if (!is_numeric($user_id)) {
            return false;
        }

        $select_parts = array(
            "tblUser.userName",
            "tblUser.firstName",
            "tblUser.lastName",
            "tblReportAccess.orgAccessPermissions",
            "tblUser.org1ID",
            "tblUser.org2ID",
            "tblUser.org3ID",
            "tblUser.org4ID",
            "tblUser.userTypeID",
            "tblUser.administrator",
            "tblUser.userProfileID",
            "tblUser.password",
            "tblUser.passwordHint",
            "tblUser.changePasswordFlag",
            "tblUser.email",
            "tblUser.tmpExclude",
            "tblUser.jobTypeID",
            "tblUser.countryID",
            "tblUser.languageID",
            "tblUser.DOB",
            "tblUser.accountActive",
            "tblUser.EmploymentTypeID",
            "tblUser.joiningDate",
            "tblUser.leavingDate",
            "tblUser.tmpExcludeFromDate",
            "tblUser.tmpExcludeToDate",
            "tblUser.UserExcludeAttributeID",
            "tblUser.lastModifiedDate",
            "tblUser.lastModifiedBy",
            "tblUser.systemUser"
        );

        if ($this->column_exists("tblUser", "companyStartDate")) {
            $select_parts[] = "tblUser.companyStartDate" ;
        } else {
            $select_parts[] = "tblUser.joiningDate as companyStartDate";
        }

        if ($this->column_exists("tblUser", "flexProfile")) {
            $select_parts[] = "tblUser.flexProfile" ;
        } else {
            $select_parts[] = "0 as flexProfile";
        }

        if ($this->column_exists("tblUser", "keepActive")) {
            $select_parts[] = "tblUser.keepActive";
        } else {
            $select_parts[] = "NULL as keepActive";
        }

        $join_parts = array(
                "LEFT JOIN tblReportAccess ON tblUser.userID = tblReportAccess.userID"
            );

        $where_parts = array("tblUser.userID = " . $user_id);

        $sql = sprintf(
            'SELECT %s FROM tblUser %s WHERE %s',
            implode(",", $select_parts),
            implode(" ", $join_parts),
            implode(" ", $where_parts)
        );

        $qry    = $this->udb_query($sql);
        $data   = $this->udb_fetch_assoc($qry);
        $result = array();

        if($data !== false){
            if ($data["orgAccessPermissions"] !== null) {
                $report_access = true;

                $report_access_array = explode(":", $data["orgAccessPermissions"]);

                $report_org_level = $report_access_array[0];

                $report_org_ids = explode(",", $report_access_array[1]);
            }
            else {
                $report_access = false;
                $report_org_level = false;
                $report_org_ids = false;
            }

            $result["userName"] = $data["userName"];
            $result["firstName"] = $data["firstName"];
            $result["lastName"] = $data["lastName"];
            $result["administrator"] = $data["administrator"];
            $result["password"] = $data["password"];
            $result["passwordHint"] = $data["passwordHint"];
            $result["changePasswordFlag"] = $data["changePasswordFlag"];
            $result["userTypeID"] = $data["userTypeID"];
            $result["userProfileID"] = $data["userProfileID"];
            $result["jobTypeID"] = $data["jobTypeID"];
            $result["countryID"] = $data["countryID"];
            $result["employmentTypeID"] = $data["EmploymentTypeID"];
            $result["languageID"] = $data["languageID"];
            $result["email"] = $data["email"];
            $result["DOB"] = $data["DOB"];
            $result["joiningDate"] = $data["joiningDate"];
            $result["companyStartDate"] = $data["companyStartDate"];
            $result["leavingDate"] = $data["leavingDate"];
            $result["accountActive"] = $data["accountActive"];
            $result["tmpExclude"] = $data["tmpExclude"];
            $result["flexProfile"] = $data["flexProfile"];
            $result["keepActive"] = $data["keepActive"];
            $result["lastModifiedDate"] = $data["lastModifiedDate"];
            $result["lastModifiedBy"] = $data["lastModifiedBy"];
            $result["orgs"] = array(1 => $data["org1ID"], 2 => $data["org2ID"], 3 => $data["org3ID"], 4 => $data["org4ID"]);
            $result["report_access"] = $report_access;
            $result["report_org_level"] = $report_org_level;
            $result["report_org_ids"] = $report_org_ids;
            $result["tmpExcludeFromDate"] = $data["tmpExcludeFromDate"];
            $result["tmpExcludeToDate"] = $data["tmpExcludeToDate"];
            $result["UserExcludeAttributeID"] = $data["UserExcludeAttributeID"];
            $result["systemUser"] = $data["systemUser"];
        }


        return $result;
    }

    /**
     * User List
     * Retrieve list of all users
     * Valid Filters:
     * "search" => "needle" (string to be searched for in userName, firstName, lastName and org1LongName fields)
     * For other valid filters...
     * @see $this->generate_extended_filters_sql()
     * @param array $fields Array of fieldnames to retrieve.  Because of the joins required on this table, is advised to use fully qualified field names, e.g. tblUser.userID, to avoid ambiguity
     * @param array $filter Array of filters to apply to the query.
     * @param array $order Array of arrays denoting the columns and sort order, e.g. array(array("tblUser.userID", "DESC"), array("tblUser.joiningDate", "ASC"))
     * @param int $limit Maximum number of rows to retrieve when paginating
     * @param int $offset Starting row to offset from when paginating
     * @param boolean $count_only Returns just a user count based on the given filters
     * @return array|int|boolean Returns either an array of users, or a count of users, or false on failure
     */
    public function user_list($fields = array(), $filter = null, $order = null, $limit = 10, $offset = 0, $count_only=false) {

        if($count_only === false && (!is_array($fields) || empty($fields)) ){
            return false;
        }

        $where_sql = array();

        if ($filter !== null && is_array($filter)) {

            //Generate user filters
            if($user_filters = $this->generate_extended_user_filters_sql($filter, false)){
                $where_sql[] = $user_filters;
            }

            if(array_key_exists("search", $filter) && !empty($filter["search"])){
                $tmp_sql = array();

                if(is_string($filter["search"])){
                    $tmp_sql[] = "tblUser.userName LIKE N'%".$this->udb_escape_string($filter["search"])."%'";
                    $tmp_sql[] = "tblUser.firstName LIKE N'%".$this->udb_escape_string($filter["search"])."%'";
                    $tmp_sql[] = "tblUser.lastName LIKE N'%".$this->udb_escape_string($filter["search"])."%'";
                    $tmp_sql[] = "tblOrg1.org1Longname LIKE N'%".$this->udb_escape_string($filter["search"])."%'";
                    $where_sql[] = "(".implode(" OR ", $tmp_sql).")";
                }
                else if(is_array($filter["search"])){
                    foreach($filter["search"] as $field => $search){
                        $tmp_sql[] = $field." LIKE N'%".$this->udb_escape_string($search)."%'";
                    }

                    $where_sql[] = "(".implode(" OR ", $tmp_sql).")";
                }
            }

            //Meta filter for processing user exclude attribute filtering.
            if(array_key_exists("user_exclude_attribute", $filter)){
                if(!is_array($filter["user_exclude_attribute"])){
                    $filter["user_exclude_attribute"] = array($filter["user_exclude_attribute"]);
                }

                $filter["user_exclude_attribute"] = array_filter($filter["user_exclude_attribute"], "is_numeric");

                $find_without_reason = array_search(0, $filter["user_exclude_attribute"]);

                if(!empty($filter["user_exclude_attribute"])){

                    $user_exclude_attribute_sql = array();

                    if ($find_without_reason !== false) {
                        unset($filter["user_exclude_attribute"][$find_without_reason]);

                        $user_exclude_attribute_sql[] = '(tblUser.userExcludeAttributeID IS NULL AND tblUser.tmpExclude = 1)';
                    }

                    if(!empty($filter["user_exclude_attribute"])){
                        $user_exclude_attribute_sql[] = "tblUser.userExcludeAttributeID IN (".implode(", ", $filter["user_exclude_attribute"]).")";
                    }

                    $where_sql[] = sprintf(
                        '(%s)',
                        implode(' OR ', $user_exclude_attribute_sql)
                    );
                }
            }
        }

        if($count_only === false){

            if (is_numeric($offset)) {
                $offset = intval($offset);
            }
            else {
                $offset = 0;
            }

            if (is_numeric($limit)) {
                $limit = $offset + intval($limit);
            }
            else {
                $limit = 10;
            }

            $sort = "";

            if (is_array($order) && !empty($order)) {

                for ($i = 0; $i < count($order); $i++) {

                    if ($i == 0) {
                        $sort .= $order[$i][0] . " " . $order[$i][1];
                    }
                    else {
                        $sort .= ", " . $order[$i][0] . " " . $order[$i][1];
                    }
                }
            }
            else {
                $sort = "tblUser.userID";
            }

            //Joining on tblOrg1, tblUserType and tblReportAccess to allow sorting and searching via tools like UME and EAU
            $sql = "SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY " . $sort . ") as row_number, " .implode(", ", $fields).
                " FROM ((tblUser LEFT JOIN tblOrg1 ON tblUser.org1ID = tblOrg1.org1ID) ".
                "LEFT JOIN tblUserType ON tblUser.userTypeID = tblUserType.userTypeID) " .
                "LEFT JOIN tblJobType ON tblUser.jobTypeID = tblJobType.jobTypeID " .
                "LEFT JOIN tblReportaccess ON tblUser.userID = tblReportAccess.userID ". ( count($where_sql) > 0 ? " WHERE " . implode(" AND ", $where_sql) : "" ) . ")" .
                "as paginated WHERE paginated.row_number > " . $offset . " AND paginated.row_number <= " . $limit;

            return $this->udb_fetch_all($sql);

        }
        else{
            //Joining on tblOrg1, tblUserType and tblReportAccess to allow sorting and searching via tools like UME and EAU
            $sql = "SELECT count(tblUser.UserID) FROM tblUser LEFT JOIN tblOrg1 ON tblUser.org1ID = tblOrg1.org1ID ". ( count($where_sql) > 0 ? " WHERE " . implode(" AND ", $where_sql) : "" );

            list($count) = $this->udb_fetch_row($this->udb_query($sql));

            return is_numeric($count) ? $count : false;
        }

    }

    /**
     * Shorthand helper function to return a count of users based on provided filter
     * @param array $filter
     * @return int|boolean Number of users on success, false on failure
     */
    public function user_count($filter = null) {
        return $this->user_list(null, $filter, null, null, null, true);
    }

    /**
     * Return the SQL required to run the user course status list quer
     * Filters must be provided as an array of key => value pairs; available filters and examples below:
     * "active" => 1 (0 = inactive users only, 1 = active users only, 2 = all users)
     * "search" => "needle" (string to be searched for in userName, firstName, lastName and org1LongName fields)
     * "temp_exclude" => 1 (0 = show none excluded users, 1 = show only temp_exclude users)
     * "user_type" => 123 OR array(1, 5, 9) (user type id)
     * "org_level" => 1 (Org level to filter by - also requires org ID filter)
     * "org_id" => 230 (Org id to filter by - also requires org level filter)
     * "user_profile" => 1 or array(1,2,3) (userProfileID)
     * "user" => 1 or array(1,2,3) (userID)
     * "user_name" => 'admin' or array('admin', 'ivan') (username)
     * "last_modified_date" => array('from' => 'Y-m-d H:i:s', 'to' => 'Y-m-d H:i:s' )
     * "course" => 1 or array(1,2,3) (courseID)
     * "course_status" => 'c' or ('c', 'r') (courseStatus - available options are)
     * "course_type" => array(1,2,34) (courseTypeID)
     * "restrictions" => true -- whether to apply reporting restrictions or not
     * "user_exclude_attribute" => array(1,2,34) (userExcludeAttributeID)
     * @param  array   $filters      Filters to apply to the query.  See available options above.
     * @param  array   $order        Columns to sort by and direction, e.g. array(array("tblUser.userID", "asc"))
     * @param  integer $limit
     * @param  integer $offset
     * @param  boolean $count_only   Return only a count of matched users for the given criteria
     * @return string
     */
    protected function generate_user_course_status_list_sql(array $filters = array(), array $order = array(), $limit=10, $offset=0, $count_only = false)
    {
        $select_sql = array(
            "tblUser.userID",
            "tblUser.firstName",
            "tblUser.lastName",
            "tblUser.userName",
            "tblOrg1.org1LongName",
            "COALESCE(courseStatus, 'a') as courseStatus",
            "vw_usercourselist_full.courseID"
            );

        $from_sql = array(
            "vw_usercourselist_full",
            "JOIN tblUser ON tblUser.userID = vw_usercourselist_full.userID",
            "JOIN tblOrg1 ON tblUser.org1ID = tblOrg1.org1ID",
            "LEFT JOIN tblCourse ON vw_usercourselist_full.courseID = tblCourse.courseID",
            "LEFT JOIN tblUserCourses ON vw_usercourselist_full.userID = tblUserCourses.userID AND vw_usercourselist_full.courseID = tblUserCourses.courseID",
            );

        $sort_sql = array();

        if(is_array($order) && !empty($order)){
            foreach($order as $order_group){
                $sort_sql[] = $order_group[0]." ".$order_group[1];
            }
        } else {
            $sort_sql[] = "userID";
        }

        if (is_numeric($offset)) {
            $offset = intval($offset);
        } else {
            $offset = 0;
        }

        if (is_numeric($limit)) {
            $limit = $offset + intval($limit);
        } else {
            $limit = 10;
        }

        $where_sql = array();

        $restrictions = true;

        if (array_key_exists("restrictions", $filters)) {
            $restrictions = (bool)$filters['restrictions'];
        }

        //Generate user filters
        if($user_filters = $this->generate_extended_user_filters_sql($filters, $restrictions)){
            $where_sql[] = $user_filters;
        }

        if(array_key_exists("search", $filters) && !empty($filters["search"])){
            $tmp_sql = array();

            if(is_string($filters["search"])){
                $tmp_sql[] = "tblUser.userName LIKE N'%".$this->udb_escape_string($filters["search"])."%'";
                $tmp_sql[] = "tblUser.firstName LIKE N'%".$this->udb_escape_string($filters["search"])."%'";
                $tmp_sql[] = "tblUser.lastName LIKE N'%".$this->udb_escape_string($filters["search"])."%'";
                $tmp_sql[] = "tblOrg1.org1Longname LIKE N'%".$this->udb_escape_string($filters["search"])."%'";
                $where_sql[] = "(".implode(" OR ", $tmp_sql).")";
            }
            else if(is_array($filters["search"])){
                foreach($filters["search"] as $field => $search){
                    $tmp_sql[] = $field." LIKE N'%".$this->udb_escape_string($search)."%'";
                }

                $where_sql[] = "(".implode(" OR ", $tmp_sql).")";
            }
        }

        if(array_key_exists("course", $filters)){
            if(!is_array($filters["course"])){
                $filters["course"] = array($filters["course"]);
            }

            $filters["course"] = array_filter($filters["course"], "is_numeric");

            if(!empty($filters["course"])){
                $courses = $filters["course"];
                $where_sql[] = "vw_usercourselist_full.courseID IN (".implode(", ", $filters["course"]).")";
            }
        }

        if (array_key_exists("employment_type", $filters)) {

            $filters["employment_type"] = array_filter($filters["employment_type"], "is_numeric");

            if (is_array($filters["employment_type"]) && !empty($filters["employment_type"])) {
                $where_sql[] = "tblUser.EmploymentTypeID IN (" . implode(", ", $filters["employment_type"]).")";
            }
        }

        if(array_key_exists("course_type", $filters)){
            if($this->table_exists("tblCourseType") === true){
                if(!is_array($filters["course_type"])){
                    $filters["course_type"] = array($filters["course_type"]);
                }

                $filters["course_type"] = array_filter($filters["course_type"], "is_numeric");

                if (!empty($filters["course_type"])){
                    if (in_array(0, $filters["course_type"])) {
                        $no_assigned_type_index = array_search(0, $filters["course_type"]);

                        unset($filters["course_type"][$no_assigned_type_index]);

                        if (empty($filters["course_type"])){
                            $where_sql[] = "tblCourse.courseTypeID IS NULL";
                        } else {
                            $where_sql[] = "(tblCourse.courseTypeID IN (".implode(",", $filters["course_type"]).") OR tblCourse.courseTypeID IS NULL)";
                        }
                    } else {
                        $where_sql[] = "tblCourse.courseTypeID IN (".implode(",", $filters["course_type"]).")";
                    }
                }
            }
        }

        if(array_key_exists("course_status", $filters)){
            if(!is_array($filters["course_status"])){
                $filters["course_status"] = array($filters["course_status"]);
            }

            if(!empty($filters["course_status"])){
                $statuses = array();
                $valid_status = array("a", "r", "i", "c");
                $include_null = false;

                foreach($filters["course_status"] as $status){
                    if($status === 'a'){
                        $include_null = true;
                    }

                    if(in_array($status, $valid_status)){
                        $statuses[] = "'".$this->udb_escape_string($status)."'";
                    }
                }

                if(!empty($statuses)){
                    $where_sql[] = " (tblUserCourses.courseStatus IN (".implode(", ", $statuses).")".($include_null ? " OR tblUserCourses.courseStatus IS NULL)" : ")");
                }
            }
        }

        if(array_key_exists("force_pass_status", $filters)){
            if(is_array($filters["force_pass_status"])){
                $filters["force_pass_status"] = array_shift($filters["force_pass_status"]);
            }

            $filters["force_pass_status"] = intval($filters["force_pass_status"]);

            //Don't include force passed values
            if($filters["force_pass_status"] === 1){
                $where_sql[] = " (tblUserCourses.courseForced = 0 OR tblUserCourses.courseForced IS NULL)";
            }
            //Only force passed values
            else if($filters["force_pass_status"] === 2){
                $where_sql[] = " tblUserCourses.courseForced = 1";
            }
        }

         //Course started filter
        if(array_key_exists("course_started_date", $filters) && !empty($filters["course_started_date"])){
            $course_started_date = array();

            if(array_key_exists("from", $filters["course_started_date"])){
                if($this->is_datetime($filters["course_started_date"]["from"])){
                    $course_started_date[] = "tblUserCourses.startedDateTime >= '".$filters["course_started_date"]["from"]."'";
                }
            }

            if(array_key_exists("to", $filters["course_started_date"])){
                if($this->is_datetime($filters["course_started_date"]["to"])){
                    $course_started_date[] = "tblUserCourses.startedDateTime <= '".$filters["course_started_date"]["to"]."'";
                }
            }

            if(!empty($course_started_date)){
                $course_started_date = implode(" AND ", $course_started_date);
                $where_sql[] = "(".$course_started_date.")";
            }
        }

         //Last visited date filter
        if(array_key_exists("last_visited_date", $filters) && !empty($filters["last_visited_date"])){
            $last_visited_date = array();

            if(array_key_exists("from", $filters["last_visited_date"])){
                if($this->is_datetime($filters["last_visited_date"]["from"])){
                    $last_visited_date[] = "tblUserCourses.lastVisitDateTime >= '".$filters["last_visited_date"]["from"]."'";
                }
            }

            if(array_key_exists("to", $filters["last_visited_date"])){
                if($this->is_datetime($filters["last_visited_date"]["to"])){
                    $last_visited_date[] = "tblUserCourses.lastVisitDateTime <= '".$filters["last_visited_date"]["to"]."'";
                }
            }

            if(!empty($last_visited_date)){
                $last_visited_date = implode(" AND ", $last_visited_date);
                $where_sql[] = "(".$last_visited_date.")";
            }
        }

        //Quiz completed date filter
        if(array_key_exists("quiz_completed_date", $filters) && !empty($filters["quiz_completed_date"])){
            $quiz_completed_date = array();

            $from_sql[] = "LEFT JOIN tblUserModuleProgress ON vw_usercourselist_full.userID = tblUserModuleProgress.userID AND vw_usercourselist_full.courseID = tblUserModuleProgress.courseID";

            if(array_key_exists("from", $filters["quiz_completed_date"])){
                if($this->is_datetime($filters["quiz_completed_date"]["from"])){
                    $quiz_completed_date[] = "tblUserModuleProgress.quizPassedDate >= '".$filters["quiz_completed_date"]["from"]."'";
                }
            }

            if(array_key_exists("to", $filters["quiz_completed_date"])){
                if($this->is_datetime($filters["quiz_completed_date"]["to"])){
                    $quiz_completed_date[] = "tblUserModuleProgress.quizPassedDate <= '".$filters["quiz_completed_date"]["to"]."'";
                }
            }

            if(!empty($quiz_completed_date)){
                $quiz_completed_date = implode(" AND ", $quiz_completed_date);
                $where_sql[] = "(".$quiz_completed_date.")";
            }
        }

        //Default to excluding all temp excluded users, and override if required
        //via the user exclude filters.
        $report_exclude_sql = '(tblUser.tmpExclude IS NULL OR tbluser.tmpExclude = 0)';

        if(array_key_exists("user_exclude_attribute", $filters)){
            if(!is_array($filters["user_exclude_attribute"])){
                $filters["user_exclude_attribute"] = array($filters["user_exclude_attribute"]);
            }

            $filters["user_exclude_attribute"] = array_filter($filters["user_exclude_attribute"], "is_numeric");

            $find_without_reason = array_search(0, $filters["user_exclude_attribute"]);

            if (!empty($filters["user_exclude_attribute"])) {

                $user_exclude_attribute_sql = array();

                if ($find_without_reason !== false) {
                    unset($filters["user_exclude_attribute"][$find_without_reason]);

                    $user_exclude_attribute_sql[] = '(tblUser.userExcludeAttributeID IS NULL AND tblUser.tmpExclude = 1)';
                }

                if(!empty($filters["user_exclude_attribute"])){
                    $user_exclude_attribute_sql[] = "tblUser.userExcludeAttributeID IN (".implode(", ", $filters["user_exclude_attribute"]).")";
                }

                $report_exclude_sql = sprintf(
                    '(%s)',
                    implode(' OR ', $user_exclude_attribute_sql)
                );
            }
        }

        $where_sql[] = $report_exclude_sql;


        if ($count_only) {
            return "SELECT COUNT(DISTINCT tblUser.userID)  FROM ".implode(" ", $from_sql)." ".( !empty($where_sql) ? " WHERE " . implode(" AND ", $where_sql) : "" );
        }

        $data_sql = sprintf(
            'SELECT %s FROM %s %s',
            implode(", ", $select_sql),
            implode(" ", $from_sql),
            !empty($where_sql) ? " WHERE ".implode(" AND ", $where_sql) : ""
        );

        //If we haven't been given a set of courses to filter by, grab them from
        //the database.
        if (!isset($courses)) {
            $courses = array();

            $sql = 'SELECT DISTINCT courseID FROM vw_usercourselist_full ORDER BY courseID';

            $qry = $this->udb_query($sql);


            while ($row = $this->udb_fetch_row($qry)) {
                $courses[] = $row[0];
            }
        }

        $courses = array_unique($courses);

        $courses = array_map(
            function ($course) {
                return '['.$course.']';
            },
            $courses
        );

        $pivot_sql = sprintf(
            'MAX (courseStatus) FOR courseID IN (%s)',
            implode(', ', $courses)
        );

        return sprintf(
            'SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY %s) AS row_number, * FROM (%s) as data PIVOT (%s) AS pivotted ) AS paginated WHERE paginated.row_number > %d AND paginated.row_number <= %d',
            implode(", ", $sort_sql),
            $data_sql,
            $pivot_sql,
            $offset,
            $limit
        );
    }

    /**
     * Return array of users and currently available courses and their course status
     * Filters must be provided as an array of key => value pairs; available filters and examples below:
     * "active" => 1 (0 = inactive users only, 1 = active users only, 2 = all users)
     * "search" => "needle" (string to be searched for in userName, firstName, lastName and org1LongName fields)
     * "temp_exclude" => 1 (0 = show none excluded users, 1 = show only temp_exclude users)
     * "user_type" => 123 OR array(1, 5, 9) (user type id)
     * "org_level" => 1 (Org level to filter by - also requires org ID filter)
     * "org_id" => 230 (Org id to filter by - also requires org level filter)
     * "user_profile" => 1 or array(1,2,3) (userProfileID)
     * "user" => 1 or array(1,2,3) (userID)
     * "user_name" => 'admin' or array('admin', 'ivan') (username)
     * "last_modified_date" => array('from' => 'Y-m-d H:i:s', 'to' => 'Y-m-d H:i:s' )
     * "course" => 1 or array(1,2,3) (courseID)
     * "course_status" => 'c' or ('c', 'r') (courseStatus - available options are)
     * "course_type" => array(1,2,34) (courseTypeID)
     * "restrictions" => true -- whether to apply reporting restrictions or not
     * @param  array   $filters      Filters to apply to the query.  See available options above.
     * @param  array   $order        Columns to sort by and direction, e.g. array(array("tblUser.userID", "asc"))
     * @param  boolean $restrictions Whether to apply reporting restrictions or not
     * @param  integer $limit
     * @param  integer $offset
     * @return array | int
     */
    public function user_course_status_list(array $filters=array(), array $order=array(), $limit=10, $offset=0)
    {
        $result = array();

        $sql = $this->generate_user_course_status_list_sql($filters, $order, $limit, $offset);

        $qry = $this->udb_query($sql);

        while ($row = $this->udb_fetch_assoc($qry)) {
            unset($row['row_number']);
            $result[] = $row;
        }

        return $result;
    }

    /**
     * Return array of users and currently available courses and their course status
     * Filters must be provided as an array of key => value pairs; available filters and examples below:
     * "active" => 1 (0 = inactive users only, 1 = active users only, 2 = all users)
     * "search" => "needle" (string to be searched for in userName, firstName, lastName and org1LongName fields)
     * "temp_exclude" => 1 (0 = show none excluded users, 1 = show only temp_exclude users)
     * "user_type" => 123 OR array(1, 5, 9) (user type id)
     * "org_level" => 1 (Org level to filter by - also requires org ID filter)
     * "org_id" => 230 (Org id to filter by - also requires org level filter)
     * "user_profile" => 1 or array(1,2,3) (userProfileID)
     * "user" => 1 or array(1,2,3) (userID)
     * "user_name" => 'admin' or array('admin', 'ivan') (username)
     * "last_modified_date" => array('from' => 'Y-m-d H:i:s', 'to' => 'Y-m-d H:i:s' )
     * "course" => 1 or array(1,2,3) (courseID)
     * "course_status" => 'c' or ('c', 'r') (courseStatus - available options are)
     * "course_type" => array(1,2,34) (courseTypeID)
     * "restrictions" => true -- whether to apply reporting restrictions or not
     * @param  string  $path         Path to export the CSV file to.
     * @param  array   $headings     Headings to write to CSV file.
     * @param  array   $statusMap    Status mappings array in a key => value strucutre, e.g. 'r' => 'Refreshed'.
     * @param  array   $filters      Filters to apply to the query.  See available options above.
     * @param  array   $order        Columns to sort by and direction, e.g. array(array("tblUser.userID", "asc"))
     * @param  array   $courses      List of course IDs to limit column headings and output by.
     * @return bool
     */
    public function user_course_status_list_export($path, array $headings, array $statusMap, array $filters=array(), array $order=array(), array $courses=array())
    {
        $userCount = $this->user_course_status_list_count($filters);

        $limit = 10000;
        $offset = 0;

        $handle = fopen($path, "w+");

        $headingsProcessed = false;

        $sql = "SELECT DISTINCT courseID, AICCCourseTitle FROM tblCourse";

        $courses = array_filter($courses, "is_numeric");

        if (!empty($courses)) {
            $sql = sprintf(
                "SELECT DISTINCT courseID, AICCCourseTitle FROM tblCourse WHERE courseID IN (%s)",
                implode(", ", $courses)
            );
        }

        $qry = $this->udb_query($sql);

        $courses = array();

        while ($row = $this->udb_fetch_row($qry)) {
            $courses[$row[0]] = $row[1];
        }

        while ($offset < $userCount) {
            $sql = $this->generate_user_course_status_list_sql($filters, $order, $limit, $offset);
            $qry = $this->udb_query($sql);

            while ($row = $this->udb_fetch_assoc($qry)) {
                unset($row['row_number'], $row['userID']);

                if ($headingsProcessed === false) {
                    $headingsProcessed = true;
                    $courseHeadings = array_filter(
                        array_keys($row),
                        function ($key) use ($courses) {
                            return is_numeric($key) && array_key_exists($key, $courses);
                        }
                    );

                    $courseHeadings = array_map(
                        function ($course) use ($courses) {
                            return $courses[$course];
                        },
                        $courseHeadings
                    );

                    $headings = array_merge(
                        $headings,
                        $courseHeadings
                    );

                    fputcsv($handle, $headings);
                }

                foreach ($row as $field => $value) {
                    if (is_numeric($field) && !array_key_exists($field, $courses)) {
                        unset($row[$field]);
                    }
                }

                $row = array_map(
                    function ($field) use ($statusMap) {
                        if (isset($statusMap[$field])) {
                            return $statusMap[$field];
                        } elseif ($field === null) {
                            return $statusMap['n/a'];
                        }

                        return $field;
                    },
                    $row
                );

                fputcsv($handle, $row);
            }


            $offset += $limit;
        }

        fclose($handle);

        return true;
    }

    /**
     * Return array of users and currently available courses and their course status
     * Filters must be provided as an array of key => value pairs; available filters and examples below:
     * "active" => 1 (0 = inactive users only, 1 = active users only, 2 = all users)
     * "search" => "needle" (string to be searched for in userName, firstName, lastName and org1LongName fields)
     * "temp_exclude" => 1 (0 = show none excluded users, 1 = show only temp_exclude users)
     * "user_type" => 123 OR array(1, 5, 9) (user type id)
     * "org_level" => 1 (Org level to filter by - also requires org ID filter)
     * "org_id" => 230 (Org id to filter by - also requires org level filter)
     * "user_profile" => 1 or array(1,2,3) (userProfileID)
     * "user" => 1 or array(1,2,3) (userID)
     * "user_name" => 'admin' or array('admin', 'ivan') (username)
     * "last_modified_date" => array('from' => 'Y-m-d H:i:s', 'to' => 'Y-m-d H:i:s' )
     * "course" => 1 or array(1,2,3) (courseID)
     * "course_status" => 'c' or ('c', 'r') (courseStatus - available options are)
     * "course_type" => array(1,2,34) (courseTypeID)
     * "restrictions" => true -- whether to apply reporting restrictions or not
     * @param  array   $filters      Filters to apply to the query.  See available options above.
     * @return int
     */
    public function user_course_status_list_count(array $filters=array())
    {
        $result = 0;

        $sql = $this->generate_user_course_status_list_sql(
            $filters,
            array(), //order
            0, //Limit
            0, //Offset
            true //Count only SQL
        );

        $qry = $this->udb_query($sql);

        list($result) = $this->udb_fetch_row($qry);

        return (int)$result;
    }

    /**
     * Returns a list of course objectives for the given course(s).
     * @param array $courses An array of courses to retrieve objectives for.
     * @param boolean $certificate_active Only include active certificate objectives.
     * @return array
     */
    public function course_objectives($courses, $certificate_active=true){
        if(!is_array($courses)){
            $courses = array($courses);
        }

        $courses = array_filter($courses, 'is_numeric');

        if(empty($courses)){
            $this->log_error("Invalid course array for course objectives");
            return array();
        }

        if(!$this->table_exists('tblCourseObjectives')){
            return array();
        }

        $select_parts = array(
            'courseObjectiveID',
            'courseID',
            'courseObjectiveName',
            'certificatePermissionActive',
            'permissionActive'
        );

        $where_parts = array(
            'courseID IN('.implode(',', $courses).')'
        );

        if($certificate_active === true){
            $where_parts[] = 'certificatePermissionActive = 1';
        }
        else if($certificate_active === false){
            $where_parts[] = '(certificatePermissionActive = 0 OR certificatePermissionActive IS NULL)';
        }

        $sql = 'SELECT '.implode(',', $select_parts)." FROM tblCourseObjectives WHERE "
            .implode(" AND ", $where_parts)." ORDER BY courseObjectivePosition ASC";

        $qry = $this->udb_query($sql);

        $results = array();

        while($row = $this->udb_fetch_assoc($qry)){
            $results[$row["courseObjectiveID"]] = $row;
        }

        return $results;
    }

    /**
     * Returns the certificate information for the given users and courses
     * @param  Array $users   Array of user IDs
     * @param  Array $courses Array of course IDs
     * @return Array|Boolean  Returns false on error, otherwise an array of results
     */
    public function user_course_certificates(array $users, array $courses){

        $users = array_filter($users, "is_numeric");
        $courses = array_filter($courses, "is_numeric");

        if (empty($users) || empty($courses)) {
            return false;
        }

        $result = array();

        $has_certificate_template = $this->column_exists('tblCourse', 'certificateTemplate');
        $has_certificate_hours = $this->column_exists('tblCourse', 'certificateHours');

        $select_parts = array(
            'tblUser.userID',
            'tblUser.firstName',
            'tblUser.lastName',
            'tblCourse.courseID',
            'tblCourse.AICCCourseTitle',
            'MAX(COALESCE(tblUserCourses.courseLastCompletedDate,tblUserCourses.lastVisitDateTime)) as courseLastCompletedDate',
            'AVG(CASE WHEN tblModule.quizIsThereOne = 1 THEN tblUserModuleProgress.AICCScore ELSE NULL END) as score'
        );
        $select_parts[] = $has_certificate_template ? 'tblCourse.certificateTemplate' : 'null as certificateTemplate';
        $select_parts[] = $has_certificate_hours ? 'tblCourse.certificateHours' : 'null as certificateHours';

        $from_parts = array(
            'tblUser',
            'JOIN tblUserProfileCourses ON tblUser.userProfileID = tblUserProfileCourses.userProfileID',
            'JOIN tblCourse ON tblUserProfileCourses.courseID = tblCourse.courseID',
            'LEFT JOIN tblModule ON tblModule.courseID = tblCourse.courseID',
            'LEFT JOIN tblUserCourses ON tblUserCourses.userID = tblUser.userID AND tblCourse.courseID = tblUserCourses.courseID',
            'LEFT JOIN tblUserModuleProgress ON tblCourse.courseID = tblUserModuleProgress.courseID AND tblUserModuleProgress.userID = tblUser.userID AND tblUserModuleProgress.moduleID = tblModule.moduleID'
        );

        $where_parts = array(
            'tblUser.userID IN('.implode(', ', $users).')',
            'tblCourse.courseID IN ('.implode(', ', $courses).')',
            'tblUserCourses.courseStatus = "c"'
        );

        $group_by_parts = array(
            'tblUser.userID',
            'firstName',
            'lastName',
            'tblCourse.courseID',
            'AICCCourseTitle',
            'tblUser.userID',
            'firstName',
            'lastName',
            'tblCourse.courseID',
            'AICCCourseTitle',
        );

        if($has_certificate_template){
            $group_by_parts[] = 'certificateTemplate';
        }

        if($has_certificate_hours){
            $group_by_parts[] = 'certificateHours';
        }

        $select_sql = implode(",", $select_parts);
        $from_sql = implode(" ", $from_parts);
        $where_sql = implode(" AND ", $where_parts);
        $group_by_sql = implode(",", $group_by_parts);

        $sql  = "SELECT ".$select_sql." FROM ".$from_sql." WHERE ".$where_sql." GROUP BY ".$group_by_sql;

        $qry = $this->udb_query($sql);

        while($row = $this->udb_fetch_assoc($qry)){
            $result[] = $row;
        }

        return $result;
    }


    /**
     * List of course refreshes for the given user, optionally filtered by course
     * @param int $user_id
     * @param int  $course_id Optional course id to filter results by
     * @return array|boolean Returns array of refreshed courses on success or false on failure.
     */
    public function user_course_refreshes($user_id, $course_id = null) {

        if (!is_numeric($user_id)){
            return false;
        }

        $result = array();

        if (is_numeric($user_id) && $course_id === null) {
            $sql = 'SELECT
                    tblUserCourseRefresh.courseID, tblCourse.AICCCourseID, tblCourse.AICCCourseTitle, tblUserCourseRefresh.refreshDate, tblUserCourseRefresh.refreshType 
                    FROM
                    tblUserCourseRefresh LEFT JOIN tblUserCourses on (tblUserCourseRefresh.userID = tblUserCourses.userID AND tblUserCourseRefresh.courseID = tblUserCourses.courseID)
                    LEFT JOIN tblCourse ON tblUserCourseRefresh.courseID = tblCourse.courseID
                    WHERE
                    tblUserCourseRefresh.userID = ' . $user_id . '
                    ORDER BY
                    tblUserCourseRefresh.refreshDate DESC';

            $qry = $this->udb_query($sql);

            while ($row = $this->udb_fetch_assoc($qry)) {
                $result[] = $row;
            }
        }
        else if (is_numeric($user_id) && is_numeric($course_id)) {
            $sql = 'SELECT
                    tblUserCourseRefresh.courseID, tblCourse.AICCCourseID, tblCourse.AICCCourseTitle, tblUserCourseRefresh.refreshDate, tblUserCourseRefresh.refreshType
                    FROM
                    tblUserCourseRefresh LEFT JOIN tblUserCourses on (tblUserCourseRefresh.userID = tblUserCourses.userID AND tblUserCourseRefresh.courseID = tblUserCourses.courseID)
                    LEFT JOIN tblCourse ON tblUserCourseRefresh.courseID = tblCourse.courseID
                    WHERE
                    tblUserCourseRefresh.userID = ' . $user_id . ' AND tblUserCourseRefresh.courseID = ' . $course_id . '
                    ORDER BY
                    tblUserCourseRefresh.refreshDate DESC';

            $qry = $this->udb_query($sql);

            while ($row = $this->udb_fetch_assoc($qry)) {
                $result[] = $row;
            }
        }
        else {
            return false;
        }

        return $result;
    }

    /**
     * Retrieves the import defaults from GI_tblDefaults
     * @return array
     */
    public function user_import_defaults() {

        $sql = "SELECT GI_tblDefaults.ImportFirstRow, GI_tblDefaults.DataFileLocation, tblUserType.userTypeID as userTypeDefault, GI_tblDefaults.passwordDefault, tblCountry.countryID as countryCodeDefault, "
                . "tblLanguage.languageID as languageCodeDefault, tblUserProfile.userProfileID as userProfileDefault, (SELECT employmentTypeID FROM tblEmploymentType WHERE [default] = 1) as employmentTypeDefault, "
                . "(SELECT org1ID FROM tblOrg1 WHERE org1Default = 1) as org1Default FROM (((GI_tblDefaults LEFT JOIN tblUserType ON tblUserType.userTypeDescription = GI_tblDefaults.userTypeDefault) "
                . "LEFT JOIN tblCountry ON tblCountry.countryShortName = GI_tblDefaults.CountryCode) LEFT JOIN tblLanguage ON tblLanguage.languageShortName = GI_tblDefaults.languageCodeDefault) "
                . "LEFT JOIN tblUserProfile ON tblUserProfile.userProfileDescription = GI_tblDefaults.UserProfileDefault";

        $qry = $this->udb_query($sql);
        $result = $this->udb_fetch_assoc($qry);

        return $result;
    }

    /**
     * Retrieve default user settings for given key
     * @param  string $key
     * @return array
     */
    public function user_defaults($key=false){
        $apc_key = $this->generate_cache_key("defaults");

        if(($defaults = apc_fetch($apc_key)) === false){
            $sql = "SELECT tblUserType.userTypeID as userTypeDefault, GI_tblDefaults.passwordDefault, tblCountry.countryID as countryDefault, "
                . "tblLanguage.languageID as languageDefault, tblUserProfile.userProfileID as userProfileDefault, (SELECT employmentTypeID FROM tblEmploymentType WHERE [default] = 1) as employmentTypeDefault, "
                . "(SELECT org1ID FROM tblOrg1 WHERE org1Default = 1) as org1Default FROM (((GI_tblDefaults LEFT JOIN tblUserType ON tblUserType.userTypeDescription = GI_tblDefaults.userTypeDefault) "
                . "LEFT JOIN tblCountry ON tblCountry.countryShortName = GI_tblDefaults.CountryCode) LEFT JOIN tblLanguage ON tblLanguage.languageShortName = GI_tblDefaults.languageCodeDefault) "
                . "LEFT JOIN tblUserProfile ON tblUserProfile.userProfileDescription = GI_tblDefaults.UserProfileDefault";

            $qry = $this->udb_query($sql);
            $defaults = $this->udb_fetch_assoc($qry);

            apc_store($apc_key, $defaults, 14400);
        }

        if(is_string($key)){
            return $defaults[$key];
        }
        else{
            return $defaults;
        }
    }

    /**
     * Adds the file import for user imports to the FileImports log
     * @param string $path Path of import file.
     * @param string $filename Original filename.
     * @param int $rowCount Number of rows in file.
     * @return int|boolean  Returns the last inser ID on success, or false on fail
     */
    public function user_import_file_import_log($path, $filename, $rowCount) {

        $path = $this->udb_escape_string($path);
        $filename = $this->udb_escape_string($filename);

        $insert_parts = array(
            'FileName' => '"'.$this->udb_escape_string($path).'"',
            'OriginalFileName' => '"'.$this->udb_escape_string($filename).'"',
            'ImportDateTime' => '"'.date('Y-m-d H:i:s').'"'
        );

        if ($this->column_exists('GI_tblFileImports', 'NumberOfRowsProcessed')) {
            $insert_parts['NumberOfRowsProcessed'] = '"'.$this->udb_escape_string($rowCount).'"';
        }

        $sql = sprintf(
            'INSERT INTO GI_tblFileImports (%s) VALUES (%s)',
            implode(', ', array_keys($insert_parts)),
            implode(', ', $insert_parts)
        );

        $query = $this->udb_query($sql);

        if ($query) {
            return $this->udb_last_insert_id();
        }
        else {
            return false;
        }
    }

    /**
     * Logs errors to GI_tblErrorLog for the user import
     * @param string $error
     * @param int $line Line number of error (from imported CSV)
     * @param int $user User ID from database
     * @param int $id File Import ID for imported CSV
     * @return boolean
     */
    public function user_import_error_log($error, $line, $user, $id) {

        $error = $this->udb_escape_string($error);

        if(!is_numeric($line) || !is_numeric($id)){
            $this->log_error("Invalid line number or import ID given to user import error log");
            return false;
        }

        $user = $this->udb_escape_string($user);

        $sql = "INSERT INTO GI_tblErrorLog (ErrorMessage, LineNumber, Date, UserName, GIFileImportID) VALUES ('" . $error . "', " . $line . ", '" . date('Y-m-d H:i:s') . "', N'" . $user . "', " . $id . ")";

        return $this->udb_query($sql);
    }

    /**
     * Add user self reg details to tblUserSelfReg
     * @param  Array $details
     * @return boolean
     */
    public function user_self_reg_add($details){
        if(is_array($details) && !empty($details)){

            $user = array();

            if(array_key_exists("firstName", $details) && !empty($details["firstName"])){
                $user["firstName"] = "'".$this->udb_escape_string($details["firstName"])."'";
            }

            if(array_key_exists("lastName", $details) && !empty($details["lastName"])){
                $user["lastName"] = "'".$this->udb_escape_string($details["lastName"])."'";
            }

            if(array_key_exists("email", $details) && !empty($details["email"])){
                $user["email"] = "'".$this->udb_escape_string($details["email"])."'";
            }

            if(array_key_exists("telephone", $details) && !empty($details["telephone"])){
                $user["telephone"] = "'".$this->udb_escape_string($details["telephone"])."'";
            }

            if(array_key_exists("company", $details) && !empty($details["company"])){
                $user["company"] = "'".$this->udb_escape_string($details["company"])."'";
            }

            if(array_key_exists("address1", $details) && !empty($details["address1"])){
                $user["address1"] = "'".$this->udb_escape_string($details["address1"])."'";
            }

            if(array_key_exists("address2", $details) && !empty($details["address2"])){
                $user["address2"] = "'".$this->udb_escape_string($details["address2"])."'";
            }

            if(array_key_exists("town", $details) && !empty($details["town"])){
                $user["town"] = "'".$this->udb_escape_string($details["town"])."'";
            }

            if(array_key_exists("county", $details) && !empty($details["county"])){
                $user["county"] = "'".$this->udb_escape_string($details["county"])."'";
            }

            if(array_key_exists("postcode", $details) && !empty($details["postcode"])){
                $user["postcode"] = "'".$this->udb_escape_string($details["postcode"])."'";
            }

            if(array_key_exists("groupMember", $details) && (is_bool($details["groupMember"]) || is_int($details["groupMember"]))){
                if($details["groupMember"]){
                    $user["groupMember"] = 1;

                    if(array_key_exists("groupName", $details) && !empty($details["groupName"])){
                        $user["groupName"] = "'".$this->udb_escape_string($details["groupName"])."'";
                    }
                }
                else{
                    $user["groupMember"] = 0;
                }
            }

            if(array_key_exists("noFurtherInfo", $details) && (is_bool($details["noFurtherInfo"]) || is_int($details["noFurtherInfo"]))){
                if($details["noFurtherInfo"]){
                    $user["noFurtherInfo"] = 1;
                }
                else{
                    $user["noFurtherInfo"] = 0;
                }
            }

            if(!empty($user)){
                $sql = "INSERT INTO tblUserSelfReg (".implode(", ", array_keys($user)).") VALUES (".implode(", ", $user).")";

                return $this->udb_query($sql);
            }
        }

        return false;
    }

    //---------------------------------

    public function country_list() {

        $country_list = array();

        if($this->column_exists("tblCounty", "langString")){
            $country_db_query = $this->udb_fetch_all('SELECT CountryID, CountryShortName, CountryLongName, langString FROM tblCountry ORDER BY CountryID ASC');
        }
        else{
            $country_db_query = $this->udb_fetch_all('SELECT CountryID, CountryShortName, CountryLongName, NULL as langString FROM tblCountry ORDER BY CountryID ASC');
        }

        foreach ($country_db_query as $row) {

            $country_list[$row['CountryID']] = $row;
            unset($country_list[$row['CountryID']]['CountryID']);
        }

        return $country_list;
    }

    /**
     * Returns a list of languages from tblLanguage.
     * @return array
     */
    public function language_list() {

        $language_list = array();

        $raw_language_list = $this->udb_fetch_all('SELECT languageID, languageShortName, languageLongName, [default] FROM tblLanguage ORDER BY languageID ASC');

        if (!empty($raw_language_list)) {
            foreach ($raw_language_list as $row) {
                $language_list[$row['languageID']] = $row;
                unset($language_list[$row['languageID']]['languageID']);
            }
        }

        return $language_list;
    }

    //=====================================================================
    // SURVEY FUNCTIONS
    //=====================================================================

    /**
     * Survey Free Text Answers
     * @param array|int $survey_id_list Either a single survey IDs to use or an array containing multiple IDs
     * @param array $org_filters List of org filtes in format: array(Org Level => array(IDs))
     * @param array $user_type_filter List of User type IDs to filter by
     * @param  array  $date_filters Array which can contain date_from and/or date_to. These have to be DateTime objects and can be used to limit the results agains the surveyCompletedDate column on thlUserSurvey
     * @return mixed
     */
    public function survey_free_text_answers($survey_id_list, $org_filters = array(), $user_type_filter = array(), array $date_filters = array(), array $employment_type_filters = array())
    {
        if (!is_array($survey_id_list)) {
            $survey_id_list = array($survey_id_list);
        }

        if ($this->array_only_int($survey_id_list)) {

            $filter_sql = $this->generate_user_filters_sql(
                $org_filters,
                $user_type_filter,
                false, //ignore restricted views
                array(), //job type filter
                $employment_type_filters
            );

            if (trim($filter_sql) !== "") {
                $filter_sql = ' AND ' . $filter_sql;
            }

            //join tbl user survey and date submitted
            $select = 'qNo AS QuestionID, tblUser.Org4ID, (SELECT org4Name FROM tblOrg4 WHERE Org4ID = tblUser.org4ID) AS Org4Name, tblUser.Org3ID, (SELECT org3Name FROM tblOrg3 WHERE Org3ID = tblUser.org3ID) AS Org3Name, tblUser.Org2ID, (SELECT org2Name FROM tblOrg2 WHERE Org2ID = tblUser.org2ID) AS Org2Name, tblUser.Org1ID, (SELECT org1Name FROM tblOrg1 WHERE Org1ID = tblUser.org1ID) AS Org1Name, tblSurveyFreeText.freeTextData as freeTextData';

            $join = array(
                'JOIN tblSurveyFreeText ON tblUser.UserID = tblSurveyFreeText.UserID',
            );

            $where = array(
                'tblSurveyFreeText.surveyID IN (' . implode(',', $survey_id_list) . ')',
                '(tblUser.tmpExclude <> 1 OR tblUser.tmpExclude IS NULL)',
                '(freeTextData != \'\' AND freeTextData IS NOT NULL)'
            );

            $order_by = array(
                'CAST(qNo as INT)',
                'tblUser.Org4ID',
                'tblUser.Org3ID',
                'tblUser.Org2ID',
                'tblUser.Org1ID'
            );

            //If at least one date filter has been provided.
            if (!empty($date_filters) && (isset($date_filters['date_from']) || isset($date_filters['date_to']))) {

                //Join tblUserSurvey to allow filtering by its surveyDateSubmitted column.
                $join[] = 'JOIN tblUserSurvey ON (tblUserSurvey.userID = tblSurveyFreeText.userID AND tblUserSurvey.surveyID = tblSurveyFreeText.surveyID)';

                //Get results after the date from.
                if (isset($date_filters['date_from']) && $date_filters['date_from'] instanceof DateTime) {
                    $where[] = 'tblUserSurvey.surveyDateSubmitted >= "' . $this->udb_escape_string($date_filters['date_from']->format('Y-m-d H:i:s')) . '"';
                } elseif (!$date_filters['date_from'] instanceof DateTime) {
                    $this->log_error('Invalid survey submitted date from');
                }

                //Results before date to.
                if (isset($date_filters['date_to']) && $date_filters['date_to'] instanceof DateTime) {
                    $where[] = 'tblUserSurvey.surveyDateSubmitted <= "' . $this->udb_escape_string($date_filters['date_to']->format('Y-m-d H:i:s')) . '"';
                } elseif (!$date_filters['date_to'] instanceof DateTime) {
                    $this->log_error('Invalid survey submitted date to');
                }
            }

            //Build SQL query string.
            $query = sprintf(
                'SELECT %s FROM tblUser %s WHERE %s ORDER BY %s',
                $select,
                implode(' ', $join),
                implode(' AND ', $where) . $filter_sql,
                implode(', ', $order_by)
            );

            $answers = $this->udb_fetch_all($query);

            foreach ($answers as $answer_row_count => $answer_row) {
                $free_text_data = rawurldecode($answers[$answer_row_count]['freeTextData']);

                if (mb_detect_encoding($free_text_data, mb_detect_order(), true) === false) {
                    $free_text_data = utf8_encode($free_text_data);
                }

                $answers[$answer_row_count]['freeTextData'] = $free_text_data;
            }

            return $answers;
        }

        return false;
    }

    private function generate_extended_user_filters_sql($filters=array(), $restrictions=true){
        $sql_bits = array();

        if($restrictions){
            // Global Org Excludes
            if (is_array($this->config) && array_key_exists("reporting_org_excludes", $this->config) && is_array($this->config['reporting_org_excludes'])) {
                foreach ($this->config['reporting_org_excludes'] as $org_level => $org_exclude_list) {
                    $sql_bits[] = 'tblUser.org' . $org_level . 'ID NOT IN (' . implode(',', $org_exclude_list) . ')';
                }
            }

            // Restricted Views
            if (is_array($this->logged_in_user['ReportAccess'])) {
                list($ra_level) = array_keys($this->logged_in_user['ReportAccess']);
                $sql_bits[] = 'tblUser.org' . $ra_level . 'ID IN (' . implode(',', $this->logged_in_user['ReportAccess'][$ra_level]) . ')';
            }

        }

        //If there is a logged in user but the user is not an Administator, do
        //not allow them to see system users.
        if ($this->logged_in_user && (int)$this->logged_in_user['Administrator'] !== 1) {
            $filters['system_user'] = 0;
        }

        //accountActive Filter
        if (array_key_exists("active", $filters)) {
            if (intval($filters["active"]) === 0) {
                $sql_bits[] = "tblUser.accountActive = 0";
            }
            else if (intval($filters["active"]) === 1) {
                $sql_bits[] = "tblUser.accountActive = 1";
            }
            else if(intval($filters["active"]) === 2){
                $sql_bits[] = "tblUser.accountActive in(0,1)";
            }
            else{
                $this->log_error("Invalid Filter", "Invalid accountActive filter provided.");
            }
        }

        //tmpExclude Filter
        if (array_key_exists("temp_exclude", $filters)) {

            if (intval($filters["temp_exclude"]) === 0) {
                $sql_bits[] = "(tblUser.tmpExclude = 0 OR tblUser.tmpExclude IS NULL)";
            }
            else if (intval($filters["temp_exclude"]) === 1) {
                $sql_bits[] = "tblUser.tmpExclude = 1";
            }
            else if(intval($filters["temp_exclude"] === 2)){
                $sql_bits[] = "(tblUser.tmpExclude IN(0,1) OR tblUser.tmpExclude IS NULL)";
            }
            else{
                $this->log_error("Invalid Filter", "Invalid tmpExclude filter provided.");
            }
        }

        //employmentType Filter
        if (array_key_exists("employment_type", $filters)) {
            if((is_array($filters["employment_type"]) && !empty($filters["employment_type"])) || (is_numeric($filters["employment_type"]) && intval($filters["employment_type"])  !== -1)){

                if(is_numeric($filters["employment_type"])){
                    $filters["employment_type"] = array($filters["employment_type"]);
                }

                $filters["employment_type"] = array_filter($filters["employment_type"], "is_numeric");

                if(!empty($filters["employment_type"])){
                    $sql_bits[] = "tblUser.employmentTypeID IN (" . implode(", ", $filters["employment_type"]) . ")";
                }
                else{
                    $this->log_error("Invalid Filter", "Invalid employmentType filter provided.");
                }
            }
        }

        //userType Filter
        if (array_key_exists("user_type", $filters)) {
            if((is_array($filters["user_type"]) && !empty($filters["user_type"])) || (is_numeric($filters["user_type"]) && intval($filters["user_type"])  !== -1)){

                if(is_numeric($filters["user_type"])){
                    $filters["user_type"] = array($filters["user_type"]);
                }

                $filters["user_type"] = array_filter($filters["user_type"], "is_numeric");

                if(!empty($filters["user_type"])){
                    $sql_bits[] = "tblUser.userTypeID IN (" . implode(", ", $filters["user_type"]) . ")";
                }
                else{
                    $this->log_error("Invalid Filter", "Invalid userType filter provided.");
                }
            }
        }

        //jobType Filter
        if (array_key_exists("job_type", $filters)) {
            if((is_array($filters["job_type"]) && !empty($filters["job_type"])) || (is_numeric($filters["job_type"]) && intval($filters["job_type"])  !== -1)){

                if(is_numeric($filters["job_type"])){
                    $filters["job_type"] = array($filters["job_type"]);
                }

                $filters["job_type"] = array_filter($filters["job_type"], "is_numeric");

                if(!empty($filters["job_type"])){
                    $sql_bits[] = "tblUser.jobTypeID IN (" . implode(", ", $filters["job_type"]) . ")";
                }
                else{
                    $this->log_error("Invalid Filter", "Invalid jobType filter provided.");
                }
            }
        }

        //userProfile Filter
        if (array_key_exists("user_profile", $filters)) {
            if(is_array($filters["user_profile"]) || (is_numeric($filters["user_profile"]) && intval($filters["user_profile"])  !== -1)){

                if(is_numeric($filters["user_profile"])){
                    $filters["user_profile"] = array($filters["user_profile"]);
                }

                $filters["user_profile"] = array_filter($filters["user_profile"], "is_numeric");

                if(!empty($filters["user_profile"])){
                    $sql_bits[] = "tblUser.userProfileID IN (" . implode(", ", $filters["user_profile"]) . ")";
                }
                else{
                    $this->log_error("Invalid Filter", "Invalid userProfile filter provided.");
                }
            }
        }

        //userExcludeAttribute Filter
        if (array_key_exists("user_exclude", $filters)) {
            if(is_array($filters["user_exclude"]) || (is_numeric($filters["user_exclude"]) && intval($filters["user_exclude"])  !== -1)){

                if(is_numeric($filters["user_exclude"])){
                    $filters["user_exclude"] = array($filters["user_exclude"]);
                }

                $filters["user_exclude"] = array_filter($filters["user_exclude"], "is_numeric");

                if (!empty($filters["user_exclude"])) {
                    $sql_bits[] = "tblUser.userExcludeAttributeID IN (" . implode(", ", $filters["user_exclude"]) . ")";
                } else {
                    $this->log_error("Invalid Filter", "Invalid userExcludeAttribute filter provided.");
                }
            }
        }

        //userID Filter
        if (array_key_exists("user", $filters)) {
            if(is_array($filters["user"]) || (is_numeric($filters["user"]) && intval($filters["user"])  !== -1)){

                if(is_numeric($filters["user"])){
                    $filters["user"] = array($filters["user"]);
                }

                $filters["user"] = array_filter($filters["user"], "is_numeric");

                if(!empty($filters["user"])){
                    $sql_bits[] = "tblUser.userID IN (" . implode(", ", $filters["user"]) . ")";
                }
                else{
                    $this->log_error("Invalid Filter", "Invalid userID filter provided.");
                }
            }
        }

        //Username Filter
        if (array_key_exists("user_name", $filters) && !empty($filters["user_name"])){
            if(!is_array($filters["user_name"]) && is_string($filters["user_name"])){
                $filters["user_name"] = array($filters["user_name"]);
            }

            $filters["user_name"] = array_map(array($this, "udb_escape_string"), $filters["user_name"]);

            $sql_bits[] = "tblUser.userName IN ('" . implode("', '", $filters["user_name"]) . "')";
        }

        //TEMPORARY: convert old style org filter into new style
        if(array_key_exists("org_level", $filters) && array_key_exists("org_id", $filters)){
            $filters["org_id"] = is_array($filters["org_id"]) ? $filters["org_id"] : array($filters["org_id"]);

            $filters["org"]=  array($filters["org_level"] => $filters["org_id"]);
        }

        //Org Filter
        if (array_key_exists("org", $filters) && is_array($filters["org"]) && !empty($filters["org"])) {
            $tmp_sql = '';

            foreach ($filters["org"] as $org_level => $id_list) {
                if (!empty($id_list)) {

                    if (!is_array($id_list)) {
                        $id_list = array($id_list);
                    }

                    $id_list = array_filter($id_list, "is_numeric");

                    if ($this->org_level_valid($org_level) && !empty($id_list)) {
                        $tmp_sql .= 'tblUser.org' . $org_level . 'ID IN (' . implode(', ', $id_list) . ') OR ';
                    }
                    else{
                        $this->log_error("Invalid Filter", "Invalid org filter provided.");
                    }
                }
            }

            if ($tmp_sql !== '') {
                $sql_bits[] = substr($tmp_sql, 0, -4);
            }
        }

        //last_modified_date filter
        if(array_key_exists("last_modified_date", $filters) && !empty($filters["last_modified_date"])){
            $last_modified_date = array();

            if(array_key_exists("from", $filters["last_modified_date"])){
                if($this->is_datetime($filters["last_modified_date"]["from"])){
                    $last_modified_date[] = "COALESCE(tblUser.lastModifiedDate, tblUser.creationDateTime) >= '".$filters["last_modified_date"]["from"]."'";
                }
            }

            if(array_key_exists("to", $filters["last_modified_date"])){
                if($this->is_datetime($filters["last_modified_date"]["to"])){
                    $last_modified_date[] = "COALESCE(tblUser.lastModifiedDate, tblUser.creationDateTime) <= '".$filters["last_modified_date"]["to"]."'";
                }
            }

            if(!empty($last_modified_date)){
                $sql_bits[] = implode(" AND ", $last_modified_date);
            }
        }

        //joiningDate filter
        if(array_key_exists("joining_date", $filters) && !empty($filters["joining_date"])){
            $joining_date = array();

            if(array_key_exists("from", $filters["joining_date"])){
                if($this->is_datetime($filters["joining_date"]["from"])){
                    $joining_date[] = "tblUser.joiningDate >= '".$filters["joining_date"]["from"]."'";
                }
            }

            if(array_key_exists("to", $filters["joining_date"])){
                if($this->is_datetime($filters["joining_date"]["to"])){
                    $joining_date[] = "tblUser.joiningDate <= '".$filters["joining_date"]["to"]."'";
                }
            }

            if(!empty($joining_date)){
                $joining_date = implode(" AND ", $joining_date);
                $sql_bits[] = "(".$joining_date.")";
            }
        }

        //systemUser Filter
        if (array_key_exists("system_user", $filters)) {
            $system_user_filter = intval($filters["system_user"]);

            if ($system_user_filter === 0) {
                $sql_bits[] = "(tblUser.systemUser = 0 OR tblUser.systemUser IS NULL)";
            } elseif ($system_user_filter === 1) {
                $sql_bits[] = "tblUser.systemUser = 1";
            } elseif ($system_user_filter === 2){
                $sql_bits[] = "(tbluser.systemUser IS NULL OR tblUser.systemUser in(0,1))";
            } else{
                $this->log_error("Invalid Filter", "Invalid systemUser filter provided.");
            }
        }

        if (count($sql_bits) > 0) {
            return '((' . implode(') AND (', $sql_bits) . '))';
        }

        return '';
    }

    /**
     * Generate User Filters
     * @param array $org_filters Org filters, indexed by org level and containing an array of org IDs for that level.
     * @param array $user_type_filter User type IDs to filter by.
     * @param bool $ignore_restricted_views Denotes whether restircted views should be ignored or not.
     * @param array $job_type_filter Job type IDs to  filters by.
     * @return string The constructed filter SQL.
     */
    private function generate_user_filters_sql($org_filters = array(), $user_type_filter = array(), $ignore_restricted_views = false, $job_type_filter = array(), array $employment_type_filter = array()) {

        $sql_bits = array();

        // Global Org Excludes

        if (is_array($this->config) && array_key_exists("reporting_org_excludes", $this->config) && is_array($this->config['reporting_org_excludes'])) {
            foreach ($this->config['reporting_org_excludes'] as $org_level => $org_exclude_list) {
                $sql_bits[] = 'tblUser.org' . $org_level . 'ID NOT IN (' . implode(',', $org_exclude_list) . ')';
            }
        }

        // Restricted Views
        if (is_array($this->logged_in_user['ReportAccess']) and $ignore_restricted_views !== true) {
            list($ra_level) = array_keys($this->logged_in_user['ReportAccess']);
            $sql_bits[] = 'tblUser.org' . $ra_level . 'ID IN (' . implode(',', $this->logged_in_user['ReportAccess'][$ra_level]) . ')';
        }

        // Org Filters
        $tmp_sql = '';

        if (is_array($org_filters) and count($org_filters) > 0) {

            foreach ($org_filters as $org_level => $id_list) {
                if (!empty($id_list)) {
                    if (!is_array($id_list)) {
                        $id_list = array($id_list);
                    }
                    if ($this->org_level_valid($org_level) && $this->array_only_int($id_list)) {
                        $tmp_sql .= 'tblUser.org' . $org_level . 'ID IN (' . implode(', ', $id_list) . ') OR ';
                    }
                }
            }

            if ($tmp_sql != '') {
                $sql_bits[] = substr($tmp_sql, 0, -4);
            }
        }

        // User Type Filters

        $tmp_sql = '';

        if (is_array($user_type_filter) && count($user_type_filter) > 0 && $this->array_only_int($user_type_filter)) {
            $sql_bits[] = 'tblUser.UserTypeID IN (' . implode(',', $user_type_filter) . ')';
        }

        // Job Type Filters

        $tmp_sql = '';

        if (is_array($job_type_filter) && count($job_type_filter) > 0 && $this->array_only_int($job_type_filter)) {
            $sql_bits[] = 'tblUser.jobTypeID IN (' . implode(',', $job_type_filter) . ')';
        }

        if (is_array($employment_type_filter) && count($employment_type_filter) > 0 && $this->array_only_int($employment_type_filter)) {
            $sql_bits[] = 'tblUser.employmentTypeID IN (' . implode(',', $employment_type_filter) . ')';
        }

        if (!$ignore_restricted_views) {
            $sql_bits[] = '(tblUser.systemUser IS NULL OR tblUser.systemUser = 0)';
        }

        // Return the Filters

        if (count($sql_bits) > 0) {
            return '((' . implode(') AND (', $sql_bits) . '))';
        }

        return '';
    }

    /**
     * Generates the survey classification report.
     * @param array|int $survey_id_list
     * @param int $answer_group_type_id
     * @param array $org_filters
     * @param array $user_type_filter
     * @param bool $ignore_restricted_views
     * @param array $employment_type_filters
     * @return array
     */
    public function survey_classification_report($survey_id_list, $answer_group_type_id, $org_filters = array(), $user_type_filter = array(), $ignore_restricted_views = false, array $employment_type_filters = array()) {

        if (!is_array($survey_id_list)) {
            $survey_id_list = array($survey_id_list);
        }

        $out_results = array(
            'length_of_service' => array(
                array('user_count' => 0, 'seconds' => 15778800, 'label' => '0-6 Months'),
                array('user_count' => 0, 'seconds' => 31557600, 'label' => '6-12 Months'),
                array('user_count' => 0, 'seconds' => 94672800, 'label' => '1-3 Years'),
                array('user_count' => 0, 'seconds' => 157788000, 'label' => '3-5 Years'),
                array('user_count' => 0, 'seconds' => 315576000, 'label' => '5-10 Years'),
                array('user_count' => 0, 'seconds' => 473364000, 'label' => '10-15 Years'),
                array('user_count' => 0, 'seconds' => 1322964137, 'label' => '15+ Years') // The timestamp when I wrote this
            ),
            'generation_group' => array(
//              array('user_count' => 0, 'year' => 1995, 'label' => 'Gen Z (1995 onwards)'),
                array('user_count' => 0, 'year' => 1980, 'label' => 'Gen Y (1980 - 1994)'),
                array('user_count' => 0, 'year' => 1965, 'label' => 'Gen X (1965 - 1979)'),
                array('user_count' => 0, 'year' => 1946, 'label' => 'Baby Boomers (1946 - 1964)'),
                array('user_count' => 0, 'year' => 1928, 'label' => 'Veterans (1928 - 1945)')
            ),
            'gender' => array(
                array('user_count' => 0, 'gender' => 'Male', 'label' => 'Male'), // TODO: Make sure these are correct
                array('user_count' => 0, 'gender' => 'Female', 'label' => 'Female')
            ),
            'user_type' => array()
        );

        foreach ($this->user_type_list() as $user_type_id => $user_type_description) {

            $out_results['user_type'][] = array('user_count' => 0, 'user_type_id' => $user_type_id, 'label' => $user_type_description);
        }

        if ($this->array_only_int($survey_id_list)) {

            $answer_group_answers = $this->survey_get_answer_group_answers($answer_group_type_id);
            $survey_answer_group_answers = $answer_group_answers[$survey_id_list[0]];

            $answer_group_types = $this->survey_get_answer_group_types();
            $answer_group_type = $answer_group_types[$answer_group_type_id];

            $raw_results = $this->survey_raw_results(
                $survey_id_list,
                $org_filters,
                $user_type_filter,
                true, //return user info
                $ignore_restricted_views,
                array(), //survey question filters
                array(), //date filters
                $employment_type_filters
            );

            foreach ($raw_results as $row) {

                list($answer_score, $maximum_score) = $this->survey_score_answers($row['SurveyAnswers'], $survey_answer_group_answers, $answer_group_type);

                //--- Work out what groups this person belongs to ---
                // Length of Service
                foreach ($out_results['length_of_service'] as $id => $length_of_service) {
                    if ($row['SurveyDateSubmitted'] - $row['JoiningDate'] <= $length_of_service['seconds']) {
                        $out_results['length_of_service'][$id]['score'] += $answer_score;
                        $out_results['length_of_service'][$id]['maximum_score'] += $maximum_score;
                        $out_results['length_of_service'][$id]['user_count']++;
                        break;
                    }
                }

                // Generation Group
                foreach ($out_results['generation_group'] as $id => $generation_group) {
                    if ($row['BirthYear'] >= $generation_group['year']) {
                        $out_results['generation_group'][$id]['score'] += $answer_score;
                        $out_results['generation_group'][$id]['maximum_score'] += $maximum_score;
                        $out_results['generation_group'][$id]['user_count']++;
                        break;
                    }
                }

                // User Type
                foreach ($out_results['user_type'] as $id => $user_type) {
                    if ($user_type['user_type_id'] == $row['UserTypeID']) {
                        $out_results['user_type'][$id]['score'] += $answer_score;
                        $out_results['user_type'][$id]['maximum_score'] += $maximum_score;
                        $out_results['user_type'][$id]['user_count']++;
                        break;
                    }
                }

                // Gender
                foreach ($out_results['gender'] as $id => $gender) {
                    if ($row['Gender'] == $gender['gender']) {
                        $out_results['gender'][$id]['score'] += $answer_score;
                        $out_results['gender'][$id]['maximum_score'] += $maximum_score;
                        $out_results['gender'][$id]['user_count']++;
                        break;
                    }
                }
            }
        }

        return $out_results;
    }

    /**
     * survey_score_answers
     */
    private function survey_score_answers($answers, $survey_answer_group_answers, $answer_group_type) {

        $answer_score = 0;
        $maximum_score = 0;

        foreach ($answers as $question_number => $answer) {
            if (is_numeric($answer) and !empty($survey_answer_group_answers[$question_number][$answer])) {
                $answer_score += $answer_group_type['answer_groups'][$survey_answer_group_answers[$question_number][$answer]]['answer_group_score'];

                $highest_score = 0;

                foreach ($survey_answer_group_answers[$question_number] as $answer_group_id) {
                    if ($answer_group_type['answer_groups'][$answer_group_id]['answer_group_score'] > $highest_score) {
                        $highest_score = $answer_group_type['answer_groups'][$answer_group_id]['answer_group_score'];
                    }
                }

                $maximum_score += $highest_score;
            }
        }

        return array($answer_score, $maximum_score);
    }

    /**
     * Retrieves the answer group score for a list of survey id's.
     * @param array $survey_id_list
     * @param integer|bool $answer_group_type_id
     * @param array $org_filters
     * @param array $user_type_filter
     * @param bool $ignore_restricted_views
     * @param array $employment_type_filters
     * @return integer|bool
     */
    public function survey_answer_group_score($survey_id_list, $answer_group_type_id = false, $org_filters = array(), $user_type_filter = array(), $ignore_restricted_views = false, array $employment_type_filters = array()) {
        // A dirty way of doing this really
        $tmp_results = $this->survey_results(
            $survey_id_list, //survey id list
            $answer_group_type_id, //answer group type id
            $org_filters, //org filters
            $user_type_filter, //user type filter
            false, //include empty answers
            true, //include scores
            $ignore_restricted_views, //ignore restricted views
            array(), //survey question filter
            array(), //date filter
            $employment_type_filters //employment type filters
        );

        $max_score = $tmp_results['*ALL*']['*MAXSCORE*'];

        if (array_key_exists('*ALL*', $tmp_results) && $max_score > 0) {
            return round($tmp_results['*ALL*']['*SCORE*'] / ($max_score / 100));
        }

        return false;
    }

    /**
     * Survey results
     * @param  array   $survey_id_list
     * @param  boolean $answer_group_type_id
     * @param  array   $org_filters
     * @param  array   $user_type_filter
     * @param  boolean $return_empty_answers
     * @param  boolean $include_scores
     * @param  boolean $ignore_restricted_views
     * @param  array   $survey_question_filter
     * @param  array   $date_filters             Array which can contain date_from and/or date_to. These have to be DateTime objects and can be used to limit the results agains the surveyCompletedDate column on thlUserSurvey
     * @param  array   $employment_type_filters 
     * @return mixed
     */
    public function survey_results($survey_id_list, $answer_group_type_id = false, $org_filters = array(), $user_type_filter = array(), $return_empty_answers = true, $include_scores = false, $ignore_restricted_views = false, $survey_question_filter = array(), array $date_filters = array(), array $employment_type_filters = array()) {

        if (!is_array($survey_id_list)) {
            $survey_id_list = array($survey_id_list);
        }

        $out_results = array();

        if ($this->array_only_int($survey_id_list)) {

            // Put zero in all the answer values

            if ($answer_group_type_id and is_numeric($answer_group_type_id)) {

                if ($include_scores) {
                    $answer_group_types = $this->survey_get_answer_group_types();
                    $answer_group_type = $answer_group_types[$answer_group_type_id];
                }

                $answer_group_answers = $this->survey_get_answer_group_answers($answer_group_type_id);

                $survey_answer_group_answers = $answer_group_answers[$survey_id_list[0]];

                if ($return_empty_answers and !empty($survey_answer_group_answers)) {

                    foreach ($survey_answer_group_answers as $question_number => $answers) {
                        foreach ($answers as $answer_id => $answer_group_id) {
                            $out_results[$question_number][$answer_group_id] = 0;
                        }
                    }
                }
            }
            else {

                if ($return_empty_answers) {
                    if ($survey_structure = $this->survey_get_structure($survey_id_list[0])) { // Use the first survey in the list for the structure
                        foreach ($survey_structure as $question) {
                            if (!empty($question['answers']) and is_array($question['answers'])) {
                                foreach (array_keys($question['answers']) as $answer_id) {
                                    $out_results[$question['question_number']][$answer_id] = 0;
                                }
                            }
                        }
                    }
                    else {
                        return array();
                    }
                }
            }

            $raw_results = $this->survey_raw_results($survey_id_list, $org_filters, $user_type_filter, false, $ignore_restricted_views, $survey_question_filter, $date_filters, $employment_type_filters);

            $minimum_display_users = false;

            foreach ($survey_id_list as $survey_id) {
                if (!empty($this->config['survey_settings'][$survey_id]['minimum_display_users']) and ($minimum_display_users == false or $minimum_display_users > $this->config['survey_settings'][$survey_id]['minimum_display_users'])) {
                    $minimum_display_users = $this->config['survey_settings'][$survey_id]['minimum_display_users'];
                }
            }

            if ($minimum_display_users != false and count($raw_results) < $minimum_display_users) {

                return -1; // Too few respondents
            }
            else {

                foreach ($raw_results as $row) {

                    foreach ($row['SurveyAnswers'] as $question_number => $answer) {

                        if (is_numeric($answer)) {

                            if(!isset($out_results[$question_number])){
                                $out_results[$question_number] = array();
                            }

                            if ($answer_group_type_id) {

                                if (!empty($survey_answer_group_answers[$question_number][$answer])) {
                                    if(!isset($out_results[$question_number][$survey_answer_group_answers[$question_number][$answer]])){
                                        $out_results[$question_number][$survey_answer_group_answers[$question_number][$answer]] = 0;
                                    }

                                    $out_results[$question_number][$survey_answer_group_answers[$question_number][$answer]] += 1;
                                }
                            }
                            else {
                                if (!isset($out_results[$question_number][$answer])) {
                                    $out_results[$question_number][$answer] = 0;
                                }

                                $out_results[$question_number][$answer] += 1;
                            }
                        }
                    }
                }

                //--- Work our answer group scores ---

                if ($include_scores) {

                    if ($answer_group_type_id) {

                        $highest_score = 0;

                        foreach ($out_results as $question_number => $answers) {


                            if (isset($survey_answer_group_answers[$question_number])) {
                                foreach ($survey_answer_group_answers[$question_number] as $tmp_answer_group_answer) {

                                    if ($answer_group_type['answer_groups'][$tmp_answer_group_answer]['answer_group_score'] > $highest_score) {

                                        $highest_score = $answer_group_type['answer_groups'][$tmp_answer_group_answer]['answer_group_score'];
                                    }
                                }
                            }

                            foreach ($answers as $answer_id => $users) {
                                //If SCORE isn't defined, MAXSCORE can't be either, so pre-define both.
                                if(!array_key_exists("*SCORE*", $out_results[$question_number])){
                                    $out_results[$question_number]['*SCORE*'] = 0;
                                    $out_results[$question_number]['*MAXSCORE*'] = 0;
                                }

                                if(!array_key_exists('*ALL*', $out_results)){
                                    $out_results['*ALL*'] = array();
                                    $out_results['*ALL*']['*SCORE*'] = 0;
                                    $out_results['*ALL*']['*MAXSCORE*'] = 0;
                                }

                                if(array_key_exists("*SCORE*", $out_results['*ALL*'])){

                                }

                                $out_results[$question_number]['*SCORE*'] += ($answer_group_type['answer_groups'][$answer_id]['answer_group_score'] * $users);
                                $out_results[$question_number]['*MAXSCORE*'] += ($highest_score * $users);

                                $out_results['*ALL*']['*SCORE*'] += ($answer_group_type['answer_groups'][$answer_id]['answer_group_score'] * $users);
                                $out_results['*ALL*']['*MAXSCORE*'] += ($highest_score * $users);
                            }
                        }
                    }
                }
            }
        }

        return $out_results;
    }

    /**
     * Survey results
     * @param  array   $survey_id_list
     * @param  array   $org_filters
     * @param  array   $user_type_filter
     * @param  boolean $return_user_info
     * @param  boolean $ignore_restricted_views
     * @param  array   $survey_question_filter
     * @param  array   $date_filters             Array which can contain date_from and/or date_to. These have to be DateTime objects and can be used to limit the results agains the surveyCompletedDate column on thlUserSurvey
     * @param  array   $employment_type_filters
     * @return mixed
     */
    public function survey_raw_results($survey_id_list, $org_filters = array(), $user_type_filter = array(), $return_user_info = false, $ignore_restricted_views = false, $survey_question_filters = array(), array $date_filters = array(), array $employment_type_filters = array())
    {
        // Filters
        $filter_sql = $this->generate_user_filters_sql(
            $org_filters, //Org filters
            $user_type_filter, //User type filter
            $ignore_restricted_views, //Ignore restricted views
            array(), //Job type filters
            $employment_type_filters //Employment type filter
        );

        if (trim($filter_sql) !== "") {
            $filter_sql = ' AND ' . $filter_sql;
        }

        //check for and handle excludes from config
        if (!empty($this->config['survey_settings'][$survey_id_list[0]]['exclude'])){
            $excludes = $this->config['survey_settings'][$survey_id_list[0]]['exclude'];

            if(array_key_exists("usernames", $excludes) && !empty($excludes["usernames"])){
                $filter_sql .= ' AND tblUser.Username NOT IN (\''.implode("','", $excludes["usernames"]).'\')';
            }

            if(array_key_exists("joining_date", $excludes) && !empty($excludes["joining_date"])){
                $joining_date_excludes = $excludes["joining_date"];

                $joining_nulls = array_key_exists("nulls", $joining_date_excludes) && $joining_date_excludes["nulls"] === false ? false : true;

                $joining_from = array_key_exists("from", $joining_date_excludes) ? str_replace("/", "-", $joining_date_excludes["from"]) : false;
                $joining_to = array_key_exists("to", $joining_date_excludes) ? str_replace("/", "-", $joining_date_excludes["to"]) : false;

                $joining_from = $joining_from !== false ? strtotime($joining_from) : false;
                $joining_to = $joining_to !== false ? strtotime($joining_to) : false;

                if($joining_from !== false){
                    $joining_from = date("Y-m-d H:i:s", $joining_from);
                }

                if($joining_to !== false){
                    $joining_to = date("Y-m-d H:i:s", $joining_to);
                }

                if($joining_from !== false && $joining_to !== false){
                    $filter_sql .= ' AND ( (tblUser.joiningDate <=  \''.$joining_from.'\' OR tblUser.joiningDate >=  \''.$joining_to.'\') '.($joining_nulls ? " AND (tblUser.joiningDate IS NOT NULL) )" : " OR (tblUser.joiningDate IS NULL) )");
                }
                else if($joining_from !== false){
                    $filter_sql .= ' AND (tblUser.joiningDate <=  \''.$joining_from.'\''.($joining_nulls ? " AND tblUser.joiningDate IS NOT NULL )" : "OR (tblUser.joiningDate IS NULL) )");
                }
                else if($joining_to !== false){
                    $filter_sql .= ' AND (tblUser.joiningDate >=  \''.$joining_to.'\''.($joining_nulls ? " AND tblUser.joiningDate IS NOT NULL )" : "OR (tblUser.joiningDate IS NULL) )");
                }
            }
        }

        //check for and handle includes from config
        if (!empty($this->config['survey_settings'][$survey_id_list[0]]['include'])){
            $includes = $this->config['survey_settings'][$survey_id_list[0]]['include'];

            if(array_key_exists("usernames", $includes) && !empty($includes["usernames"])){
                $filter_sql .= ' AND tblUser.Username IN (\''.implode("','", $includes["usernames"]).'\')';
            }

            if(array_key_exists("joining_date", $includes) && !empty($includes["joining_date"])){
                $joining_date_includes = $includes["joining_date"];

                $joining_nulls = array_key_exists("nulls", $joining_date_includes) && $joining_date_includes["nulls"] === false ? false : true;

                $joining_from = array_key_exists("from", $joining_date_includes) ? str_replace("/", "-", $joining_date_includes["from"]) : false;
                $joining_to = array_key_exists("to", $joining_date_includes) ? str_replace("/", "-", $joining_date_includes["to"]) : false;

                $joining_from = $joining_from !== false ? strtotime($joining_from) : false;
                $joining_to = $joining_to !== false ? strtotime($joining_to) : false;

               if($joining_from !== false){
                    $joining_from = date("Y-m-d H:i:s", $joining_from);
                }

                if($joining_to !== false){
                    $joining_to = date("Y-m-d H:i:s", $joining_to);
                }

                if($joining_from !== false && $joining_to !== false){
                    $filter_sql .= ' AND ( (tblUser.joiningDate >=  \''.$joining_from.'\' OR tblUser.joiningDate <=  \''.$joining_to.'\') '.($joining_nulls ? " OR (tblUser.joiningDate IS NULL) )" : " AND (tblUser.joiningDate IS NOT NULL)");
                }
                else if($joining_from !== false){
                    $filter_sql .= ' AND ( tblUser.joiningDate >=  \''.$joining_from.'\''.($joining_nulls ? " OR tblUser.joiningDate IS NULL )" : " AND tblUser.joiningDate IS NOT NULL )");
                }
                else if($joining_to !== false){
                    $filter_sql .= ' AND ( tblUser.joiningDate <=  \''.$joining_to.'\''.($joining_nulls ? " OR tblUser.joiningDate IS NULL )" : " AND tblUser.joiningDate IS NOT NULL )");
                }
            }
        }

        $user_info_sql = '';
        // Extra Info
        if ($return_user_info) {

            $user_info_sql = ', tblUserSurvey.SurveyDateSubmitted, tblUser.JoiningDate, tblUser.DOB, tblUser.UserTypeID';

            if ($this->column_exists("tbluser", "gender") === true) {
                $user_info_sql .= ', tblUser.Gender';
            }
        }

        $where = array(
            '(tblUser.tmpExclude = 0 OR tblUser.tmpExclude IS NULL) ' . $filter_sql,
            'SurveyID IN (\'' . implode('\',\'', $survey_id_list) . '\')',
            'surveyStatus = 3'
        );

        //If at least one date filter has been provided.
        if (!empty($date_filters) && (isset($date_filters['date_from']) || isset($date_filters['date_to']))) {

            //Get results after the date from.
            if (isset($date_filters['date_from']) && $date_filters['date_from'] instanceof DateTime) {
                $where[] = 'tblUserSurvey.surveyDateSubmitted >= "' . $this->udb_escape_string($date_filters['date_from']->format('Y-m-d H:i:s')) . '"';
            } elseif (!$date_filters['date_from'] instanceof DateTime) {
                $this->log_error('Invalid survey submitted date from');
            }

            //Results before date to.
            if (isset($date_filters['date_to']) && $date_filters['date_to'] instanceof DateTime) {
                $where[] = 'tblUserSurvey.surveyDateSubmitted <= "' . $this->udb_escape_string($date_filters['date_to']->format('Y-m-d H:i:s')) . '"';
            } elseif (!$date_filters['date_to'] instanceof DateTime) {
                $this->log_error('Invalid survey submitted date to');
            }
        }

        // Run the SQL
        $tmp_query = $this->udb_query('SELECT SurveyAnswers ' . $user_info_sql . ' FROM tblUser JOIN tblUserSurvey ON (tblUserSurvey.UserID = tblUser.UserID) WHERE ' . implode(' AND ', $where));

        $raw_results = array();

        while ($row = $this->udb_fetch_assoc($tmp_query)) {

            $row['SurveyAnswers'] = explode('|', $row['SurveyAnswers']);

            //The first item of the SurveyAnswers value should always be an
            //asterisk, so shift the unneeded marker off the front of the array
            //to leave us only with valid responses.
            array_shift($row['SurveyAnswers']);

            //Answers will either be simple single numeric values or comma
            //separated numeric values to indicate multiple answers.  If a
            //comma separated value is found, strip out all but the first value
            //and coallesce the mulitple answers down to a single choice.  This
            //solution is to work around poor PHP memory management when working
            //with large result sets that are represented as arrays.  This
            //SHOULD be re-written to use a better, more memory efficient data
            //structure but low usage of the problematic feature and time
            //constraints make the coallescing solution below a more preferable
            //solution for the client.
            $row['SurveyAnswers'] = array_map(
                function($answers) {
                    if (strpos($answers, ",") !== false) {
                        return $answers[0];
                    }

                    return $answers;
                },
                $row['SurveyAnswers']
            );

            if (count($row['SurveyAnswers'])) {

                if (is_array($survey_question_filters) && count($survey_question_filters) > 0) {

                    foreach ($survey_question_filters as $question_no => $question_values) {

                        if (isset($row["SurveyAnswers"][$question_no])) {
                            if (!in_array($row["SurveyAnswers"][$question_no], $question_values)) {
                                continue 2;
                            }
                        }
                        else {
                            continue 2;
                        }
                    }
                }

                if (array_key_exists("JoiningDate", $row) && $row['JoiningDate']) {
                    $row['JoiningDate'] = strtotime($row['JoiningDate']);
                }

                if (array_key_exists("DOB", $row) && $row['DOB']) {
                    $tmp_date = date_parse($row['DOB']);
                    $row['BirthYear'] = $tmp_date['year'];
                    unset($row['DOB']);
                }

                if (!empty($row['SurveyDateSubmitted'])) {
                    $row['SurveyDateSubmitted'] = strtotime($row['SurveyDateSubmitted']);
                }
                $raw_results[] = $row;
            }
        }

        return $raw_results;
    }

    /**
     * survey_get_answer_group_answers
     */
    private function survey_get_answer_group_answers($answer_group_type_id) {

        $answer_group_answers = array();

        $tmp_query = $this->udb_query("SELECT survey_id, question_id, answer_number, tblanswer_group.answer_group_id FROM tblanswer_group JOIN tblanswer_group_answers ON (tblanswer_group.answer_group_id = tblanswer_group_answers.answer_group_id) WHERE answer_group_type_id = '" . $answer_group_type_id . "'");

        while ($row = $this->udb_fetch_assoc($tmp_query)) {


            $answer_group_answers[$row['survey_id']][$row['question_id']][$row['answer_number']] = $row['answer_group_id'];
        }

        return $answer_group_answers;
    }

    /**
     * survey_get_answer_group_types
     */
    public function survey_get_answer_group_types() {

        $answer_group_types = array();

        $tmp_query = $this->udb_query(
            'SELECT answer_group_type_id, answer_group_type_label FROM tblanswer_group_type ORDER BY answer_group_type_id ASC'
        );

        while ($row = $this->udb_fetch_assoc($tmp_query)) {

            $answer_groups_query = $this->udb_query(
                'SELECT answer_group_id, answer_group_label, answer_group_colour, answer_group_score FROM tblanswer_group WHERE answer_group_type_id = "' . $row['answer_group_type_id'] . '" ORDER BY answer_group_id ASC'
            );

            $answer_groups = array();

            while ($answer_groups_row = $this->udb_fetch_assoc($answer_groups_query)) {
                $tmp_answer_group_id = $answer_groups_row['answer_group_id'];
                unset($answer_groups_row['answer_group_id']);
                $answer_groups[$tmp_answer_group_id] = $answer_groups_row;
            }

            $answer_group_types[$row['answer_group_type_id']] = array(
                'label' => $row['answer_group_type_label'],
                'answer_groups' => $answer_groups
            );
        }

        return $answer_group_types;
    }

    /**
     * Survey get structure
     */
    public function survey_get_structure($survey_id, $ignore_cache = false, $xml_file = null) {

        if (is_array($survey_id) and $this->array_only_int($survey_id)) {
            $survey_id = $survey_id[0];
        }

        if ($survey_id and is_numeric($survey_id) and $this->customer_id) {

            $apc_key = $this->generate_cache_key("survey_structure", $survey_id);

            if (!$ignore_cache and $questions = apc_fetch($apc_key)) {
                return $questions;
            }
            else {
                if ($xml_file === null) {
                    $xml_file = str_replace('<CUSTOMER_ID>', $this->customer_id, str_replace('<SURVEY_ID>', $survey_id, $this->survey_xml_location));
                }

                if (file_exists($xml_file) and $xml = simplexml_load_file($xml_file)) {

                    $questions = array();
                    $survey_entity_number = 0;
                    $question_number = 0;
                    foreach ($xml->xpath("/survey/controller/*") as $thing) {

                        switch ($thing->getName()) {

                            case "spacer":

                                $questions[$survey_entity_number] = array(
                                    'label' => (string) $thing->spacerText->translate,
                                    'type' => 'spacer'
                                );

                                $survey_entity_number++;
                                break;

                            case "question":

                                $questions[$survey_entity_number] = array(
                                    'label' => (string) $thing->questionText->translate,
                                    'type' => (string) $thing->attributes()->template,
                                    'required' => (string) $thing->attributes()->questionRequired,
                                    'question_number' => $question_number
                                );

                                foreach ($xml->xpath("/survey/panel") as $panel) {

                                    if (strpos("" . $panel->attributes()->params, "" . $thing->attributes()->template . ",") === 0) {

                                        foreach ($panel->xpath("*[starts-with(@varName,'rolloverText')]") as $answer) {

                                            $number = substr($answer->attributes()->varName, 12);
                                            $nodes = $panel->xpath("*[@varName='radio" . $number . "']");
                                            $label = (string) $nodes[0]->translate;

                                            $questions[$survey_entity_number]['answers'][$number] = $label;
                                        }
                                    }
                                }
                                $survey_entity_number++;
                                $question_number++;
                                break;
                        }
                    }

                    apc_store($apc_key, $questions, 14400);
                }
                else {

                    $this->log_error('Could not load XML file');
                }
            }

            return $questions;
        }
        return false;
    }

    /**
     * Survey List
     */
    public function survey_list() {

        if ($this->config['survey_list'] and is_array($this->config['survey_list'])) {
            return $this->config['survey_list'];
        }

        return false;
    }

    /**
     * Survey details
     */
    public function survey_details($survey_group_id) {

        if (!empty($this->config['survey_list'][$survey_group_id])) {

            $survey_details = $this->config['survey_list'][$survey_group_id];

            foreach ($survey_details["reports"] as $key => $val) {
                if (is_array($val)) {
                    if (isset($val["title"]) && $val["title"] !== false) {
                        $this->survey_report_types[$key] = $val["title"];
                    }
                    else {
                        $this->survey_report_types[$key] = $this->default_survey_report_types[$key];
                    }
                }
                else if ($val) {
                    $this->survey_report_types[$key] = $val;
                }
                else {
                    $this->survey_report_types[$key] = $this->default_survey_report_types[$key];
                }
            }

            return $survey_details;
        }


        return false;
    }

//================================================================================================================

    public function survey_set_answer_groups($survey_id, $answer_value_map, $question_filter = false) {

        $survey_structure = $this->survey_get_structure($survey_id);
//print_r($survey_structure);
        foreach ($survey_structure as $question) {
//print_r($question['question_number']);
            if ($question_filter == false or in_array($question['question_number'], $question_filter)) {

                if (is_array($question['answers'])) {

//                    print $question["question_number"] . " " . implode(array_keys($question["answers"])) . "\n";

                    foreach ($question['answers'] as $answer_id => $answer_value) {
//print "in here - $answer_id\n";
                        if (!empty($answer_value_map[$answer_id])) {
                            $sql = "INSERT INTO tblanswer_group_answers (answer_group_id, survey_id, question_id, answer_number) VALUES ('" . $answer_value_map[$answer_id] . "', '" . $survey_id . "', '" . $question['question_number'] . "', '" . $answer_id . "')";
//                            print "$sql\n";
                            $this->udb_query($sql);
                        }
                    }
                }
            }
        }
    }

//================================================================================================================

    /**
     * Survey Get Completed Users
     *
     * This function returns a list of users who have completed
     */
    public function survey_get_completed_users($survey_id, $org_filters = array()) {

        if ($survey_id and is_numeric($survey_id)) {

            $org_filters_sql = $this->generate_user_org_filers_sql($org_filters);

            return $this->mssql_fetch_query('SELECT tblUser.org4ID, tblUser.org3ID, tblUser.org2ID, tblUser.org1ID, tblUser.userName, tblUser.firstName, tblUser.lastName, surveyStartDate, surveyLastVisitedDate, surveyDateSubmitted FROM tblUser LEFT JOIN tblUserSurvey ON (tblUser.UserID = tblUserSurvey.UserID) WHERE tblUserSurvey.surveyID = ' . $survey_id . ' AND ' . $org_filters_sql);
        }
        else {

            return false;
        }
    }

    /**
     * Survey get completions
     */
    public function survey_completion_report($survey_id_list, $org_filters = array(), $group_by_org_level = false, $alert_code = false, $user_type_filter = array(), array $employment_type_filter = array()) {

        $out_array = array();

        if (!is_array($survey_id_list)) {
            $survey_id_list = array($survey_id_list);
        }

        if (!$this->array_only_int($survey_id_list)) {
            return false;
        }

        $user_filters_sql = $this->generate_user_filters_sql(
            $org_filters,
            $user_type_filter,
            false, //ignore restricted views
            array(), //job type filter
            $employment_type_filter
        );

        if ($user_filters_sql) {
            $user_filters_sql = ' AND ' . $user_filters_sql;
        }

        if (!$this->org_level_valid($group_by_org_level)) {
            $group_by_org_level = 4;
        }

        $user_alert_sql = '';
        if ($alert_code) {
            $user_alert_sql = 'JOIN tblUserAlert ON (tblUserAlert.UserID = tblUser.UserID AND alertCode = ' . $alert_code . ')';
        }

        //check for and handle excludes from config
        if (!empty($this->config['survey_settings'][$survey_id_list[0]]['exclude'])){
            $excludes = $this->config['survey_settings'][$survey_id_list[0]]['exclude'];

            if(array_key_exists("usernames", $excludes) && !empty($excludes["usernames"])){
                $user_filters_sql .= ' AND tblUser.Username NOT IN (\''.implode("','", $excludes["usernames"]).'\')';
            }

            if(array_key_exists("joining_date", $excludes) && !empty($excludes["joining_date"])){
                $joining_date_excludes = $excludes["joining_date"];

                $joining_nulls = array_key_exists("nulls", $joining_date_excludes) && $joining_date_excludes["nulls"] === false ? false : true;

                $joining_from = array_key_exists("from", $joining_date_excludes) ? str_replace("/", "-", $joining_date_excludes["from"]) : false;
                $joining_to = array_key_exists("to", $joining_date_excludes) ? str_replace("/", "-", $joining_date_excludes["to"]) : false;

                $joining_from = $joining_from !== false ? strtotime($joining_from) : false;
                $joining_to = $joining_to !== false ? strtotime($joining_to) : false;

               if($joining_from !== false){
                    $joining_from = date("Y-m-d H:i:s", $joining_from);
                }

                if($joining_to !== false){
                    $joining_to = date("Y-m-d H:i:s", $joining_to);
                }

                if($joining_from !== false && $joining_to !== false){
                    $user_filters_sql .= ' AND ( (tblUser.joiningDate <=  \''.$joining_from.'\' OR tblUser.joiningDate >=  \''.$joining_to.'\') '.($joining_nulls ? " AND (tblUser.joiningDate IS NOT NULL) )" : " OR (tblUser.joiningDate IS NULL) )");
                }
                else if($joining_from !== false){
                    $user_filters_sql .= ' AND (tblUser.joiningDate <=  \''.$joining_from.'\''.($joining_nulls ? " AND tblUser.joiningDate IS NOT NULL )" : "OR (tblUser.joiningDate IS NULL) )");
                }
                else if($joining_to !== false){
                    $user_filters_sql .= ' AND (tblUser.joiningDate >=  \''.$joining_to.'\''.($joining_nulls ? " AND tblUser.joiningDate IS NOT NULL )" : "OR (tblUser.joiningDate IS NULL) )");
                }
            }
        }

        //check for and handle includes from config
        if (!empty($this->config['survey_settings'][$survey_id_list[0]]['include'])){
            $includes = $this->config['survey_settings'][$survey_id_list[0]]['include'];

            if(array_key_exists("usernames", $includes) && !empty($includes["usernames"])){
                $user_filters_sql .= ' AND tblUser.Username IN (\''.implode("','", $includes["usernames"]).'\')';
            }

            if(array_key_exists("joining_date", $includes) && !empty($includes["joining_date"])){
                $joining_date_includes = $includes["joining_date"];

                $joining_nulls = array_key_exists("nulls", $joining_date_includes) && $joining_date_includes["nulls"] === false ? false : true;

                $joining_from = array_key_exists("from", $joining_date_includes) ? str_replace("/", "-", $joining_date_includes["from"]) : false;
                $joining_to = array_key_exists("to", $joining_date_includes) ? str_replace("/", "-", $joining_date_includes["to"]) : false;

                $joining_from = $joining_from !== false ? strtotime($joining_from) : false;
                $joining_to = $joining_to !== false ? strtotime($joining_to) : false;

               if($joining_from !== false){
                    $joining_from = date("Y-m-d H:i:s", $joining_from);
                }

                if($joining_to !== false){
                    $joining_to = date("Y-m-d H:i:s", $joining_to);
                }

                if($joining_from !== false && $joining_to !== false){
                    $user_filters_sql .= ' AND ( (tblUser.joiningDate >=  \''.$joining_from.'\' OR tblUser.joiningDate <=  \''.$joining_to.'\') '.($joining_nulls ? " OR (tblUser.joiningDate IS NULL) ) " : " AND (tblUser.joiningDate IS NOT NULL) ) ");
                }
                else if($joining_from !== false){
                    $user_filters_sql .= ' AND ( tblUser.joiningDate >=  \''.$joining_from.'\''.($joining_nulls ? " OR tblUser.joiningDate IS NULL ) " : " AND tblUser.joiningDate IS NOT NULL ) ");
                }
                else if($joining_to !== false){
                    $user_filters_sql .= ' AND ( tblUser.joiningDate <=  \''.$joining_to.'\''.($joining_nulls ? " OR tblUser.joiningDate IS NULL ) " : " AND tblUser.joiningDate IS NOT NULL ) ");
                }
            }
        }

        $sql = 'SELECT ' . $group_by_org_level . ' as OrgLevel, org' . $group_by_org_level . 'ID AS OrgID, (SELECT org' . $group_by_org_level . 'Name FROM tblOrg' . $group_by_org_level . ' WHERE Org' . $group_by_org_level . 'ID = tblUser.org' . $group_by_org_level . 'ID) AS OrgName, (SELECT org' . $group_by_org_level . 'LongName FROM tblOrg' . $group_by_org_level . ' WHERE Org' . $group_by_org_level . 'ID = tblUser.org' . $group_by_org_level . 'ID) AS OrgLongName, COALESCE(SUM(CASE WHEN surveyStatus=3 AND SurveyAnswers IS NOT NULL THEN 1 END), 0) AS UserCompletedCount, COUNT(*) AS UserCount
            FROM tblUser
            ' . $user_alert_sql . '
            JOIN tblSurvey ON (tblSurvey.surveyID IN (' . implode(',', $survey_id_list) . '))
            LEFT JOIN tblUserProfileSurveys ON (tblUser.UserProfileID = tblUserProfileSurveys.UserProfileID AND tblUserProfileSurveys.SurveyID = tblSurvey.surveyID)
            LEFT JOIN tblUserSurvey ON (tblUser.userID = tblUserSurvey.userID AND tblUserSurvey.SurveyID = tblSurvey.surveyID)
            WHERE
            (tblUserProfileSurveys.UserProfileID IS NOT NULL OR tblUserSurvey.SurveyAnswers IS NOT NULL) AND
            tbluser.accountactive = 1 AND
            (tbluser.tmpexclude = 0 OR tbluser.tmpexclude IS NULL)' . $user_filters_sql . '
            GROUP BY org' . $group_by_org_level . 'ID
            ORDER BY (SELECT org' . $group_by_org_level . 'LongName FROM tblOrg' . $group_by_org_level . ' WHERE Org' . $group_by_org_level . 'ID = tblUser.org' . $group_by_org_level . 'ID) ASC';

        return $this->udb_fetch_all($sql);
    }

    /**
     * Survey get completions over time
     */
    /*

      public function survey_get_completions_over_time($survey_id, $org_filters = array(), $group_by_org_level = false){

      $out_array = array();

      if ($survey_id and is_numeric($survey_id)){

      $org_filters_sql = $this->generate_user_org_filers_sql($org_filters);

      if ($group_by_org_level and is_numeric($group_by_org_level)){
      $org_level_group_by_sql = 'org'.$group_by_org_level.'ID, ';
      $org_level_select_sql = 'org'.$group_by_org_level.'ID AS orgID, ';
      }

      $tmp_data = $this->udb_fetch_all('SELECT '.$org_level_select_sql.' YEAR(surveyDateSubmitted) AS YearValue, MONTH(surveyDateSubmitted) AS MonthValue, DAY(surveyDateSubmitted) AS DayValue, COUNT(*) AS UserCount FROM tblUser LEFT JOIN tblUserSurvey ON (tblUser.UserID = tblUserSurvey.UserID) WHERE tblUserSurvey.surveyID = '.$survey_id.' AND surveyDateSubmitted IS NOT NULL AND '.$org_filters_sql.' GROUP BY '.$org_level_group_by_sql.' YEAR(surveyDateSubmitted), MONTH(surveyDateSubmitted), DAY(surveyDateSubmitted) ORDER BY '.$org_level_group_by_sql.'YEAR(surveyDateSubmitted), MONTH(surveyDateSubmitted), DAY(surveyDateSubmitted)');

      if (count($tmp_data) > 0){

      $loop_date = $tmp_data[0]['YearValue'].'-'.$tmp_data[0]['MonthValue'].'-'.$tmp_data[0]['DayValue'];

      $cumulative_org_values = array();

      foreach ($tmp_data as $row){
      $cumulative_org_values[$row['orgID']] += $row['UserCount'];
      $cumulative_org_values['TOTAL'] += $row['UserCount'];

      $completions[$row['orgID']][$row['YearValue'].'-'.str_pad($row['MonthValue'], 2, 0, STR_PAD_LEFT).'-'.str_pad($row['DayValue'], 2, 0, STR_PAD_LEFT)] = $cumulative_org_values[$row['orgID']];
      $completions['TOTAL'][$row['YearValue'].'-'.str_pad($row['MonthValue'], 2, 0, STR_PAD_LEFT).'-'.str_pad($row['DayValue'], 2, 0, STR_PAD_LEFT)] = $cumulative_org_values['TOTAL'];
      }

      unset($tmp_data);
      $out_array = $completions;
     */
    /*
      $date_today = date('Y-m-d');
      $completion_count = 0;

      $org_list = array_keys($org_list);
      $completion_count

      if (strtotime($loop_date) < (time()-86400)){

      do {

      $loop_date = date('Y-m-d', strtotime('+1 day', strtotime($loop_date)));

      foreach ($org_list as $tmp_org){
      $out_array[$tmp_org][$loop_date] += $completions[$tmp_org][$loop_date];
      }

      if (!empty($completions[$loop_date]) and is_numeric($completions[$loop_date])){
      $completion_count += $completions[$loop_date];
      }

      $out_array[] = array_merge(array($loop_date), $completion_count);

      } while ($loop_date != $date_today);

      }
     */
    /*
      }
      }

      return $out_array;

      }
     */

    //-----------------------------------------------------------------

    private function array_only_int($in_array) {

        if (is_array($in_array)) {
            foreach ($in_array as $tmp_value) {
                if (!is_numeric($tmp_value)) {
                    return false;
                }
            }
        }
        else {
            return false;
        }

        return true;
    }

    //=====================================================================
    // LMS LOGGING FUNCTIONS
    //=====================================================================

    /**
     * Gets the last userModuleProgressID or generates a new one if one doesn't exist
     * The returned value is used to launch a module in the Flash LMS
     * @param  int          $course_id      ID of course module belongs to
     * @param  string       $course_version Version of course
     * @param  int          $module_id      ID of module to be launched
     * @param  int|boolean  $user_id        User ID of the user launching the course.  If false, defaults to logged in user
     * @return float|false|null             Returns the userModuleProgressID on success, false on an invalid userID or null on an invalid record.
     */
    public function lms_flash_module_launch($course_id, $course_version, $module_id, $user_id=false){
        if ($user_id === false || !is_numeric($user_id) ){
            $user_id = $this->logged_in_user["UserID"];
        }

        if (!is_numeric($user_id) || !is_numeric($course_id) || !is_numeric($module_id)) {
            return false;
        }

        // Check entry exists in tblUserCourses
        $this->lms_log_course_visit($course_id, $course_version);

        $sql = "SELECT TOP 1 userModuleProgressID FROM tblUserModuleProgress WHERE courseID='".$course_id."' AND moduleID='".$module_id."' AND userID=".$user_id;

        list($id) = $this->udb_fetch_row($this->udb_query($sql));

        if (!$id) {
            $languageID = "en"; //assign en until multilingual support is better integrated with the database

            $sql = "INSERT INTO tblUserModuleProgress (userID, courseID, moduleID, startedDateTime,
                lastVisitedDateTime , AICCLessonStatus, AICCTime, AICCCredit, courseVersion, countryID, languageID)
                values (".$user_id.",".$course_id.",".$module_id.",GetDate(),GetDate(),'i','00:00:00','c',
                '".$course_version."',(SELECT countryShortName FROM tblCountry JOIN tblUser ON tblCountry.countryID = tblUser.countryID WHERE userID=".$user_id."),
                '".$languageID."')";

            if ($this->udb_query($sql)) {
                $id = $this->udb_last_insert_id();
            }
        }

        return $id;
    }

    private function lms_log_user_module_progress_history($user_id, $course_id, $module_id, $refresh_id = null) {
        if ($user_id and $course_id and $module_id and is_numeric($user_id) and is_numeric($course_id) and is_numeric($module_id)) {

            if ($refresh_id === null || !is_numeric($refresh_id)){
                $refresh_id = 'NULL';
            }

            //Map of values to insert from tblUserModulePRogress into
            //tblUserModuleProgressHistory in the format:
            //field to insert into => selected value to insert.
            $inserts = array (
              'userModuleProgressID' => 'userModuleProgressID',
              'userID' => 'userID',
              'courseID' => 'courseID',
              'moduleID' => 'moduleID',
              'startedDateTime' => 'startedDateTime',
              'lastVisitedDateTime' => 'lastVisitedDateTime',
              'quizAttempts' => 'quizAttempts',
              'quizlastVisitedDateTime' => 'quizlastVisitedDateTime',
              'quizTimeSpent' => 'quizTimeSpent',
              'quizPassed' => 'quizPassed',
              'AICCCoreLesson' => 'AICCCoreLesson',
              'AICCCoreLessonItem1' => 'AICCCoreLessonItem1',
              'AICCCoreLessonItem2' => 'AICCCoreLessonItem2',
              'AICCCoreLessonItem3' => 'AICCCoreLessonItem3',
              'AICCCoreLessonItem4' => 'AICCCoreLessonItem4',
              'AICCCoreLessonItem5' => 'AICCCoreLessonItem5',
              'AICCCoreLessonItem6' => 'AICCCoreLessonItem6',
              'AICCCoreLessonItem7' => 'AICCCoreLessonItem7',
              'AICCCoreLessonItem8' => 'AICCCoreLessonItem8',
              'AICCLessonLocation' => 'AICCLessonLocation',
              'AICCLessonStatus' => 'AICCLessonStatus',
              'AICCLessonMode' => 'AICCLessonMode',
              'AICCTime' => 'AICCTime',
              'AICCScore' => 'AICCScore',
              'AICCCredit' => 'AICCCredit',
              'userModuleAccessCounter' => 'userModuleAccessCounter',
              'moduleStatus' => 'moduleStatus',
              'moduleSessionActive' => 'moduleSessionActive',
              'quizPassedDate' => 'quizPassedDate',
              'quizForced' => 'quizForced',
              'Notes' => 'Notes',
              'quizVersion' => 'quizVersion',
              'moduleTxferBy' => 'moduleTxferBy',
              'moduleTxferDate' => 'moduleTxferDate',
              'userAlert' => 'userAlert',
              'courseVersion' => 'courseVersion',
              'countryID' => 'countryID',
              'languageID' => 'languageID',
              'coreExit' => 'coreExit',
              'scormLessonStatus' => 'scormLessonStatus',
              'scormScoreRaw' => 'scormScoreRaw',
              'scormScoreMin' => 'scormScoreMin',
              'scormScoreMax' => 'scormScoreMax',
              'scormTotalTime' => 'scormTotalTime',
              'scormSessionTime' => 'scormSessionTime',
              'comments' => 'comments',
              'suspendData' => 'suspendData',
            );

            if ($this->column_exists("tblUserModuleProgressHistory", "UserCourseRefreshID")){
                $inserts["userCourseRefreshID"] = $refresh_id." as userCourseRefreshID";
            }

            if ($this->column_exists("tblUserModuleProgress", "Grade")){
                $inserts["Grade"] = "Grade";
            }

            $sql = 'INSERT INTO tblUserModuleProgressHistory ('.implode(", ", array_keys($inserts)).')
                SELECT '.implode(", ", $inserts).'
                FROM tblUserModuleProgress
                WHERE
                userID = ' . $user_id . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id;

            return $this->udb_query($sql) === false ? false : true;
        }

        return false;
    }

    private function lms_log_course_visit($course_id, $course_version) {

        $language_id = 'en'; // Force this to "en" for the time being

        if ($this->logged_in_user['UserID'] and is_numeric($this->logged_in_user['UserID']) and $course_id and is_numeric($course_id)) {

            // Check for entry in tblUserCourses based on $course_id and $user_id
            list($user_course_id, $course_status) = $this->udb_fetch_row($this->udb_query('SELECT userCourseID, courseStatus FROM tblUserCourses WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id));

            if (!$user_course_id) {

                $this->udb_query('INSERT INTO tblUserCourses (userID, CourseID, startedDateTime, courseVersion, countryID, languageID, AICCCourseID, courseStatus) VALUES (' . $this->logged_in_user['UserID'] . ', ' . $course_id . ', SYSDATETIME(), \'' . $course_version . '\', (SELECT countryID FROM tblUser WHERE userID = ' . $this->logged_in_user['UserID'] . '), "' . $language_id . '", (SELECT AICCCourseID FROM tblCourse WHERE courseID = ' . $course_id . '), \'i\')');

                /*
                  Create entry in tblUserCourses with fields
                  userID
                  CourseID
                  startedDateTime
                  courseVersion
                  countryID
                  languageID
                  AICCCourseID
                  courseStatus = "i"
                 */
            }
            else{
                //If the course is marked as refreshed, or has no current status,
                //then set the course as in progress again.
                if ($course_status === null || $course_status === 'r') {
                    $course_status = 'i';
                }

                $this->udb_query("UPDATE tblUserCourses SET lastVisitDateTime=GETDATE(), courseStatus='".$course_status."' WHERE courseID=".$course_id." AND userID=".$this->logged_in_user["UserID"]);
            }

            return true;
        }

        return false;
    }

    /**
     * Log Page Visit
     *
     * This function should be run each time a page in a course is visited included pages the start of the quiz.
     *
     * @param int $course_id Course ID from user_course_list().
     * @param string $course_version Course Version from XML file.
     * @param int $module_position Module position from user_course_list().  Be careful NOT to use the module ID but the module position.
     * @param int $item_number This is the item number within the module.  This should be returned by the course class.
     * @param int $page_number This is the page number within the item.  This should be returned by the course class.
     * @param boolean $log_quiz_attempt This should be true if the quiz attempt should be incremented, or false if not
     *
     */
    public function lms_log_page_visit($course_id, $course_version, $module_position, $item_number, $page_number, $log_quiz_attempt) {

        // It's possible this function should run lms_log_item_exit() if we can't find a better way of doing that.

        $language_id = 'en'; // Force this to "en" for the time being

        list($module_id) = $this->udb_fetch_row($this->udb_query('SELECT moduleID FROM tblModule WHERE courseID = \'' . $course_id . '\' AND modulePosition = \'' . $module_position . '\''));

        if ($this->logged_in_user['UserID'] and is_numeric($this->logged_in_user['UserID']) and $course_id and is_numeric($course_id)) {

            // Check entry exists in tblUserCourses
            $this->lms_log_course_visit($course_id, $course_version);

            list($user_module_progress_id, $lesson_location) = $this->udb_fetch_row($this->udb_query('SELECT userModuleProgressID, AICCLessonLocation FROM tblUserModuleProgress WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id));

            if ($user_module_progress_id) {

                //Get the course time spent
                $courseTimeSpent = $this->course_time_spent($course_id, $this->logged_in_user['UserID']);

                //If a valid course time spent is returned, use the calcualtedTime (based on tblUserModuleProgress.AICCTime) to update the courseTimeSpent
                if (!empty($courseTimeSpent) and is_numeric($courseTimeSpent["calculatedTime"])) {
                    $this->udb_query('UPDATE tblUserCourses SET lastVisitDateTime = SYSDATETIME(), courseTimeSpent = \'' . $this->seconds_to_time($courseTimeSpent["calculatedTime"]) . '\', courseForced=NULL, courseForcedBy=NULL WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . '');
                }

                //If we don't have a lesson location, or the location is invalid,
                //default to a sane default lesson location value.
                if ($lesson_location === null || preg_match("/^\d{2,},(?:\d,?)+$/", $lesson_location) !== 1 ) {
                    //Default to fill our lesson location with 9 items worth of
                    //spaces.
                    $fill_amount = 9;

                    //If we have a numeric item number, then use that if it's
                    //greater than our existing fill amount.
                    if (is_numeric($item_number)){
                        $fill_amount = max($item_number, $fill_amount);
                    }

                    //Fill the array of place holder lesson locations.
                    $lesson_location = array_fill(0, $fill_amount, "0");

                    ///Finally glue it all togeter into a valid lesson location
                    //string with a format of approximately: 00,0,0,0,0,0,0,0,0,0
                    $lesson_location = "00,".implode(",",$lesson_location);
                }

                $lesson_location_bits = explode(',', $lesson_location);

                //If we don't currently have a value for the item number in our
                //location string, or the item hasn't been started, then update
                //the value to the in progress value, 1.
                if (!isset($lesson_location_bits[$item_number]) || $lesson_location_bits[$item_number] === '0') {
                    $lesson_location_bits[$item_number] = 1;
                }

                array_shift($lesson_location_bits);
                array_unshift($lesson_location_bits, $item_number . $page_number);

                $lesson_location = implode(',', $lesson_location_bits);

                $this->lms_log_user_module_progress_history($this->logged_in_user['UserID'], $course_id, $module_id);
                $this->udb_query('UPDATE tblUserModuleProgress SET AICCLessonLocation = \'' . $lesson_location . '\', lastVisitedDateTime=SYSDATETIME(), moduleForced=NULL, moduleForcedBy=NULL WHERE userModuleProgressID = ' . $user_module_progress_id);

                /*
                  Update the following fields:
                  tblUserCourses.lastVisitDateTime
                  tblUserCourses.courseTimeSpent (sum of individual module durations)
                  tblUserModuleProgress.AICCLessonLocation (Change the first comma delimited value to the current item and page.  Also set this item in the list to 1 if it's currently set to 0 so say we've started it)
                 */
            }
            else {

                $lesson_location = "00,0,0,0,0,0,0,0,0,0";

                $lesson_location_bits = explode(',', $lesson_location);

                if ($lesson_location_bits[$item_number] == '0') {
                    $lesson_location_bits[$item_number] = 1;
                }

                array_shift($lesson_location_bits);

                array_unshift($lesson_location_bits, $item_number . $page_number);

                $lesson_location = implode(',', $lesson_location_bits);

                $this->udb_query('INSERT INTO tblUserModuleProgress (userID, CourseID, ModuleID, startedDateTime, courseVersion, countryID, languageID, AICCLessonStatus, AICCLessonLocation) VALUES (' . $this->logged_in_user['UserID'] . ', ' . $course_id . ', ' . $module_id . ', SYSDATETIME(), \'' . $course_version . '\', (SELECT countryID FROM tblUser WHERE userID = ' . $this->logged_in_user['UserID'] . '), \'' . $language_id . '\', \'i\', \''.$lesson_location.'\')');

                /*
                  Create entry in tblUserModuleProgress with fields
                  userModuleProgressID
                  userID
                  CourseID
                  ModuleID
                  startedDateTime
                  courseVersion
                  countryID
                  languageID
                  AICCLessonStatus = "i"
                  AICCLessonLocation
                 */
            }

            //If we should log this as a quiz attempt, increment the quizAttempts and make sure the course is set as in progress
            if ($log_quiz_attempt) {
                $this->udb_query('UPDATE tblUserModuleProgress SET quizAttempts = COALESCE(quizAttempts+1, 1), quizLastVisitedDateTime=GETDATE(), AICCScore=0  WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id);

                //If this is a quiz attempt, we should set the course status to in progress
                $this->udb_query('UPDATE tblUserCourses SET courseStatus="i" WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id);
            }


            return true;
        }

        return false;
    }

    /**
     * Log Page Exit
     *
     * This function should be run each time a page is exited using AJAX on the "Continue" button.  It also needs to be run when the quiz is exited in the same way.  $item_completed should only be set for a quiz if the quiz was passed.
     *
     * @param int $course_id Course ID from user_course_list().
     * @param int $module_id Module ID from user_course_list().
     * @param int $item_number This is the item number within the module.  This should be returned by the course class.
     * @param boolean $item_is_quiz This should be TRUE if this item is a quiz and FALSE if it is not.
     * @param boolean $item_completed This should be TRUE if this item is now completed.
     * @param int $item_count Total items in a module (used to calculate if the module is completed)
     * @param boolean $time_taken The number of seconds the user spent on this page.
     * @param boolean $quiz_score Quiz score (Required if this was a quiz).
     * @param mixed $quiz_answers Quiz answers to be tracked for either a tracked Quiz or Level Interaction:
     *                            For a tracked Quiz, must be a comma delimited string denoting correct or incorrect
     *                            quiz answers.
     *                            For a Level Interaction, must be an array indexec by natural question number and
     *                            containing the answer index selected and an array of indiciator identifiers => score
     *                            pairings.
     * @param null|string $quiz_version Quiz version identifier or null if not provided.
     * @return boolean
     */
    public function lms_log_page_exit($course_id, $module_id, $item_number, $item_is_quiz, $item_completed, $item_count, $time_taken, $quiz_score = false, $quiz_answers = null, $quiz_version = null)
    {

        if ($this->logged_in_user['UserID'] and is_numeric($this->logged_in_user['UserID']) and $course_id and is_numeric($course_id)) {

            $qry = $this->udb_query('SELECT * FROM tblUserCourses WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id);

            $current_course_details = $this->udb_fetch_assoc($qry);

            $set_sql = array(
                'lastVisitedDateTime' => 'lastVisitedDateTime = SYSDATETIME()'
            );

            list($aicc_time, $quiz_time, $lesson_location, $lesson_status) = $this->udb_fetch_row($this->udb_query('SELECT (SUBSTRING(AICCTime, 1, (LEN(AICCTime)-6))*3600)+(SUBSTRING(AICCTime, (LEN(AICCTime)-4), 2)*60)+(SUBSTRING(AICCTime, (LEN(AICCTime)-1), 2)), (SUBSTRING(quizTimeSpent, 1, (LEN(quizTimeSpent)-6))*3600)+(SUBSTRING(quizTimeSpent, (LEN(quizTimeSpent)-4), 2)*60)+(SUBSTRING(quizTimeSpent, (LEN(quizTimeSpent)-1), 2)), AICCLessonLocation, AICCLessonStatus FROM tblUserModuleProgress WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id));

            //--- Time spent ---

            if (!is_numeric($aicc_time)) {

                $aicc_time = 0;
            }

            $set_sql['AICCTime'] = 'AICCTime = \'' . $this->seconds_to_time($aicc_time + $time_taken) . '\'';

            //Process Lesson Locations
            if ($lesson_location === null) {
                //Default to fill our lesson location with 9 items worth of
                //spaces.
                $fill_amount = 9;

                //If we have a numeric item count, then use that if it's
                //greater than our existing fill amount.
                if (is_numeric($item_count)){
                    $fill_amount = max($item_count, $fill_amount);
                }

                //Fill the array of place holder lesson locations.
                $lesson_location = array_fill(0, $fill_amount, "0");

                ///Finally glue it all togeter into a valid lesson location
                //string with a format of approximately: 00,0,0,0,0,0,0,0,0,0
                $lesson_location = "00,".implode(",",$lesson_location);
            }

            $lesson_location_bits = explode(',', $lesson_location);

            if ($item_completed) {
                $lesson_location_bits[$item_number] = '2';
            } elseif ($item_is_quiz) {
                //If the item is incomplete and a quiz, the item status needs
                //resetting to incomplete to ensure the course cannot be marked
                //as completed without the user actually passing the quiz.
                $lesson_location_bits[$item_number] = '1';
            }

            $lesson_location = implode(',', $lesson_location_bits);
            $set_sql['AICCLessonLocation'] = 'AICCLessonLocation = \'' . $lesson_location . '\'';

            //--- Lesson Status ---

            if ($item_completed) {
                $module_completed = true;

                for ($i = 1; $i <= $item_count; $i++) {
                    if (!isset($lesson_location_bits[$i]) || $lesson_location_bits[$i] !== "2") {
                        $module_completed = false;
                    }
                }

                if ($module_completed) {
                    $set_sql['AICCLessonStatus'] = 'AICCLessonStatus = \'c\'';
                } elseif ($lesson_status === "r" && !$item_is_quiz) {
                    $set_sql['AICCLessonStatus'] = 'AICCLessonStatus = \'i\'';
                } elseif ($item_is_quiz) {
                    $set_sql['AICCLessonStatus'] = 'AICCLessonStatus = \'p\'';
                }
            } else {
                if ($lesson_status === "r" && !$item_is_quiz) {
                    $set_sql['AICCLessonStatus'] = 'AICCLessonStatus = \'i\'';
                } elseif ($item_is_quiz) {
                    $set_sql['AICCLessonStatus'] = 'AICCLessonStatus = \'f\'';
                }
            }

            //--- Quiz Stuff ---

            if ($item_is_quiz) {

                //--- Lesson Status & Quiz Passed if failed ---

                if (is_string($quiz_answers)) {
                    //Set the quiz answers for per question tracking.
                    $set_sql['AICCCoreLessonItem8'] = "AICCCoreLessonItem8 = '".$this->udb_escape_string($quiz_answers)."'";
                } elseif (is_array($quiz_answers)) {
                    //Copy the existing level interaction data into the history table.
                    $this->lms_log_level_interaction_tracking_history(
                        $this->logged_in_user["UserID"],
                        $course_id,
                        $module_id
                    );

                    //Log the level interaction answers for each question.
                    foreach ($quiz_answers as $question_number => $answer) {
                        $this->lms_log_level_interaction_tracking(
                            $this->logged_in_user["UserID"],
                            $course_id,
                            $module_id,
                            $question_number,
                            $answer["answer"],
                            $answer["scores"]
                        );
                    }
                }

                //Set the quiz lastVisitDateTime
                $set_sql['quizLastVisitedDateTime'] = "quizLastVisitedDateTime = GETDATE()";

                //--- Passed Date / Status ---

                if ($item_completed) {
                    $set_sql['quizPassedDate'] = 'quizPassedDate = SYSDATETIME()';
                    $set_sql['quizPassed'] = 'quizPassed = 1';
                } else {
                    $set_sql['quizPassedDate'] = 'quizPassedDate = null';
                    $set_sql['quizPassed'] = 'quizPassed = 0';
                }

                //--- Quiz Time Spent ---

                if (!is_numeric($quiz_time)) {
                    $quiz_time = 0;
                }

                $set_sql['quizTimeSpent'] = 'quizTimeSpent = \'' . $this->seconds_to_time($quiz_time + $time_taken) . '\'';

                //--- Quiz Score ---

                $set_sql['AICCScore'] = 'AICCScore = \'' . $quiz_score . '\'';

                //--- Quiz Version ---
                if ($quiz_version === null) {
                    $set_sql['quizVersion'] = 'quizVersion = NULL';
                } else {
                    $set_sql['quizVersion'] = 'quizVersion = \''.$quiz_version.'\'';
                }

            }

            //--------------------------------------------------


            $this->lms_log_user_module_progress_history($this->logged_in_user['UserID'], $course_id, $module_id);

            $this->udb_query('UPDATE tblUserModuleProgress SET ' . implode(', ', $set_sql) . ' WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id);

            //Get the course time spent so far
            $courseTimeSpent = $this->course_time_spent($course_id, $this->logged_in_user['UserID']);

            //If a valid course time spent is returned, use the calcualtedTime (based on tblUserModuleProgress.AICCTime) to update the courseTimeSpent
            if (!empty($courseTimeSpent) and is_numeric($courseTimeSpent["calculatedTime"])) {
                $this->udb_query('UPDATE tblUserCourses SET lastVisitDateTime = SYSDATETIME(), courseTimeSpent = \'' . $this->seconds_to_time($courseTimeSpent["calculatedTime"]) . '\', courseForced=NULL, courseForcedBy=NULL WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . '');
            }

            //If the item and module are complete, then check to see if all the modules in the course are completed
            //and update tblUserCourses accordingly.
            if ($item_completed && $module_completed) {
                list($modules_completed_count) = $this->udb_fetch_row($this->udb_query("SELECT COUNT(*) FROM tblUserModuleProgress WHERE AICCLessonStatus = 'c' AND userID = " . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id));
                list($modules_count) = $this->udb_fetch_row($this->udb_query('SELECT noModules FROM tblCourse WHERE courseID = ' . $course_id));

                if ($modules_completed_count >= $modules_count && $current_course_details['courseStatus'] !== 'c') {

                    $update_course_sql = array(
                        'courseStatus = \'c\''
                    );

                    //If we support courseFirstCompletedDate and the field is not already populated, then populate it.
                    if (array_key_exists('courseFirstCompletedDate', $current_course_details) && $current_course_details['courseFirstCompletedDate'] === null) {
                        $update_course_sql[] = 'courseFirstCompletedDate = GETDATE()';
                    }

                    if (array_key_exists('courseLastCompletedDate', $current_course_details)) {
                        $update_course_sql[] = 'courseLastCompletedDate = GETDATE()';
                    }

                    $this->udb_query('UPDATE tblUserCourses SET ' . implode(', ', $update_course_sql) . '  WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id);
                }

            }

            return true;
        }

        return false;
    }

    /**
     * Logs tracking information for the logged in user for the given course
     * and module's tracked level interaction.
     * @param int $user_id ID of user to log for.
     * @param int $course_id ID of course to log against.
     * @param int $module_id ID of module to log against.
     * @param int $question_no Natural question number, i.e. 1 based index.
     * @param int $answer_idx Zero based index of the selected answer.
     * @param array $scores Array of score weightings with the structure:
     *                      $indicator_identifer => $weight.
     * @return boolean
     */
    public function lms_log_level_interaction_tracking($user_id, $course_id, $module_id, $question_no, $answer_idx, array $scores)
    {
        //Validate our inputs and return false if they're invalid.
        if (!is_numeric($user_id) || !is_numeric($course_id) || !is_numeric($module_id) || !is_numeric($question_no)) {
            $this->log_error("Invalid userID, courseID, moduleID or questionNo given for level interaction tracking");
            return false;
        }

        //Check to see relevant tracking table exists in the current database
        //and return false if not.
        if (false === $this->table_exists("tblUserLevelIndicatorAnswers")) {
            $msg = sprintf(
                "tblUserLevelIndicatorAnswers does not exist for client %s",
                $this->customer_id
            );

            $this->log_error($msg);
            return false;
        }

        $existing_tracking_sql = sprintf(
            "SELECT levelIndicatorAnswerID, indicatorIdentifier FROM tblUserLevelIndicatorAnswers WHERE userID = %d AND courseID = %s AND moduleID = %d AND questionNo = %d",
            $this->logged_in_user["UserID"],
            $course_id,
            $module_id,
            $question_no
        );

        $existing_tracking_qry = $this->udb_query($existing_tracking_sql);

        $existing_tracking = array();

        while ($row = $this->udb_fetch_assoc($existing_tracking_qry)) {
            $existing_tracking[$row["indicatorIdentifier"]] = $row["levelIndicatorAnswerID"];
        }

        foreach ($scores as $identifier => $score) {
            if (array_key_exists($identifier, $existing_tracking)) {
                $sql = sprintf(
                    "UPDATE tblUserLevelIndicatorAnswers SET answerIndex=%d, answerWeight=%d, answerDateTime=SYSDATETIME() WHERE levelIndicatorAnswerID = %d",
                    $answer_idx,
                    $score,
                    $existing_tracking[$identifier]
                );

            } else {
                $insert_mapping = array(
                    "userID" => $this->logged_in_user["UserID"],
                    "courseID" => $course_id,
                    "moduleID" => $module_id,
                    "questionNo" => $question_no,
                    "answerDateTime" => "SYSDATETIME()",
                    "indicatorIdentifier" => "'".$this->udb_escape_string($identifier)."'",
                    "answerIndex" => $answer_idx,
                    "answerWeight" => intval($score)
                );

                $sql = sprintf(
                    "INSERT INTO tblUserLevelIndicatorAnswers (%s) VALUES (%s)",
                    implode(",", array_keys($insert_mapping)),
                    implode(",", $insert_mapping)
                );
            }

            if ($this->udb_query($sql) === false) {
                $msg = sprintf(
                    "Unable to set tblUserLevelIndicatorAnswers tracking for question number %d, indicator %s",
                    $question_no,
                    $identifier
                );

                $this->log_error($msg);
            }
        }

        return true;
    }

    /**
     * Log historic level interaction tracking.
     * @param int $user_id User ID to log historic data for.
     * @param int $course_id Course ID to log historic data against.
     * @param int $module_id Module ID to log historic data against.
     * @return boolean
     */
    public function lms_log_level_interaction_tracking_history($user_id, $course_id, $module_id) {

        //Validate our inputs.
        if (!is_numeric($user_id) || !is_numeric($course_id) || !is_numeric($module_id)) {
            $this->log_error("Invalid userID, courseID or moduleID given for historic level interaction tracking");
            return false;
        }

        //Ensure the history table has been created for this client database.
        if (false === $this->table_exists("tblUserLevelIndicatorAnswersHistory")) {
            $msg = sprintf(
                "tblUserLevelIndicatorAnswersHistory does not exist for client %s",
                $this->customer_id
            );

            $this->log_error($msg);
            return false;
        }

        //Map of values to insert from tblUserLevelIndicatorAnswers into
        //tblUserLevelIndicatorAnswersHistory in the format:
        //field to insert into => selected value to insert.
        $inserts = array (
            "levelIndicatorAnswerID" => "levelIndicatorAnswerID",
            "userID" => "userID",
            "courseID" => "courseID",
            "moduleID" => "moduleID",
            "answerDateTime" => "answerDateTime",
            "questionNo" => "questionNo",
            "indicatorIdentifier" => "indicatorIdentifier",
            "answerIndex" => "answerIndex",
            "answerWeight" => "answerWeight"
        );

        $sql = sprintf(
            "INSERT INTO tblUserLevelIndicatorAnswersHistory (%s) SELECT %s FROM tblUserLevelIndicatorAnswers WHERE userID=%d AND courseID=%d AND moduleID=%d",
            implode(",", array_keys($inserts)),
            implode(",", $inserts),
            $user_id,
            $course_id,
            $module_id
        );

        return $this->udb_query($sql) === false ? false : true;
    }

    //==========================
    // SCORM FUNCTIONS
    //==========================

    /**
     * Returns an array of SCORM related user module progress data.
     * @param int $course_id Numeric courseID.
     * @param int $module_id Numeric moduleID.
     * @param null|int $user_id Numeric userID.  If null given, defaults to
     *                          logged in user if available.
     * @return array|boolean Returns an array of user module data on success or
     *                       false on parameter error.
     */
    public function scorm_user_module_progress($course_id, $module_id, $user_id = null)
    {
        //If a userID has not been provided, check to see if we have a logged in
        //user and use their userID.
        if ($user_id === null) {
            if ($this->logged_in_user !== false && isset($this->logged_in_user['UserID'])) {
                $user_id = $this->logged_in_user['UserID'];
            }
        }

        //If any of our parameters are not numeric, log the error and return false.
        if (!is_numeric($course_id) || !is_numeric($module_id) || !is_numeric($user_id)) {

            if (!is_numeric($course_id)) {
                $this->log_error('Invalid courseID given in scorm_user_module_progress');
            }

            if (!is_numeric($module_id)) {
                $this->log_error('Invalid moduleID given in scorm_user_module_progress');
            }

            if (!is_numeric($user_id)) {
                $this->log_error('Invalid userID given in scorm_user_module_progress');
            }

            return false;
        }

        $select_parts = array(
            'tblUserModuleProgress.AICCCredit',
            'tblUserModuleProgress.coreExit',
            'tblUserModuleProgress.AICCLessonLocation',
            'tblUserModuleProgress.AICCLessonMode',
            'tblUserModuleProgress.scormLessonStatus',
            'tblUserModuleProgress.scormScoreRaw',
            'tblUserModuleProgress.scormScoreMin',
            'tblUserModuleProgress.scormScoreMax',
            'tblUserModuleProgress.scormTotalTime',
            'tblUserModuleProgress.comments',
            'CAST (tblUserModuleProgress.suspendData AS TEXT) AS suspendData',
            'tblModule.commentsFromLMS',
            'tblModule.launchData',
            'tblModule.AICCMasteryScore',
            'tblModule.scormMaxTimeAllowed',
            'tblModule.scormTimeLimitAction',
        );

        $from_parts = array(
            'tblUserModuleProgress',
            'JOIN tblModule ON tblModule.moduleID = tblUserModuleProgress.moduleID'
        );

        $where_parts = array(
            'tblUserModuleProgress.userID = '.$user_id,
            'tblUserModuleProgress.moduleID = '.$module_id,
            'tblUserModuleProgress.courseID = '.$course_id
        );

        $sql = sprintf(
            'SELECT %s FROM %s WHERE %s',
            implode(',', $select_parts),
            implode(' ', $from_parts),
            implode(' AND ', $where_parts)
        );

        $qry = $this->udb_query($sql);

        if ($qry !== false) {
            return $this->udb_fetch_assoc($qry);
        } else {
            return false;
        }
    }


    /**
     * Log user module progress from a SCORM module.
     * @param int $course_id Numeric courseID.
     * @param string $course_version Course version.
     * @param int $module_id Numeric moduleID.
     * @param array $fields Array of key => value pairs to set in the database.
     * @return boolean
     */
    public function scorm_log_user_module_progress($course_id, $course_version, $module_id, $fields)
    {
        if ($this->logged_in_user === false || !isset($this->logged_in_user['UserID'])) {
            return false;
        }

        if (!is_numeric($course_id) || !is_numeric($module_id)) {
            return false;
        }

        $this->lms_log_course_visit($course_id, $course_version);

        list($user_module_progress_id, $aicc_lesson_status) = $this->udb_fetch_row($this->udb_query('SELECT userModuleProgressID, AICCLessonStatus FROM tblUserModuleProgress WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . ' AND moduleID = ' . $module_id));

        $do_update = $aicc_lesson_status !== 'c';

        //If we have a userModuleProgressID then update the historic records.
        //Otherwise, insert a new record into tblUserModuleProgress.
        if ($user_module_progress_id !== null) {
            $this->lms_log_user_module_progress_history($this->logged_in_user['UserID'], $course_id, $module_id);
        } else {

            $sql = sprintf(
                'INSERT INTO tblUserModuleProgress (userID, CourseID, ModuleID, startedDateTime, courseVersion, countryID, languageID, AICCLessonStatus, AICCLessonLocation) VALUES (%s, %s, %s, SYSDATETIME(), "%s", (SELECT countryID FROM tblUser WHERE userID = %s), "%s", "i", "%s")',
                $this->logged_in_user['UserID'], //User ID
                $course_id, //Course ID
                $module_id, //Module ID
                $course_version, //Course Version
                $this->logged_in_user['UserID'], //Lookup Country ID based on user ID
                'en', //Language ID
                '' //AICC Lesson Location
            );

            $qry = $this->udb_query($sql);

            if ($qry === false) {
                return false;
            }
        }

        $update_parts = array();

        if (array_key_exists('cmi_core_total_time', $fields)) {
            $total_time = $this->time_to_seconds($fields['cmi_core_total_time']);
        } else {
            list($total_time) = $this->udb_fetch_row($this->udb_query('SELECT AICCTime FROM tblUserModuleProgress WHERE userID = '.$this->logged_in_user['UserID'].' AND courseID = '.$course_id.' AND moduleID = '.$module_id));

            if ($total_time === null || $total_time === '') {
                $total_time = 0;
            } else {
                $total_time = $this->time_to_seconds($total_time);
            }
        }

        if (array_key_exists('cmi_core_session_time', $fields)) {
            $session_time = $this->time_to_seconds($fields['cmi_core_session_time']);
        } else {
            $session_time = 0;
        }

        $combined_time = $total_time + $session_time;
        $combined_time = $this->seconds_to_time($combined_time);
        $session_time = $this->seconds_to_time($session_time);

        $update_parts[] = sprintf('AICCTime = \'%s\'', $this->udb_escape_string($combined_time));
        $update_parts[] = 'lastVisitedDateTime = GETDATE()';

        if ($do_update) {
            $update_parts[] = sprintf('scormTotalTime = \'%s\'', $this->udb_escape_string($combined_time));
            $update_parts[] = sprintf('scormSessionTime = \'%s\'', $this->udb_escape_string($session_time));

            if (array_key_exists('cmi_core_score_raw', $fields)) {
                if (is_numeric($fields['cmi_core_score_raw'])) {
                    $score = round(floatval($fields['cmi_core_score_raw']));
                    $update_parts[] = sprintf('scormScoreRaw = \'%s\'', $this->udb_escape_string($score));
                    $update_parts[] = sprintf('AICCScore = \'%s\'', $this->udb_escape_string($score));

                    if ($score > 0) {
                        $update_parts[] = 'quizAttempts = 1';
                    }
                }
            }

            if (array_key_exists('cmi_core_score_min', $fields)) {
                if (is_numeric($fields['cmi_core_score_min'])) {
                    $score = round(floatval($fields['cmi_core_score_min']));
                    $update_parts[] = sprintf('scormScoreMin = \'%s\'', $this->udb_escape_string($score));
                }
            }

            if (array_key_exists('cmi_core_score_max', $fields)) {
                if (is_numeric($fields['cmi_core_score_max'])) {
                    $score = round(floatval($fields['cmi_core_score_max']));
                    $update_parts[] = sprintf('scormScoreMax = \'%s\'', $this->udb_escape_string($score));
                }
            }

            if (array_key_exists('cmi_suspend_data', $fields)) {
                $value = $fields['cmi_suspend_data'];
                if ($value === '') {
                    $update_parts[] = 'suspendData = null';
                } else {
                    $update_parts[] = sprintf('suspendData = \'%s\'', $this->udb_escape_string($value));
                }
            }

            if (array_key_exists('cmi_core_lesson_location', $fields)) {
                $value = $fields['cmi_core_lesson_location'];
                if ($value === '') {
                    $update_parts[] = 'AICCLessonLocation = null';
                } else {
                    $update_parts[] = sprintf('AICCLessonLocation = \'%s\'', $this->udb_escape_string($value));
                }
            }

            if (array_key_exists('cmi_core_lesson_status', $fields)) {
                $lesson_status = 'i';

                switch ($fields['cmi_core_lesson_status']) {
                case 'passed':
                case 'completed':
                    $lesson_status = 'c';
                    break;
                case 'failed':
                    $lesson_status = 'f';
                case 'incomplete':
                case 'browsed':
                case 'not attempted':
                default:
                    $lesson_status = 'i';
                    break;
                }

                $update_parts[] = sprintf('AICCLessonStatus = \'%s\'', $this->udb_escape_string($lesson_status));
                $update_parts[] = sprintf('scormLessonStatus = \'%s\'', $this->udb_escape_string($fields['cmi_core_lesson_status']));
            }

            if (array_key_exists('cmi_core_exit', $fields)) {
                $value = $fields['cmi_core_exit'];
                if ($value === '') {
                    $update_parts[] = 'coreExit = null';
                } else {
                    $update_parts[] = sprintf('coreExit = \'%s\'', $this->udb_escape_string($value));
                }
            }

            if (array_key_exists('cmi_comments', $fields)) {
                $value = $fields['cmi_comments'];
                if ($value === '') {
                    $update_parts[] = 'comments = null';
                } else {
                    $update_parts[] = sprintf('comments = \'%s\'', $this->udb_escape_string($value));
                }
            }
        }

        $sql = sprintf(
            'UPDATE tblUserModuleProgress SET %s WHERE userID = %s AND courseID = %s AND moduleID = %s',
            implode(', ', $update_parts),
            $this->logged_in_user['UserID'],
            $course_id,
            $module_id
        );

        $qry = $this->udb_query($sql);

        //Get the course time spent so far
        $courseTimeSpent = $this->course_time_spent($course_id, $this->logged_in_user['UserID']);

        //If a valid course time spent is returned, use the calcualtedTime (based on tblUserModuleProgress.AICCTime) to update the courseTimeSpent
        if (!empty($courseTimeSpent) and is_numeric($courseTimeSpent["calculatedTime"])) {
            $this->udb_query('UPDATE tblUserCourses SET lastVisitDateTime = SYSDATETIME(), courseTimeSpent = \'' . $this->seconds_to_time($courseTimeSpent["calculatedTime"]) . '\', courseForced=NULL, courseForcedBy=NULL WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id . '');
        }

        list($modules_completed_count) = $this->udb_fetch_row($this->udb_query("SELECT COUNT(*) FROM tblUserModuleProgress WHERE AICCLessonStatus = 'c' AND userID = " . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id));
        list($modules_count) = $this->udb_fetch_row($this->udb_query('SELECT noModules FROM tblCourse WHERE courseID = ' . $course_id));

        if ($modules_completed_count >= $modules_count) {
            $this->udb_query('UPDATE tblUserCourses SET courseStatus = \'c\' WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id);
        } elseif ($do_update) {
            $this->udb_query('UPDATE tblUserCourses SET courseStatus = \'i\' WHERE userID = ' . $this->logged_in_user['UserID'] . ' AND courseID = ' . $course_id);
        }

        return $qry === false ? false : true;
    }

    //=====================================================================
    // COURSE FUNCTIONS
    //=====================================================================

    /**
     * Course List
     *
     * This function returns a list of courses.
     *
     */
    public function course_list($include_inactive = false) {

        $select_parts = array(
            'courseid',
            'priority',
            'AICCcourseTitle',
            'AICCCourseID',
            'courseSeriesID',
            'courseShortTitle',
            'altCourseID',
            'behaviourType',
            'certificateTemplate'
        );

        if ($this->column_exists('tblCourse', 'courseTypeID')) {
            $select_parts[] = 'courseTypeID';
        } else {
            $select_parts[] = 'NULL AS courseTypeID';
        }

        if (!$include_inactive) {
            $sql = 'SELECT %s FROM tblCourse WHERE availability=1 ORDER BY priority';
        } else {
            $sql = 'SELECT %s FROM tblCourse ORDER BY priority';
        }

        $sql = sprintf(
            $sql,
            implode(',', $select_parts)
        );

        return $this->udb_fetch_all($sql);
    }

    /**
     * Returns a list of user profiles that have the given course available to them
     * @param  int $course_id
     * @return array
     */
    public function course_user_profile_list($course_id){
        $result = array();

        if(is_numeric($course_id)){
            $course_id = intval($course_id);

            $sql = "SELECT userProfileID FROM tblUserProfileCourses WHERE courseID = ".$course_id;
            $qry = $this->udb_query($sql);

            while( $row = $this->udb_fetch_row($qry) ){
                $result[] = $row[0];
            }
        }

        return $result;
    }

    /**
     * Returns a list of course series details
     * @return array
     */
    public function course_series_list(){
        $series = array();

        $sql = "SELECT courseSeriesID, courseSeriesInfo, courseSeriesTitle, courseSeriesURL FROM tblCourseSeries";
        $qry = $this->udb_query($sql);

        while($row = $this->udb_fetch_assoc($qry)){
            $series[$row["courseSeriesID"]] = $row;
        }

        return $series;
    }

    /**
     * Return a list of course types
     * @param boolean active_only Denotes whether to return only active course types.
     * @return array
     */
    public function course_type_list($active_only = true){
        $course_types = array();

        if ($this->table_exists('tblCourseType')) {
            $sql = 'SELECT courseTypeID, courseTypeName, courseTypeDescription, permissionActive, displayOrder, displayDefault FROM tblCourseType ';

            if ($active_only === true) {
                $sql .=  ' WHERE permissionActive=1 ORDER by displayOrder';
            } else {
                $sql .= ' ORDER by displayOrder';
            }

            $qry = $this->udb_query($sql);

            while ($row = $this->udb_fetch_assoc($qry)) {
                $course_types[$row['courseTypeID']] = $row;
            }
        }

        return $course_types;
    }

    /**
     * Return the details for a single course type.
     * @param int $courseTypeID
     * @return mixed  Return an array of Course Type details or false on if an
     *                invalud or non-existent course type ID is given.
     */
    public function course_type($course_type_id){
        $course_type = array();

        if (!is_numeric($course_type_id)) {
            $this->log_error('Non numeric courseTypeID given to course_type method');
            return false;
        }

        if ($this->table_exists('tblCourseType')) {
            $sql = sprintf(
                'SELECT courseTypeID, courseTypeName, courseTypeDescription, permissionActive, displayOrder, displayDefault FROM tblCourseType WHERE courseTypeID = %s',
                $this->udb_escape_string($course_type_id)
            );

            $qry = $this->udb_query($sql);

            $course_type = $this->udb_fetch_assoc($qry);
        }

        return $course_type;
    }

    /**
     * Checks if a the course type name already exists, optionally excluding the given course type ID
     * @param string $course_type_name
     * @param int $course_type_id Optional course type ID to exclude by.
     * @return boolean
     */
    public function course_type_name_exists($course_type_name, $course_type_id = null){
        $result = false;

        $where_parts = array();
        $where_parts[] = sprintf('courseTypeName = "%s"', $this->udb_escape_string($course_type_name));

        if ($course_type_id !== null) {
            $where_parts[] = sprintf('courseTypeID != %s', $this->udb_escape_string($course_type_id));
        }

        $sql = sprintf(
            'SELECT 1 FROM tblCourseType WHERE %s',
            implode(' AND ', $where_parts)
        );

        list($exists) = $this->udb_fetch_row($this->udb_query($sql));

        if ($exists === 1) {
            $result = true;
        }

        return $result;
    }


    /**
     * Add a Course Type to the database.
     * @param array $details Array of details to add for the course type.
     * @return mixed Returns the ID of the new created course type on success,
     *               or false on failure.
     */
    public function course_type_add($details){

        if (!is_array($details)) {
            return false;
        }

        $required = array(
            'courseTypeName',
            'courseTypeDescription',
            'displayOrder',
            'permissionActive'
        );

        $course_type = array();

        if (array_key_exists('courseTypeName', $details)) {
            if (is_string($details['courseTypeName']) && trim($details['courseTypeName']) !== '') {
                $course_type['courseTypeName'] = '"'.$this->udb_escape_string($details['courseTypeName']).'"';
                unset($required['courseTypeName']);
            } else {
                $this->log_error('Cannot add Course Type: Invalid CourseType courseTypeName, must be a non-empty string');
            }
        }

        if (array_key_exists('courseTypeDescription', $details)) {
            if (is_string($details['courseTypeDescription']) && trim($details['courseTypeDescription']) !== '') {
                $course_type['courseTypeDescription'] = '"'.$this->udb_escape_string($details['courseTypeDescription']).'"';
                unset($required['courseTypeDescription']);
            } else {
                $this->log_error('Cannot add Course Type: Invalid CourseType courseTypeDescription, must be a non-empty string');
            }
        }

        if (array_key_exists('displayOrder', $details)) {
            if (is_numeric($details['displayOrder']) && $details['displayOrder'] > 0) {
                $course_type['displayOrder'] = intval($details['displayOrder']);
                unset($required['displayOrder']);
            } else {
                $this->log_error('Cannot add Course Type: Invalid CourseType displayOrder, must be a positive numeric');
            }
        }

        if (array_key_exists('permissionActive', $details)) {
            if (is_numeric($details['permissionActive'])) {
                $details['permissionActive'] = intval($details['permissionActive']);
                if ($details['permissionActive'] === 0 || $details['permissionActive'] === 1) {
                    $course_type['permissionActive'] = $details['permissionActive'];
                    unset($required['permissionActive']);
                } else {
                    $this->log_error('Cannot add Course Type: Invalid CourseType permissionActive, must be either 0 or 1.');
                }
            } else {
                $this->log_error('Cannot add Course Type: Invalid CourseType permissionActive, must be numeric');
            }
        }

        if (array_key_exists('displayDefault', $details)) {
            if (is_numeric($details['displayDefault'])) {
                $details['displayDefault'] = intval($details['displayDefault']);
                if ($details['displayDefault'] === 0 || $details['displayDefault'] === 1) {
                    $course_type['displayDefault'] = $details['displayDefault'];
                    unset($required['displayDefault']);
                } else {
                    $this->log_error('Cannot add Course Type: Invalid CourseType displayDefault, must be either 0 or 1.');
                }
            } else {
                $this->log_error('Cannot add Course Type: Invalid CourseType displayDefault, must be numeric');
            }
        }

        if (!empty($required_fields)) {
            $this->log_error('Cannot add Course Type: Missing the following required fields '.implode(', ', $required_fields));
            return false;
        }

        $sql = 'INSERT INTO tblCourseType (courseTypeName, courseTypeDescription, displayOrder, permissionActive, displayDefault) VALUES('.implode(',', $course_type).')';

        $result = $this->udb_query($sql);

        $result = $result === false ? false : $this->udb_last_insert_id();

        if ($result !== false) {
            if (array_key_exists('displayDefault', $course_type) && $course_type['displayDefault'] === 1) {
                $sql = 'UPDATE tblCourseType SET displayDefault = 0 WHERE courseTypeID != '.$result;
                $qry_result = $this->udb_query($sql);

                if ($qry_result === false) {
                    $this->log_error('Failed to update displayDefault Course Type when adding new Course Type.');
                }
            }
        }

        return $result;
    }

    /**
     * Edit a course type.
     * @param int $course_type_id ID of course type to edit.
     * @param array $details Array of details to set for Course Type.
     * @return boolean
     */
    public function course_type_edit($course_type_id, $details){
        $course_type = array();

        if (!is_numeric($course_type_id) || !is_array($details)) {
            return false;
        }

        if (array_key_exists('courseTypeName', $details)) {
            if (is_string($details['courseTypeName']) && trim($details['courseTypeName']) !== '') {
                $course_type['courseTypeName'] = '"'.$this->udb_escape_string($details['courseTypeName']).'"';
            } else {
                $this->log_error('Cannot update Course Type: Invalid CourseType courseTypeName, must be a non-empty string');
            }
        }

        if (array_key_exists('courseTypeDescription', $details)) {
            if (is_string($details['courseTypeDescription']) && trim($details['courseTypeDescription']) !== '') {
                $course_type['courseTypeDescription'] = '"'.$this->udb_escape_string($details['courseTypeDescription']).'"';
            } else {
                $this->log_error('Cannot update Course Type: Invalid CourseType courseTypeDescription, must be a non-empty string');
            }
        }

        if (array_key_exists('displayOrder', $details)) {
            if (is_numeric($details['displayOrder']) && $details['displayOrder'] > 0) {
                $course_type['displayOrder'] = intval($details['displayOrder']);
            } else {
                $this->log_error('Cannot update Course Type: Invalid CourseType displayOrder, must be a positive numeric');
            }
        }

        if (array_key_exists('permissionActive', $details)) {
            if (is_numeric($details['permissionActive'])) {
                $details['permissionActive'] = intval($details['permissionActive']);
                if ($details['permissionActive'] === 0 || $details['permissionActive'] === 1) {
                    $course_type['permissionActive'] = $details['permissionActive'];
                } else {
                    $this->log_error('Cannot update Course Type: Invalid CourseType permissionActive, must be either 0 or 1.');
                }
            } else {
                $this->log_error('Cannot update Course Type: Invalid CourseType permissionActive, must be numeric');
            }
        }

        if (array_key_exists('displayDefault', $details)) {
            if (is_numeric($details['displayDefault'])) {
                $details['displayDefault'] = intval($details['displayDefault']);
                if ($details['displayDefault'] === 0 || $details['displayDefault'] === 1) {
                    $course_type['displayDefault'] = $details['displayDefault'];
                } else {
                    $this->log_error('Cannot update Course Type: Invalid CourseType displayDefault, must be either 0 or 1.');
                }
            } else {
                $this->log_error('Cannot update Course Type: Invalid CourseType displayDefault, must be numeric');
            }
        }

        $updates = array();

        foreach ($course_type as $key => $value) {
            $updates[] = sprintf(
                '%s = %s',
                $key,
                $value
            );
        }

        if (empty($updates)) {
            $this->log_error('Cannot update Course Type - no values to update');
            return false;
        }

        $sql = sprintf(
            'UPDATE tblCourseType SET %s WHERE courseTypeID=%s',
            implode(',', $updates),
            $this->udb_escape_string($course_type_id)
        );

        $result = $this->udb_query($sql);

        $result = $result === false ? false : true;

        if ($result !== false) {
            if (array_key_exists('displayDefault', $course_type) && $course_type['displayDefault'] === 1) {
                $sql = 'UPDATE tblCourseType SET displayDefault = 0 WHERE courseTypeID != '.$course_type_id;
                $qry_result = $this->udb_query($sql);

                if ($qry_result === false) {
                    $this->log_error('Failed to update displayDefault Course Type when adding new Course Type.');
                }
            }
        }

        return $result;
    }

    /**
     * Delete the given course type ID, testing for whether or not it is currently assigned to any courses.
     * @param int $course_type_id
     * @return boolean
     */
    public function course_type_delete($course_type_id){

        if (!is_numeric($course_type_id)) {
            return false;
        }

        $related_courses_sql = 'SELECT 1 FROM tblCourse WHERE courseTypeID='.$course_type_id;

        list($has_related_courses) = $this->udb_fetch_row($this->udb_query($related_courses_sql));

        if ($has_related_courses === 1) {
            return false;
        }

        $sql = 'DELETE FROM tblCourseType WHERE courseTypeID='.$course_type_id;

        $qry = $this->udb_query($sql);


        return $qry === false ? false : true;
    }

    /**
     * Set the given course type ID for the given courses, removing the course
     * type ID for any courses not listed.
     * @param int $course_type_id
     * @param array $courses
     * @return boolean
     */
    public function course_type_set_courses($course_type_id, $courses){

        if (!is_numeric($course_type_id) || !is_array($courses)) {
            return false;
        }

        $courses = array_filter($courses, 'is_numeric');

        //By default we will detach all courses
        $detach_sql = 'UPDATE tblCourse SET courseTypeID=NULL WHERE courseTypeID='.$course_type_id;

        if (!empty($courses)) {
            $attach_sql = 'UPDATE tblCourse SET courseTypeID='.$course_type_id.' WHERE courseID IN('.implode(',', $courses).')';

            $attach_result = $this->udb_query($attach_sql);

            if ($attach_result === false) {
                $this->log_error('Unable to assign course type to courses');
                return false;
            }

            /**
             * In the case that the array is not empty we want to only detach the courses
             * which do not appear in the courses array; as they have been unselected
             * by the user.
             */
            $detach_sql .= ' AND courseID NOT IN('.implode(',', $courses).')';
        }

        $detach_result = $this->udb_query($detach_sql);

        if ($detach_result === false) {
            $this->log_error('Unable to detach course type from courses');
            return false;
        }

        return true;
    }

    /**
     * Returns a list of modules for the given course
     * @param int $course_id
     */
    public function module_list($course_id) {

        if (is_numeric($course_id)) {
            return $this->udb_fetch_all('
            SELECT
                moduleID, availability, priority, modulePosition,
                quizIsThereOne, AICCTitle, AICCDescription,
                CASE WHEN AICCMasteryScore IS NULL THEN 0 ELSE AICCMasteryScore END AS AICCMasteryScore,
                AICCFileName
            FROM
            tblModule
            WHERE
            courseID = ' . $course_id . '
            ORDER BY
            modulePosition ASC');
        }
        else {
            return false;
        }
    }

    //-----------------------------------------------------------------

    public function course_extra_details($course_code = false, $ignore_cache = false) {

        $apc_key = $this->generate_cache_key("course_data");

        if (!$ignore_cache and $course_data = apc_fetch($apc_key)) {

            return $course_data;
        }
        else {

            $course_data = array();

            if ($xml = @simplexml_load_file($this->config['flash_lms_url'] . '/xml/en/coursedata.xml')) { // TODO: Multiple language support
                foreach ($xml as $thing) {
                    if ($thing->attributes()->courseCode) {
                        $course_code = (string) $thing->attributes()->courseCode;
                        $course_data[$course_code]['title'] = (string) $thing->title->translate;
                        $course_data[$course_code]['shortTitle'] = (string) $thing->shortTitle->translate;
                        $course_data[$course_code]['description'] = (string) $thing->description->translate;
                        $course_data[$course_code]['swf1'] = (string) $thing->attributes()->swf1;
                    }
                }

                apc_store($apc_key, $course_data, 14400);

                return $course_data;
            }
            else {

                $this->log_error('Could not load XML file');
            }
        }

        return false;
    }

    //-----------------------------------------------------------------

    /**
     * Retrieves a list of course alert defiitions
     * @return array
     */
    public function course_alerts(array $alertIDs = null){

        $sql = "SELECT courseAlertID, languageID, courseAlertDescription, CAST(courseAlertMessage as TEXT) as courseAlertMessage, reviewFrequency, targetRecipients, notificationType FROM tblCourseAlert";

        if (!is_null($alertIDs)) {
            $alertIDs = array_filter($alertIDs, 'is_numeric');

            if (!empty($alertIDs)) {
                $sql .= sprintf(
                    ' WHERE courseAlertID IN(%s)',
                    implode(',', $alertIDs)
                );
            }
        }

        return $this->udb_fetch_all($sql);
    }

    /**
     * Insert an entry into tblCourseAlertAnalysis for the given alert ID
     * @param  int $alertID
     * @param  boolean $alertStatus
     * @return boolean
     */
    public function log_course_alert($alertID, $alertStatus){

        if(is_numeric($alertID) && is_bool($alertStatus) && $this->table_exists("tblCourseAlertAnalysis")){
            $alertStatus = $alertStatus ? 1 : 0;
            return $this->udb_query("INSERT INTO tblCourseAlertAnalysis (courseAlertID, actionStatus, actionDate) VALUES(".$alertID.", ".$alertStatus.", GETDATE())");
        }

        return false;
    }


    /**
     * Return non-user specific course details for the given course
     * @param  int $course_id
     * @return false|array      returns associative array of data, or false on invalid course ID
     */
    public function course($course_id){
        if(!is_numeric($course_id)){
            return false;
        }

        $select_parts = array(
            'tblCourse.courseID',
            'tblCourseSeries.courseSeriesID',
            'tblCourseSeries.courseSeriesTitle',
            'tblCourse.noModules',
            'tblCourse.priority',
            'tblCourse.availability',
            'tblCourse.AICCCourseID',
            'tblCourse.AICCCourseTitle',
            'tblCourse.swf1',
            'tblCourse.AICCCourseDescription',
            'tblCourse.lastModifiedDateTime',
            'tblCourse.lastModifiedBy'
        );

        if ($this->column_exists('tblCourse', 'mobile')) {
            $select_parts[] = 'tblCourse.mobile';
        } else {
            $select_parts[] = '0 AS mobile';
        }

        if ($this->column_exists('tblCourse', 'scormVersion')) {
            $select_parts[] = 'tblCourse.scormVersion';
        } else {
            $select_parts[] = 'NULL AS scormVersion';
        }

        if ($this->column_exists('tblCourse', 'coursePassURL')) {
            $select_parts[] = 'tblCourse.coursePassURL';
        } else {
            $select_parts[] = 'NULL AS coursePassURL';
        }

        if ($this->column_exists('tblCourse', 'courseRoot')) {
            $select_parts[] = 'tblCourse.courseRoot';
        } else {
            $select_parts[] = 'NULL AS courseRoot';
        }

        $from_parts = array(
            'tblCourse',
            'LEFT JOIN tblCourseSeries ON tblCourse.courseSeriesID = tblCourseSeries.courseSeriesID'
        );

        $where_parts = array(
            'tblCourse.courseID = '.$this->udb_escape_string($course_id)
        );

        $sql = 'SELECT '.implode(',', $select_parts);
        $sql .= ' FROM '.implode(' ', $from_parts);
        $sql .= ' WHERE '.implode(' AND ', $where_parts);

        $result = $this->udb_fetch_assoc($this->udb_query($sql));

        if (!empty($result)) {
            $modules = $this->module_list($course_id);

            if (isset($modules[0])) {
                $result['courseURL'] = $this->build_course_url($result, $modules[0]);
            } else {
                $result['courseURL'] = $this->build_course_url($result);
            }
        }

        return $result;
    }

    /**
     * User Course List
     *
     * This function returns a list of courses available to a user (by default the current logged in user).
     *
     * @param int $user_id (Optional) The user ID to use.  Default: Current logged in user.
     * @param bool $historic (optional) Include courses the user has previously taken that do not match their current user profile.
     * @param array $course_filter Array of course IDs to limit the query to.
     */
    public function user_course_list($user_id = false, $historic = false, $course_filter = null) {

        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if ($user_id and is_numeric($user_id)) {

            $user_info = $this->user_info($user_id);

            if (!is_array($user_info) || empty($user_info)) {
                return false;
            }

            $select_parts = array(
                'tblCourse.courseID',
                'tblCourseSeries.courseSeriesID',
                'tblCourseSeries.courseSeriesTitle',
                'tblCourse.noModules',
                'tblCourse.priority',
                'tblCourse.availability',
                'tblCourse.AICCCourseID',
                'tblCourse.AICCCourseTitle',
                'tblCourse.AICCCourseTitle as title',
                'tblCourse.AICCCourseDescription as description',
                'tblCourse.swf1',
                'tblCourse.lastModifiedDateTime',
                'tblCourse.lastModifiedBy',
                'tblCourse.behaviourType',
                'tblCourse.certificateTemplate',
                'tblUserCourses.courseStatus',
                'tblUserCourses.startedDateTime',
                'tblUserCourses.lastVisitDateTime',
                'tblUserCourses.lastVisitModuleNumber',
                'tblUserCourses.courseTimeSpent',
                'tblCourseTarget.courseTargetInDays',
                'tblCourseTarget.courseTargetInDays-DATEDIFF(day, tblUser.joiningDate, GETDATE()) as remainingTargetDays',
                'tblSurvey.surveyID',
                'tblSurvey.surveyCode',
                'tblUserSurvey.surveyStatus'
            );

            if ($this->column_exists('tblCourse', 'mobile')) {
                $select_parts[] = 'tblCourse.mobile';
            } else {
                $select_parts[] = '0 as mobile';
            }

            if ($this->column_exists('tblCourse', 'scormVersion')) {
                $select_parts[] = 'tblCourse.scormVersion';
            } else {
                $select_parts[] = 'NULL AS scormVersion';
            }

            if ($this->column_exists('tblCourse', 'coursePassURL')) {
                $select_parts[] = 'tblCourse.coursePassURL';
            } else {
                $select_parts[] = 'NULL AS coursePassURL';
            }

            if ($this->column_exists('tblCourse', 'courseTypeID')) {
                $select_parts[] = 'tblCourse.courseTypeID';
            } else {
                $select_parts[] = 'NULL AS courseTypeID';
            }

            if ($this->column_exists('tblCourse', 'courseRoot')) {
                $select_parts[] = 'tblCourse.courseRoot';
            } else {
                $select_parts[] = 'NULL AS courseRoot';
            }

            $from_parts = array(
                'tblCourse'
            );

            if ((int)$user_info["flexProfile"] === 1) {
                $from_parts[] = 'JOIN tblUserFlexibleProfiles ON (tblCourse.courseID = tblUserFlexibleProfiles.courseID)';
                $from_parts[] = 'JOIN tblUser ON (tblUser.userID = tblUserFlexibleProfiles.userID)';
            } else {
                $from_parts[] = 'JOIN tblUserProfileCourses ON (tblCourse.courseID = tblUserProfileCourses.courseID)';
                $from_parts[] = 'JOIN tblUser ON (tblUser.userProfileID = tblUserProfileCourses.userProfileID)';
            }

            $from_parts[] = 'LEFT JOIN tblCourseSeries ON (tblCourseSeries.courseSeriesID = tblCourse.courseSeriesID)';
            $from_parts[] = 'LEFT JOIN tblUserCourses ON (tblUserCourses.userID = tblUser.UserID AND tblCourse.courseID = tblUserCourses.courseID)';
            $from_parts[] = 'LEFT JOIN tblCourseTarget ON (tblCourseTarget.userTypeID = tblUser.UserTypeID AND tblCourseTarget.courseID = tblCourse.courseID)';
            $from_parts[] = 'LEFT JOIN tblSurvey ON tblSurvey.AICCCourseID = tblCourse.AICCCourseID';
            $from_parts[] = 'LEFT JOIN tblUserSurvey ON tblSurvey.surveyID = tblUserSurvey.surveyID AND tblUser.userID = tblUserSurvey.userID';

            $where_parts = array(
                'tblUser.userID = '.$this->udb_escape_string($user_id)
            );

            if ($course_filter !== null) {
                if (is_numeric($course_filter)) {
                    $course_filter = array($course_filter);
                }

                if (is_array($course_filter)) {
                    $course_filter = array_filter($course_filter, 'is_numeric');

                    if (!empty($course_filter)) {
                        $where_parts[] = 'tblCourse.courseID IN ('.implode(',', $course_filter).')';
                    }

                }
            }

            $order_parts = array(
                'tblCourse.priority ASC',
                'tblCourse.courseID ASC'
            );

            $sql = 'SELECT '.implode(',', $select_parts);
            $sql .= ' FROM ' .implode(' ', $from_parts);
            $sql .= ' WHERE '.implode(' AND ', $where_parts);
            $sql .= ' ORDER BY '.implode(',', $order_parts);

            $user_course_list = $this->udb_fetch_all($sql);

            if ($historic) {

                $from_parts = array(
                    'tblUser',
                    'JOIN tblUserCourses ON tblUserCourses.userID = tblUser.userID',
                    'LEFT JOIN tblCourse ON tblCourse.courseID = tblUserCourses.courseID',
                    'LEFT JOIN tblCourseSeries ON tblCourseSeries.courseSeriesID = tblCourse.courseSeriesID',
                    'LEFT JOIN tblCourseTarget on tblCourseTarget.userTypeID = tblUser.UserTypeID AND tblCourseTarget.courseID = tblCourse.courseID',
                    'LEFT JOIN tblSurvey ON tblSurvey.AICCCourseID = tblCourse.AICCCourseID',
                    'LEFT JOIN tblUserSurvey ON tblSurvey.surveyID = tblUserSurvey.surveyID AND tblUser.userID = tblUserSurvey.userID',
                );

                if ((int)$user_info["flexProfile"] === 1) {

                    $where_parts[] = 'tblCourse.courseID NOT IN (
                                    SELECT
                                        tblUserFlexibleProfiles.courseID
                                    FROM
                                        tblUserFlexibleProfiles
                                    WHERE
                                        tblUserFlexibleProfiles.userID = ' . $this->udb_escape_string($user_id).  '
                                )';

                } else {

                    $where_parts[] = 'tblCourse.courseID NOT IN (
                                    SELECT
                                        tblUserProfileCourses.courseID
                                    FROM
                                        tblUserProfileCourses
                                        JOIN tblUser ON tblUser.userProfileID = tblUserProfileCourses.userProfileID
                                    WHERE
                                        tblUser.userID = '.$this->udb_escape_string($user_id).'
                                )';

                }

                $sql = 'SELECT '.implode(',', $select_parts);
                $sql .= ' FROM ' .implode(' ', $from_parts);
                $sql .= ' WHERE '.implode(' AND ', $where_parts);
                $sql .= ' ORDER BY '.implode(',', $order_parts);

                $historic_course_list = $this->udb_fetch_all($sql);

                $user_course_list = array_merge($user_course_list, $historic_course_list);
            }

            $course_extra_details = $this->course_extra_details();

            foreach ($user_course_list as $i => $course_details) {
                if (!empty($course_extra_details[$course_details['AICCCourseID']])) {
                    foreach ($course_extra_details[$course_details['AICCCourseID']] as $field => $value) {
                        if (!isset($course_details[$field])) {
                            $course_details[$field] = $value;
                        }
                    }

                    $user_course_list[$i] = $course_details;
                }

                $user_course_list[$i]['modules'] = $this->module_list($course_details['courseID']);
                $user_course_list[$i]['courseRefreshes'] = $this->user_course_refreshes($user_id, $course_details['courseID']);
                $user_course_list[$i]['moduleProgress'] = $this->user_module_progress($course_details['courseID'], $user_id);
                $user_course_list[$i]['courseURL'] = $user_course_list[$i]['courseRoot'];

                if (isset($user_course_list[$i]['modules'][0])) {
                    $user_course_list[$i]['courseURL'] = $this->build_course_url(
                        $user_course_list[$i],
                        $user_course_list[$i]['modules'][0]
                    );
                } else {
                    $user_course_list[$i]['courseURL'] = $this->build_course_url($user_course_list[$i]);
                }
            }

            return $user_course_list;
        }

        return false;
    }

    /**
     * Find flexible profile courses for a user
     *
     * @param  numeric $user_id The ID of the user to check courses for
     * @return array            Empty if the user does not have any courses or an array of course ids if this user has courses
     */
    public function user_flexible_profile_ids($user_id) {
        $course_ids = array();

        if (is_numeric($user_id) && $user_id > 0) {
            $sql = 'SELECT CourseID FROM tblUserFlexibleProfiles WHERE UserID = ' . $this->udb_escape_string($user_id);
            $db_course_ids = $this->udb_fetch_all($sql);

            //Ensure return value is array
            if (is_array($db_course_ids) && !empty($db_course_ids)) {
                foreach ($db_course_ids as $key => $value) {
                    $course_ids[] = $value['CourseID'];
                }
            }
        }
        return $course_ids;
    }

    /**
     * Returns the course URL based on tblCourse.courseRoot, scormVersion or
     * the module's AICCFileName.
     * @param array $course Array of course information.
     * @param array|null $module Optional array of module information.
     * @return string
     */
    public function build_course_url(array $course, array $module = null)
    {
        $course_url = $course['courseRoot'];

        if ($course_url === null) {
            //Default to an empty course URL.
            $course_url = '';

            if ($course['scormVersion'] !== null) {
                $course_url = $this->config['flash_course_url'] . "/";
            } elseif ($module !== null) {
                $tmp_course_url = $module['AICCFileName'];

                //strip module & index from path
                $tmp_course_url = preg_replace('/module\d\/index.html/i', '', $tmp_course_url);

                if (preg_match('/^https?:/i', $tmp_course_url) === 1) {
                    //If this is a full URL, use that as the courseURL.
                    $course_url = $tmp_course_url;
                } else {
                    $course_url = $this->config['flash_course_url'] . '/' . $tmp_course_url;
                }
            }
        } elseif (preg_match('/^https?:/i', $course_url) !== 1) {
            $course_url = sprintf(
                '%s/%s/',
                $this->config['flash_course_url'],
                trim($course_url, '/')
            );
        }

        return $course_url;
    }

    /**
     * Return a single course's information for the given courseID and userID.
     * @param int $course_id Numeric courseID to look up.
     * @param int|boolean $user_id userID to look up information for.  If false, defaults to logged in user.
     * @param boolean $historic Whether to include historic data or not.
     * @return array
     * @see $this->user_course_list
     */
    public function user_course($course_id, $user_id = false, $historic = false) {
        $result = array();

        $courses = $this->user_course_list($user_id, $historic, array($course_id));

        if (!empty($courses)) {
            $result = array_pop($courses);
        }

        return $result;
    }

    /**
     * Return the total average time expected for all modules in the given course.
     * @param int $courseID The course ID to retireve module times for.
     * @return string
     */
    protected function get_total_av_module_times($courseID)
    {
        $courseID = $this->udb_escape_string($courseID);

        $totalTimeSql = sprintf(
            'SELECT CASE WHEN avModuleTime IS NULL THEN SUM(60) ELSE SUM((SUBSTRING(avModuleTime, 1, (LEN(avModuleTime)-6))*3600)+(SUBSTRING(avModuleTime, (LEN(avModuleTime)-4), 2)*60)+(SUBSTRING(avModuleTime, (LEN(avModuleTime)-1), 2))) END as Total FROM tblModule WHERE courseID=%s AND availability=1 GROUP BY avModuleTime',
            $courseID
        );

        //If avModuleTime does not exist, treat the value as one minute
        if ($this->column_exists("tblModule", "avModuleTime") !== false) {
            $totalTimeSql = sprintf(
                'SELECT SUM(60) as Total FROM tblModule WHERE courseID=%s AND availability=1',
                $courseID
            );
        }

        $totalTime = $this->udb_fetch_row($this->udb_query($totalTimeSql));

        return $this->seconds_to_time($totalTime[0]);
    }

    /**
     * Force fail the given course for the given user.
     * @param int $course_id ID of the course to fail.
     * @param int $user_id ID of the user to fail.
     * @param \DateTime $date Date the user failed the course.
     * @param int|null $forced_by_id The ID of the user forcing the update,
     *                               or null if automated.
     * @return boolean
     */
    public function force_fail_course($course_id, $user_id, DateTime $date, $forced_by_id = null)
    {
        if (!is_numeric($course_id) || !is_numeric($user_id)) {
            return false;
        }

        if (!is_numeric($forced_by_id)) {
            $forced_by_id = 'null';

            if (isset($this->logged_in_user['UserID'])) {
                $forced_by_id = $this->logged_in_user['UserID'];
            }
        }

        $forced_by_id = $this->udb_escape_string($forced_by_id);
        $course_id = $this->udb_escape_string($course_id);
        $user_id = $this->udb_escape_string($user_id);

        $has_first_completed = $this->column_exists("tblUserCourses", "courseFirstCompletedDate");
        $has_last_completed = $this->column_exists("tblUserCourses", "courseLastCompletedDate");

        $course_avtime_select = 'avCourseTime';

        if ($this->column_exists('tblCourse', 'avCourseTime') === false) {
            $course_avtime_select = 'NULL as avCourseTime';
        }

        $course_sql = sprintf(
            'SELECT AICCCourseID, %s FROM tblCourse WHERE courseID=%s AND availability=1',
            $course_avtime_select,
            $course_id
        );

        $course = $this->udb_fetch_assoc($this->udb_query($course_sql));

        if ($course['avCourseTime'] === null) {
            $course["avCourseTime"] = $this->get_total_av_module_times($course_id);
        }

        $user_course_selects = array(
            "userCourseID",
            "courseStatus"
        );

        if ($has_first_completed) {
            $user_course_selects[] = "courseFirstCompletedDate";
        }

        $user_course_sql = sprintf(
            "SELECT %s FROM tblUserCourses WHERE userID=%s AND courseID=%s",
            implode(",", $user_course_selects),
            $user_id,
            $course_id
        );

        //Check if the user already has a record for this course in tblUserCourses
        $user_course = $this->udb_fetch_assoc($this->udb_query($user_course_sql));

        $user_course_values = array(
            "userID" => $user_id,
            "courseID" => $course_id,
            "startedDateTime" => "'".$date->format("Y-m-d H:i:s")."'",
            "lastVisitDateTime" => "'".$date->format("Y-m-d H:i:s")."'",
            "courseStatus" => "'i'",
            "courseTimeSpent" => "'".$course["avCourseTime"]."'",
            "courseForced" => 1,
            "courseForcedBy" => $forced_by_id,
            "AICCCourseID" => "'".$course["AICCCourseID"]."'"
        );

        if ($has_first_completed) {
            $user_course_values["courseFirstCompletedDate"] = "'".$date->format("Y-m-d H:i:s")."'";
        }

        if ($has_last_completed) {
            $user_course_values["courseLastCompletedDate"] = "'".$date->format("Y-m-d H:i:s")."'";
        }

        $user_course_sql = sprintf(
            "INSERT INTO tblUserCourses (%s) VALUES (%s)",
            implode(", ", array_keys($user_course_values)),
            implode(", ", $user_course_values)
        );

        //If there is an existing user course, change our SQL to be an update
        //statement using all the same values.
        if($user_course !== false){
            $user_course_updates = array_map(
                function ($key, $value) {
                    return $key.'='.$value;
                },
                array_keys($user_course_values),
                $user_course_values
            );

            $user_course_sql = sprintf(
                "UPDATE tblUserCourses SET %s WHERE userCourseID = %d AND userID = %d AND courseID = %d",
                implode(", ", $user_course_updates),
                $user_course["userCourseID"],
                $user_id,
                $course_id
            );
        }

        $this->udb_query($user_course_sql);

        //Get all of the modules associated with the course
        $modules = $this->udb_fetch_all("SELECT moduleID, quizIsThereOne, AICCMasteryScore, CASE WHEN trackingComp IS NULL THEN '00,0,0,0,0,0,0,0,0' ELSE trackingComp END as trackingComp, ".($this->column_exists("tblModule", "avModuleTime") ? "CASE WHEN avModuleTime IS NULL THEN '00:01:00' ELSE avModuleTime END" : "'00:01:00'")." AS avModuleTime FROM tblModule WHERE courseID = ".$course_id."  AND availability=1");

        //Foreach module, check if the user already has an entry in tblUserModuleProgress for that module, and if not, add one
        foreach($modules as $module){
            $user_module = $this->udb_fetch_assoc($this->udb_query("SELECT userModuleProgressID, AICCLessonStatus, AICCScore FROM tblUserModuleProgress WHERE courseID=".$course_id." AND userID=".$user_id." AND moduleID=".$module["moduleID"]));

            $module_values = array(
                'userID' => $user_id,
                'courseID' => $course_id,
                'moduleID' => $module['moduleID'],
                'startedDateTime' => '"'.$date->format('Y-m-d H:i:s').'"',
                'lastVisitedDateTime' => '"'.$date->format('Y-m-d H:i:s').'"',
                'AICCLessonLocation' => '"'.$module['trackingComp'].'"',
                'AICCLessonStatus' => '"i"',
                'AICCTime' => '"'.$module['avModuleTime'].'"',
                'moduleForced' => 1,
                'moduleForcedBy' => $forced_by_id,
                'Notes' => 'GETDATE()'
            );

            if ($module['quizIsThereOne'] === 1) {
                $module_values['quizAttempts'] = 1;
                $module_values['quizLastVisitedDateTime'] = '"'.$date->format('Y-m-d H:i:s').'"';
                $module_values['quizTimeSpent'] = '"00:00:00"';
                $module_values['quizPassed'] = '0';
                $module_values['AICCScore'] = '0';
                $module_values['quizPassedDate'] = 'null';
                $module_values['quizForced'] = 1;
            }

            $module_sql = sprintf(
                'INSERT INTO tblUserModuleProgress (%s) VALUES (%s)',
                implode(',', array_keys($module_values)),
                implode(',',$module_values)
            );

            //If we have a user module already, change this to an update
            //statement instead.
            if(!empty($user_module)){
                $module_updates = array_map(
                    function ($key, $value) {
                        return $key.'='.$value;
                    },
                    array_keys($module_values),
                    $module_values
                );

                $module_sql = sprintf(
                    'UPDATE tblUserModuleProgress SET %s WHERE userModuleProgressID=%d AND userID=%d AND courseID=%d',
                    implode(',', $module_updates),
                    $user_module['userModuleProgressID'],
                    $user_id,
                    $course_id
                );
            }

            $this->udb_query($module_sql);
        }

        return true;
    }

    /**
     * Force passes a user for the given course and date
     * @param  int $course_id
     * @param  int $user_id
     * @param  DateTime $date
     * @param  int $forced_by_id userID of user intiating the force pass
     * @return Boolean
     */
    public function force_pass_course($course_id, $user_id, DateTime $date, $forced_by_id = null)
    {
        if (!is_numeric($course_id) || !is_numeric($user_id)) {
            return false;
        }

        if (!is_numeric($forced_by_id)) {
            $forced_by_id = 'null';

            if (isset($this->logged_in_user['UserID'])) {
                $forced_by_id = $this->logged_in_user['UserID'];
            }
        }

        $forced_by_id = $this->udb_escape_string($forced_by_id);
        $course_id = $this->udb_escape_string($course_id);
        $user_id = $this->udb_escape_string($user_id);

        $has_first_completed = $this->column_exists("tblUserCourses", "courseFirstCompletedDate");
        $has_last_completed = $this->column_exists("tblUserCourses", "courseLastCompletedDate");

        $course_avtime_select = 'avCourseTime';

        if ($this->column_exists('tblCourse', 'avCourseTime') === false) {
            $course_avtime_select = 'NULL as avCourseTime';
        }

        $course_sql = sprintf(
            'SELECT AICCCourseID, %s FROM tblCourse WHERE courseID=%s AND availability=1',
            $course_avtime_select,
            $course_id
        );

        $course = $this->udb_fetch_assoc($this->udb_query($course_sql));

        if ($course['avCourseTime'] === null) {
            $course["avCourseTime"] = $this->get_total_av_module_times($course_id);
        }

        $user_course_selects = array(
            "userCourseID",
            "courseStatus"
        );

        if ($has_first_completed) {
            $user_course_selects[] = "courseFirstCompletedDate";
        }

        $user_course_sql = sprintf(
            "SELECT %s FROM tblUserCourses WHERE userID=%d AND courseID=%d",
            implode(",", $user_course_selects),
            $user_id,
            $course_id
        );

        //Check if the user already has a record for this course in tblUserCourses
        $user_course = $this->udb_fetch_assoc($this->udb_query($user_course_sql));

        $user_course_values = array(
            "userID" => $user_id,
            "courseID" => $course_id,
            "startedDateTime" => "'".$date->format("Y-m-d H:i:s")."'",
            "lastVisitDateTime" => "'".$date->format("Y-m-d H:i:s")."'",
            "courseStatus" => "'c'",
            "courseTimeSpent" => "'".$course["avCourseTime"]."'",
            "courseForced" => 1,
            "courseForcedBy" => $forced_by_id,
            "AICCCourseID" => "'".$course["AICCCourseID"]."'"
        );

        if ($has_first_completed) {
            $user_course_values["courseFirstCompletedDate"] = "'".$date->format("Y-m-d H:i:s")."'";
        }

        if ($has_last_completed) {
            $user_course_values["courseLastCompletedDate"] = "'".$date->format("Y-m-d H:i:s")."'";
        }

        $user_course_sql = sprintf(
            "INSERT INTO tblUserCourses (%s) VALUES (%s)",
            implode(", ", array_keys($user_course_values)),
            implode(", ", $user_course_values)
        );

        //If there is an existing user course, change our SQL to be an update
        //statement using all the same values.
        if($user_course !== false){
            //if the course is marked as completed no more processing is
            //required, so return.
            if($user_course["courseStatus"] === 'c'){
                return true;
            }

            $user_course_updates = array_map(
                function ($key, $value) {
                    return $key.'='.$value;
                },
                array_keys($user_course_values),
                $user_course_values
            );

            $user_course_sql = sprintf(
                "UPDATE tblUserCourses SET %s WHERE userCourseID = %d AND userID = %d AND courseID = %d",
                implode(", ", $user_course_updates),
                $user_course["userCourseID"],
                $user_id,
                $course_id
            );
        }

        $this->udb_query($user_course_sql);

        //Get all of the modules associated with the course
        $modules = $this->udb_fetch_all("SELECT moduleID, quizIsThereOne, AICCMasteryScore, CASE WHEN trackingComp IS NULL THEN '00,0,0,0,0,0,0,0,0' ELSE trackingComp END as trackingComp, ".($this->column_exists("tblModule", "avModuleTime") ? "CASE WHEN avModuleTime IS NULL THEN '00:01:00' ELSE avModuleTime END" : "'00:01:00'")." AS avModuleTime FROM tblModule WHERE courseID = ".$course_id."  AND availability=1");

        //Foreach module, check if the user already has an entry in tblUserModuleProgress for that module, and if not, add one
        foreach($modules as $module){
            $user_module = $this->udb_fetch_assoc($this->udb_query("SELECT userModuleProgressID, AICCLessonStatus, AICCScore FROM tblUserModuleProgress WHERE courseID=".$course_id." AND userID=".$user_id." AND moduleID=".$module["moduleID"]));

            $module_values = array(
                'userID' => $user_id,
                'courseID' => $course_id,
                'moduleID' => $module['moduleID'],
                'startedDateTime' => '"'.$date->format('Y-m-d H:i:s').'"',
                'lastVisitedDateTime' => '"'.$date->format('Y-m-d H:i:s').'"',
                'AICCLessonLocation' => '"'.$module['trackingComp'].'"',
                'AICCLessonStatus' => '"c"',
                'AICCTime' => '"'.$module['avModuleTime'].'"',
                'moduleForced' => 1,
                'moduleForcedBy' => $forced_by_id,
                'Notes' => 'GETDATE()'
            );

            if ($module['quizIsThereOne'] === 1) {
                $module_values['quizAttempts'] = 1;
                $module_values['quizLastVisitedDateTime'] = '"'.$date->format('Y-m-d H:i:s').'"';
                $module_values['quizTimeSpent'] = '"00:00:00"';
                $module_values['quizPassed'] = '1';
                $module_values['AICCScore'] = '100';
                $module_values['quizPassedDate'] = '"'.$date->format('Y-m-d H:i:s').'"';
                $module_values['quizForced'] = 1;
            }

            $module_sql = sprintf(
                'INSERT INTO tblUserModuleProgress (%s) VALUES (%s)',
                implode(',', array_keys($module_values)),
                implode(',',$module_values)
            );

            //If we have a user module already, change this to an update
            //statement instead.
            if(!empty($user_module)){
                //if the module is already marked as completed, there is
                //no progress required, so move to the next record.
                if($user_module["AICCLessonStatus"] === 'c'){
                    continue;
                }

                //If this module has a quiz that has already been passed, then
                //still force complete, but do not override the user's score.
                if($module['quizIsThereOne']
                    && $user_module["AICCLessonStatus"] === 'p'
                    && $user_module["AICCScore"] >= $module["AICCMasteryScore"]
                ){
                    unset($module_values['AICCScore']);
                }

                $module_updates = array_map(
                    function ($key, $value) {
                        return $key.'='.$value;
                    },
                    array_keys($module_values),
                    $module_values
                );

                $module_sql = sprintf(
                    'UPDATE tblUserModuleProgress SET %s WHERE userModuleProgressID=%d AND userID=%d AND courseID=%d',
                    implode(',', $module_updates),
                    $user_module['userModuleProgressID'],
                    $user_id,
                    $course_id
                );
            }

            $this->udb_query($module_sql);
        }

        return true;
    }

    //-----------------------------------------------------------------

    public function last_user_module_progress_id($course_id, $module_id, $user_id=false){
        if($user_id === false || !is_numeric($user_id)){
            $user_id = $this->logged_in_user["UserID"];
        }

        if(!is_numeric($user_id)){
            return false;
        }

        $sql = "SELECT userModuleProgressID FROM tblUserModuleProgress WHERE courseID='".$course_id."' AND moduleID='".$module_id."' AND userID=".$user_id;

        list($id) = $this->udb_fetch_row($this->udb_query($sql));

        return $id;
    }

    /**
     * Get user course progress by course ID
     * @param  int          $course_id Filter results by course ID
     * @param  int|boolean  $user_id   Filter results by user ID
     * @return array        Result set
     */
    public function user_module_progress($course_id, $user_id = false) {

        if (!is_numeric($user_id)) {
            if (!is_numeric($this->logged_in_user['UserID'])){
                return false;
            }
            else {
                $user_id = $this->logged_in_user['UserID'];
            }
        }

        if (!is_numeric($course_id)) {
            return false;
        }

        $user_module_progress = array();

        $sql = "SELECT
                    modulePosition, tblModule.moduleID, startedDateTime,
                    lastVisitedDateTime, quizIsThereOne, quizAttempts, quizLastVisitedDateTime,
                    quizTimeSpent, quizPassed, quizPassedDate, AICCLessonLocation, AICCLessonStatus, AICCScore,
                    AICCTitle, AICCTime
                FROM
                    tblUserModuleProgress JOIN tblModule ON (tblUserModuleProgress.moduleID = tblModule.moduleID)
                WHERE
                    userID = " . $user_id . " AND tblUserModuleProgress.courseID = " . $course_id
                    ." ORDER BY lastVisitedDateTime";

        $query = $this->udb_fetch_all($sql);

        foreach ($query as $row) {

            if ($row["AICCLessonLocation"] === null || preg_match("/\d{2},(?:\d,?)+/", $row["AICCLessonLocation"]) !== 1) {
                $row["AICCLessonLocation"] = "00,0,0,0,0,0,0,0,0";
            }

            $row['item_statuses'] = explode(',', $row['AICCLessonLocation']);

            $last_position = array_shift($row['item_statuses']);

            $row['last_visited_item'] = intval(substr($last_position, 0, 1));

            if (strlen($last_position) > 1) {
                $row['last_visited_page'] = intval(substr($last_position, 1));
            }
            else {
                $row['last_visited_item'] = 1;
                $row['last_visited_page'] = 1;
            }

            $user_module_progress[$row['modulePosition']] = $row;
        }

        return $user_module_progress;
    }

    /**
     * Get progress history by course id
     * @param  int     $course_id Filter results by course ID
     * @param  boolean $module_id Filter results by module ID
     * @param  boolean $user_id   Filter results by user ID
     * @param  boolean $from_date Filter results by from date
     * @param  boolean $to_date   Filter results by to date
     * @return array              Result set
     */
    public function user_module_progress_history($course_id, $user_id = false, $module_id = false, $from_date = false, $to_date = false){

        if (!is_numeric($course_id)){
            return false;
        }

        if (!is_numeric($user_id)) {
            if (!is_numeric($this->logged_in_user['UserID'])){
                return false;
            }
            else {
                $user_id = $this->logged_in_user['UserID'];
            }
        }

        $module_clause = "";
        if (is_numeric($module_id)){
            $module_clause = " AND moduleID = ".$moduleID." ";
        }

        $course_refresh_id_sql = "";
        if (!$this->column_exists("tblUserModuleProgressHistory","UserCourseRefreshID")){
            $course_refresh_id_sql = ", NULL as UserCourseRefreshID ";
        }
        else {
            $course_refresh_id_sql = ", UserCourseRefreshID";
        }

        if ($from_date !== false && strtotime($from_date)) {
            $from_date = date("Y-m-d H:i:s", strtotime($from_date));
            $historic_range .= " AND " . $table . ".lastVisitedDateTime >= '" . $from_date . "'";
        }

        if ($to_date !== false && strtotime($to_date)) {
            // MSSQl includes microtime in datetime fields, so we need to append .999
            // to ensure we're matching to the end of the time range
            $to_date = date("Y-m-d H:i:s.999", strtotime($to_date));
            $historic_range .= " AND " . $table . ".lastVisitedDateTime <= '" . $to_date . "'";
        }

        $user_module_progress = array();

        $sql = "SELECT
                modulePosition, tblModule.moduleID, startedDateTime,
                lastVisitedDateTime, quizIsThereOne, quizAttempts, quizLastVisitedDateTime,
                quizTimeSpent, quizPassed, quizPassedDate, AICCLessonLocation, AICCLessonStatus, AICCScore,
                AICCTitle, AICCTime " . $course_refresh_id_sql . "
            FROM
                tblUserModuleProgressHistory JOIN tblModule ON (tblUserModuleProgressHistory.moduleID = tblModule.moduleID)
            WHERE
                userID = " . $user_id . "
                AND tblUserModuleProgressHistory.courseID = " . $course_id . $historic_range ."
                " . $module_clause . " "
                ." ORDER BY lastVisitedDateTime";

        $query = $this->udb_fetch_all($sql);

        foreach ($query as $row) {

            if ($row["AICCLessonLocation"] === null || preg_match("/\d{2},(?:\d,?)+/", $row["AICCLessonLocation"]) !== 1) {
                $row["AICCLessonLocation"] = "00,0,0,0,0,0,0,0,0";
            }

            $row['item_statuses'] = explode(',', $row['AICCLessonLocation']);

            $last_position = array_shift($row['item_statuses']);

            $row['last_visited_item'] = intval(substr($last_position, 0, 1));

            if (strlen($last_position) > 1) {
                $row['last_visited_page'] = intval(substr($last_position, 1));
            }
            else {
                $row['last_visited_item'] = 1;
                $row['last_visited_page'] = 1;
            }

            $user_module_progress[$row['modulePosition']] = $row;
        }

        return $user_module_progress;

    }

    /**
     * Get the refresh histories for a given module
     * @param  int    $module_id  Filter results by module
     * @param  int    $user_id    Filter results by user
     * @return array  result set on success or empty array on failure.
     */
    public function user_module_progress_refreshes($module_id, $user_id){
        if (!is_numeric($module_id)){
            $this->log_error("Invalid module ID", sprintf("Expected string, given %s", gettype($module_id)));
            return array();
        }

        if (!is_numeric($user_id)){
            $this->log_error("Invalid User ID", sprintf("Expected string, given %s", gettype($module_id)));
            return array();
        }

        if (!$this->column_exists("tblUserModuleProgressHistory","UserCourseRefreshID")){
            return array();
        }

        $sql = "SELECT
                    mod.modulePosition, mod.moduleID, umph.startedDateTime,
                    umph.lastVisitedDateTime, mod.quizIsThereOne, umph.quizAttempts, umph.quizLastVisitedDateTime,
                    umph.quizTimeSpent, umph.quizPassed, umph.quizPassedDate, umph.AICCLessonLocation,
                    umph.AICCLessonStatus, umph.AICCScore,
                    mod.AICCTitle, umph.AICCTime, ucr.refreshDate, ucr.refreshType
                FROM
                    tblUserModuleProgressHistory as umph
                    JOIN tblUserCourseRefresh as ucr ON umph.userCourseRefreshID = ucr.userCourseRefreshID
                    JOIN tblModule as mod ON umph.moduleID = mod.moduleID AND umph.courseID = mod.courseID
                WHERE
                    umph.moduleID = ".$module_id."
                    AND umph.userID = ".$user_id."
                    AND umph.userCourseRefreshID IS NOT NULL
                ORDER BY
                    ucr.refreshDate DESC;";

        $result = $this->udb_fetch_all($sql);
        return is_array($result) ? $result : array();
    }

    /**
     * Returns the time spent for a given course, both showing the current time recorded
     * and the calculated time based on all modules within a course
     * Return array format:
     * currentTime => time recorded in tblUserCourses.courseTimeSpent
     * calculatedTime => time calculated by summing all modules that belong to the course
     *                   from tblUserModuleProgress.AICCTime
     * @param  int  $course_id
     * @param  boolean $user_id
     * @return array|boolean      returns false when invalid parameters are given,
     *                            else returns an associative array with the result
     */
    public function course_time_spent($course_id, $user_id=false){
        if($user_id === false || !is_numeric($user_id)){
            $user_id = $this->logged_in_user["UserID"];
        }

        if(!is_numeric($user_id) || !is_numeric($course_id)){
            return false;
        }

        $sql = "SELECT
                    SUM(
                        (SUBSTRING(COALESCE(AICCTime, '00:00:00'), 1, (LEN(COALESCE(AICCTime, '00:00:00'))-6))*3600)
                        +(SUBSTRING(COALESCE(AICCTime, '00:00:00'), (LEN(COALESCE(AICCTime, '00:00:00'))-4), 2)*60)
                        +(SUBSTRING(COALESCE(AICCTime, '00:00:00'), (LEN(COALESCE(AICCTime, '00:00:00'))-1), 2))
                        ) as calculatedTime,
                    MAX(
                        (SUBSTRING(COALESCE(courseTimeSpent, '00:00:00'), 1, (LEN(COALESCE(courseTimeSpent, '00:00:00'))-6))*3600)
                        +(SUBSTRING(COALESCE(courseTimeSpent, '00:00:00'), (LEN(COALESCE(courseTimeSpent, '00:00:00'))-4), 2)*60)
                        +(SUBSTRING(COALESCE(courseTimeSpent, '00:00:00'), (LEN(COALESCE(courseTimeSpent, '00:00:00'))-1), 2))
                        ) as currentTime
                FROM
                    tblUserModuleProgress
                    JOIN tblUserCourses ON tblUserModuleProgress.courseID = tblUserCourses.courseID AND tblUserModuleProgress.userID = tblUserCourses.userID
                WHERE
                    tblUserModuleProgress.courseID = ".$course_id."
                    AND tblUserModuleProgress.userID = ".$user_id;

        $result = $this->udb_fetch_assoc($this->udb_query($sql));

        return $result;
    }

    /**
     * User course data export.  Gives a list of users who have completed courses and not yet been exported
     * @param array $fields Array of fields to select from the database.
     * @param boolean $update When true, updates the export record.  Defaults to true.
     * @return Array          Array of requested fields.
     */
    public function user_course_data_export(array $fields, $update = true)
    {
        $result = array();

        $from_parts = array(
            'tblUser',
            'JOIN tblUserCourses ON tblUser.userID = tblUserCourses.userID',
            'JOIN tblCourse ON tblUserCourses.courseID = tblCourse.courseID'
        );

        $where_parts = array(
            'tblUser.accountActive = 1',
            'AND (tblUser.tmpExclude = 0 OR tblUser.tmpExclude IS NULL)',
            'AND tblUserCourses.courseStatus = \'c\''
        );

        if ($this->column_exists('tblCourse', 'altCourseID')) {
            $where_parts[] = 'AND tblCourse.altCourseID IS NOT NULL';
        }

        if ($this->column_exists('tblUserCourses', 'export_processed')) {
            $where_parts[] = 'AND tblUserCourses.export_processed IS NULL';
        }

        $sql = sprintf(
            'SELECT tblUserCourses.userID, tblUserCourses.courseID FROM %s WHERE %s',
            implode(' ', $from_parts),
            implode(' ', $where_parts)
        );

        $records = $this->udb_fetch_all($sql);

        //If we have now matching records, return our empty result set.
        if ($records === false || empty($records)) {
            return $result;
        }

        $user_ids = array();
        $course_ids = array();

        foreach ($records as $row) {
            $user_ids[] = $row['userID'];
            $course_ids[] = $row['courseID'];
        }

        $user_ids = array_unique($user_ids);
        $course_ids = array_unique($course_ids);

        $select_parts = array();

        foreach ($fields as $heading => $field) {
            $select_parts[] = sprintf(
                "%s AS [%s]",
                $field,
                $heading
            );
        }

        $where_parts = array(
            'tblUserCourses.courseStatus = \'c\''
        );

        $where_parts[] = sprintf(
            'AND tblUserCourses.userID IN (%s)',
            implode(', ', $user_ids)
        );

        $where_parts[] = sprintf(
            'AND tblUserCourses.courseID IN (%s)',
            implode(', ', $course_ids)
        );

        $sql = sprintf(
            'SELECT %s FROM %s WHERE %s',
            implode(', ', $select_parts),
            implode(' ', $from_parts),
            implode(' ', $where_parts)
        );

        $records = $this->udb_fetch_all($sql);

        //If we have no matching records, return our empty result set.
        if ($records === false || empty($records)) {
            return $result;
        }

        $result = $records;

        if ($update === true) {
            $update_values = array();

            if ($this->column_exists("tblusercourses", "export_processed")) {
                $update_values[] = 'export_processed = 1';
            }

            if ($this->column_exists("tblusercourses", "export_processed_date")) {
                $update_values[] = 'export_processed_date = GETDATE()';
            }

            if (!empty($update_values)) {
                $update_sql = sprintf(
                    "UPDATE tblUserCourses SET %s WHERE %s",
                    implode(", ", $update_values),
                    implode(" ", $where_parts)
                );

                $this->udb_query($update_sql);
            }
        }

        return $result;
    }

    /**
     * Logs user course data export information.
     * @param string $filename Full URI of export.
     * @param string $msg Message to log.
     * @param int $rows Number of rows exported.
     * @return boolean
     */
    public function user_course_data_export_log($filename, $msg, $rows)
    {
        if (!$this->table_exists('GI_tblCourseExports')) {
            error_log(
                "GI_tblCourseExports table missing for client ".$this->customer_id
            );

            return false;
        }

        $sql = sprintf(
            "INSERT INTO GI_tblCourseExports (fileName, exportDateTime, numberofRows, exportMessage) VALUES ('%s', GETDATE(), %d, '%s')",
            $this->udb_escape_string($filename),
            $this->udb_escape_string($rows),
            $this->udb_escape_string($msg)
        );

        return (boolean)$this->udb_query($sql);
    }

    /**
     * Returns the survey answers for the given survey and user
     * @param  int  $survey_id
     * @param  int|boolean $user_id   If false, defaults to logged in user
     * @return array|boolean
     */
    public function user_survey_results($survey_id, $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if(!is_numeric($user_id) || !is_numeric($survey_id) ){
            return false;
        }

        $result = array();

        $sql = "SELECT userSurveyID, surveyStatus, surveyAnswers, surveyStartDate, surveyLastVisitedDate, surveyDateSubmitted FROM tblUserSurvey WHERE userID=".$user_id." AND surveyID=".$survey_id;
        $survey = $this->udb_fetch_assoc($this->udb_query($sql));

        if(empty($survey)){
            return $result;
        }

        $result["userSurveyID"] = $survey["userSurveyID"];
        $result["surveyStartDate"] = $survey["surveyStartDate"];
        $result["surveyLastVisitedDate"] = $survey["surveyLastVisitedDate"];
        $result["surveyDateSubmitted"] = $survey["surveyDateSubmitted"];
        $result["surveyStatus"] = $survey["surveyStatus"];
        $result["surveyAnswers"] = $survey["surveyAnswers"];
        $result["answers"] = array();
        $result["answers"] = explode("|", trim($survey["surveyAnswers"], "|"));

        $sql = "SELECT qNo, CAST(freeTextData AS TEXT) freeTextData FROM tblSurveyFreeText WHERE userID=".$user_id." AND surveyID=".$survey_id;
        $freetext = $this->udb_fetch_all($sql);

        if(!empty($freetext)){
            foreach($freetext as $answer){
                $result["answers"][$answer["qNo"]] = rawurldecode($answer["freeTextData"]);
            }
        }

        return $result;
    }

    /**
     * Update survey status, times and answers for the given survey and user
     * @param  int  $survey_id
     * @param  boolean|int $status Possible values are:
     *                             0 = Do not change status, update time only,
     *                             1 = Survey started,
     *                             2 = Survey saved,
     *                             3 = Survey submitted
     * @param  array   $answers
     * @param  boolean|int $user_id   User ID, or logged in user if false
     * @return boolean
     */
    public function user_survey_answers_update($survey_id, $status, $answers=array(), $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if(!is_numeric($survey_id) || !is_numeric($user_id) || (!is_bool($status) && !is_numeric($status)) || !is_array($answers)){
            return false;
        }

        $survey_id = intval($survey_id);
        $user_id = intval($user_id);
        $status = intval($status);

        if(empty($answers)){
            $answers[] = "*";
            $answers[] = "";
        }
        else{
            //Our first item must always be an asterisk
            $first_item = array_shift($answers);
            array_unshift($answers, $first_item);

            if($first_item !== "*"){
                array_unshift($answers, "*");
            }

            //Our last item must be a pipe, so
            //if required, append an empty string
            //to cause implode
            $last_item = array_pop($answers);
            array_push($answers, $last_item);

            if($last_item !== ""){
                array_push($answers, "");
            }
        }

        $answer_string = implode("|", $answers);

        $sql = "SELECT userSurveyID FROM tblUserSurvey WHERE userID=".$user_id." AND surveyID=".$survey_id;

        list($user_survey_id) = $this->udb_fetch_row($this->udb_query($sql));

        if(!is_numeric($user_survey_id)){
            if($status === 3){
                $sql = "INSERT INTO tblUserSurvey (userID, surveyID, surveyStatus, ".
                        "surveyStartDate, surveyLastVisitedDate, surveyDateSubmitted, ".
                        "surveyAnswers) VALUES (".$user_id.", ".$survey_id.", ".$status.", ".
                        "GETDATE(), GETDATE(), GETDATE(), '".$this->udb_escape_string($answer_string)."')";
            }
            else{
                //If status is false, we need to set it to 1 to indicate the survey has now been started
                if($status === 0){
                    $status = 1;
                }

                $sql = "INSERT INTO tblUserSurvey (userID, surveyID, surveyStatus, ".
                        "surveyStartDate, surveyLastVisitedDate, surveyAnswers) VALUES ".
                        "(".$user_id.", ".$survey_id.", ".$status.", GETDATE(),".
                        " GETDATE(), '".$this->udb_escape_string($answer_string)."')";
            }
        }
        else{
            if($status === 3){
                $sql = "UPDATE tblUserSurvey SET surveyAnswers='".$this->udb_escape_string($answer_string)."',".
                    " surveyStatus=".$status.", surveyLastVisitedDate=GETDATE(), surveyDateSubmitted=GETDATE()".
                    " WHERE userID=".$user_id." AND surveyID=".$survey_id." AND userSurveyID=".$user_survey_id;
            }
            else if($status === 0){
                $sql = "UPDATE tblUserSurvey SET surveyLastVisitedDate=GETDATE() WHERE userID=".$user_id.
                    " AND surveyID=".$survey_id." AND userSurveyID=".$user_survey_id;
            }
            else{
                $sql = "UPDATE tblUserSurvey SET surveyAnswers='".$this->udb_escape_string($answer_string)."',".
                    " surveyLastVisitedDate=GETDATE(), surveyStatus=".$status." WHERE userID=".$user_id.
                    " AND surveyID=".$survey_id." AND userSurveyID=".$user_survey_id;
            }
        }

        $this->udb_query($sql);

        return true;
    }

    /**
     * Update the freetext answers for the given user and survey
     * @param  int  $survey_id
     * @param  string  $survey_code
     * @param  array  $freetext
     * @param  boolean|int $user_id     User ID or logged in user if false
     * @return boolean
     */
    public function user_survey_freetext_answer_update($survey_id, $survey_code, $freetext, $user_id=false){
        if (!$user_id or !is_numeric($user_id)) {
            $user_id = $this->logged_in_user['UserID'];
        }

        if(!is_numeric($survey_id) || !is_string($survey_code) || !is_numeric($user_id) || !is_array($freetext)){
            return false;
        }

        if(!empty($freetext)){

            $sql = "DELETE FROM tblSurveyFreeText WHERE userID=".$user_id." AND surveyID=".$survey_id;

            $this->udb_query($sql);

            $sql = "INSERT INTO tblSurveyFreeText (surveyCode, surveyID, userID, qNo, freeTextData) VALUES ";
            $values = array();

            foreach($freetext as $data){
                $tmp = array();
                $tmp[] = "'".$this->udb_escape_string($survey_code)."'";
                $tmp[] = $survey_id;
                $tmp[] = $user_id;
                $tmp[] = "'".$this->udb_escape_string($data["qNo"])."'";
                $tmp[] = "'".$this->udb_escape_string(rawurlencode($data["freeTextData"]))."'";

                $values[] = "(".implode(", ", $tmp).")";
            }

            $sql .= implode(", ", $values);

            $this->udb_query($sql);

            return true;
        }

        return false;
    }

    /**
     * Returns an array of surveys available to the given user.
     * @return array
     */
    public function user_survey_list($user_id)
    {
        $result = array();

        if (!is_numeric($user_id)) {
            $this->log_error("Invalid user ID given to user_survey_list");
            return $result;
        }

        $select_parts = array(
            "tblSurvey.surveyID",
            "tblSurvey.availableStartDate",
            "tblSurvey.availableEndDate",
            "tblSurvey.displayStartDate",
            "tblSurvey.displayEndDate",
            "tblSurvey.surveyActive",
            "tblSurvey.surveyPriority",
            "tblSurvey.surveyCode",
            "tblSurvey.surveyTitle",
            "CAST(tblSurvey.surveyDashboardDescription AS TEXT) AS surveyDashboardDescription",
            "CAST(tblSurvey.surveyDescription AS TEXT) AS surveyDescription",
            "tblSurvey.AICCCourseID",
            "tblSurvey.useTrainingMenu",
            "tblSurvey.surveyUrl",
            "tblUserSurvey.surveyStatus",
            "tblUserSurvey.surveyAnswers",
            "tblUserSurvey.surveyDateSubmitted",
            "tblUserSurvey.surveyStartDate",
            "tblUserSurvey.surveyLastVisitedDate"
        );

        $from_parts = array(
            "tblUser",
            "JOIN tblUserProfileSurveys ON tblUser.userProfileID = tblUserProfileSurveys.userProfileID",
            "JOIN tblSurvey ON tblUserProfileSurveys.surveyID = tblSurvey.surveyID",
            "LEFT JOIN tblUserSurvey ON tblUserSurvey.userID = tblUser.userID AND tblUserSurvey.surveyID = tblSurvey.surveyID"
        );

        $where_parts = array(
            "tblUser.userID = ".$user_id,
            "AND tblSurvey.surveyActive = 1",
            "AND (tblSurvey.useTrainingMenu = 0 OR tblSurvey.useTrainingMenu IS NULL)"
        );

        $sql = sprintf(
            "SELECT %s FROM %s WHERE %s ORDER BY tblSurvey.surveyPriority DESC",
            implode(", ", $select_parts),
            implode(" ", $from_parts),
            implode(" ", $where_parts)
        );

        $qry = $this->udb_query($sql);

        while ($row = $this->udb_fetch_assoc($qry)) {
            $result[] = $row;
        }

        return $result;
    }

    /**
     * Reads in applicationCore.xml based on the flash_lms_url config option
     * @return Array
     */
    public function parse_application_core_xml(){
        $apc_key = $this->generate_cache_key("applicationCore");

        $core = array();

        if(($xml = apc_fetch($apc_key)) === false){
            $xml = @file_get_contents($this->config["flash_lms_url"]."/xml/en/applicationCore.xml");

            apc_store($apc_key, $xml, 14400);
        }

        $xml = simplexml_load_string($xml);

        if($xml !== false){
            $core["userNameChars"] = (int)$xml->config->userNameChars["value"];
            $core["passwordChars"] = (int)$xml->config->passwordChars["value"];
            $core["AICCurl"] = (string)$xml->config->AICCurl["value"];
            $core["deadlineDays1"] = (int)$xml->config->deadlineDays1["value"];
            $core["deadlineDays2"] = (int)$xml->config->deadlineDays2["value"];
            $core["useEula"] = (int)$xml->config->useEula["value"];
        }

        return $core;
    }

    /**
     * Returns the upskill email address to use for the current client
     * @return string
     */
    public function usp_email_address(){
    	$email = "support@upskillpeople.com";

		if(!empty($this->platform_config["USPEmailFrom"]) && filter_var($this->platform_config["USPEmailFrom"], FILTER_VALIDATE_EMAIL) !== false){
			$email = $this->platform_config["USPEmailFrom"];
		}

		return $email;
    }

    //-----------------------------------------------------------------

    public function is_datetime($in_value) {

        if (preg_match('/^\d\d\d\d-\d\d-\d\d( \d\d:\d\d:\d\d)?$/', $in_value)) {
            return true;
        }
        return false;
    }


    /**
     * Generate a key for use with the caching library.
     *
     * Returns a key built to the following structure:
     * USP|<grouping>|[[<customerID>|<databaseType:if available>|]<identifier>]
     * USP|table info|uspshow|staging
     * @param  string  $grouping
     * @param  string $identifier
     * @return string
     */
    protected function generate_cache_key($grouping, $identifier=null){
        $parts = array(
            "USP",
            $grouping
            );

        //If a customer ID has been asigned,
        //add the ID and the database type to the key.
        if(is_string($this->customer_id)){
            $parts[] = $this->customer_id;
            $parts[] = $this->staging ? "staging" : "live";
        }

        if(!is_null($identifier)){
            $parts[] = $identifier;
        }

        return implode("|", $parts);
    }

    //-----------------------------------------------------------------

    /**
     * Course Report
     *
     * This function returns stats of course completions.
     *
     * @param string $group_by An array containing the group by fields in order.  Acceptable values are either 'org1', 'org2', 'org3', 'org4', 'user' or 'course'.
     * @param string $course_filter A list of course IDs to filter by.
     * @param array $org_filters List of org filtes in format: array(Org Level => array(IDs))
     * @param array $user_type_filter List of user type IDs to filter by
     * @param int $user_status_filter Options: false - All users, 0 - Only inactive users, 1 - Only active users (Default)
     * @param array $date_filters Array containing from and too date in datetime format with any of the following keys: 'joined', 'coursestarted', 'lastvisited', 'quizcompleted'
     * @param array $job_type_filters List of job type IDs to filter by
     * @param array $org1_attribute_filters List of org1 Attribute IDs to filter by
     * @param int $force_pass_status 0 => Include force passed, 1 => Exclude force passed, 2 => only force passed
     * @param array $course_type_filters Array of course types to filter by.
     * @param int $course_availability 0 => Available, 1 => Unavailable, 2 => All
     * @param array $user_exclude_filters Array of userExcludeAttributes IDs to filter by.
     * @param array $employment_type_filters Array of employment type IDs to filter by.
     * @return array Array of course report data.
     */
    public function course_report($group_by = false, $course_filter = false, $org_filters = array(), $user_type_filter = array(), $user_status_filter = 1, $date_filters = array(), $job_type_filter = array(), $org1_attribute_filters = array(), $force_pass_status=0, $course_type_filters = array(), $course_availability=0, $user_exclude_filters = array(), $employment_type_filters = array()) {

        $select_sql = array(
            'COUNT(*) AS UsersEligible_Count',
            'SUM(CASE WHEN CourseStatus != \'r\' THEN 1 ELSE 0 END) AS UsersAttendance_Count',
            'SUM(CASE WHEN CourseStatus = \'i\' THEN 1 ELSE 0 END) AS UsersInProgress_Count',
            'SUM(CASE WHEN CourseStatus = \'r\' THEN 1 ELSE 0 END) AS UsersRefreshed_Count',
            'SUM(CASE WHEN tblUserCourses.CourseStatus = \'c\' THEN 1 ELSE 0 END) AS UsersPassed_Count',
            'SUM(CASE WHEN tblUserCourses.CourseStatus = \'c\' AND LEN(courseTimeSpent) >= 8 THEN (SUBSTRING(courseTimeSpent, 1, (LEN(courseTimeSpent)-6))*3600)+(SUBSTRING(courseTimeSpent, (LEN(courseTimeSpent)-4), 2)*60)+(SUBSTRING(courseTimeSpent, (LEN(courseTimeSpent)-1), 2)) ELSE 0 END) AS DurationTotal_Seconds',
            'SUM(CASE WHEN CourseStatus = \'i\' AND LEN(courseTimeSpent) >= 8 THEN (SUBSTRING(courseTimeSpent, 1, (LEN(courseTimeSpent)-6))*3600)+(SUBSTRING(courseTimeSpent, (LEN(courseTimeSpent)-4), 2)*60)+(SUBSTRING(courseTimeSpent, (LEN(courseTimeSpent)-1), 2)) ELSE 0 END) AS DurationInProgressTotal_Seconds'
        );

        $where_sql = array();
        $sub_where_sql = array();
        $group_by_sql = array();

        //------------------------------
        // User Status
        if ($user_status_filter === 1) {
            $where_sql[] = 'tblUser.accountactive = 1';
            $sub_where_sql[] = 'hnUser.accountactive = 1';
        } elseif ($user_status_filter === 0) {
            $where_sql[] = 'tblUser.accountactive != 1';
            $sub_where_sql[] = 'hnUser.accountactive != 1';
        }

        //Default to excluding all temp excluded users, and override if required
        //via the user exclude filters.
        $report_exclude_sql = array('(tblUser.tmpExclude IS NULL OR tbluser.tmpExclude = 0)');
        $sub_report_exclude_sql = array('(hnUser.tmpExclude IS NULL OR hnUser.tmpExclude = 0)');

        if (!empty($user_exclude_filters) && is_array($user_exclude_filters)) {
            $user_exclude_filters = array_filter($user_exclude_filters, "is_numeric");

            //Check for meta filter ID zero to denote "no reason given" query,
            //i.e. where temp excluded but with no reason given.
            $find_without_reason = array_search(0, $user_exclude_filters);

            if(!empty($user_exclude_filters)){
                //If we've reached this point, replace the initial temp exclude
                //SQL and replace with the new filters as required.
                $report_exclude_sql = array();
                $sub_user_exclude_attribte_sql = array();

                if ($find_without_reason !== false) {
                    unset($user_exclude_filters[$find_without_reason]);

                    $report_exclude_sql[] = '(tblUser.userExcludeAttributeID IS NULL AND tblUser.tmpExclude = 1)';
                    $sub_report_exclude_sql[] = '(hnUser.userExcludeAttributeID IS NULL AND hnUser.tmpExclude = 1)';
                }

                if(!empty($user_exclude_filters)){
                    $report_exclude_sql[] = "tblUser.userExcludeAttributeID IN (".implode(", ", $user_exclude_filters).")";
                    $sub_report_exclude_sql[] = "hnUser.userExcludeAttributeID IN (".implode(", ", $user_exclude_filters).")";
                }

            }
        }

        //Our report exclude SQL arrays will now contain valid rules, one way or
        //another, so can be expanded into the required SQL strings.
        $where_sql[] = sprintf(
            '(%s)',
            implode(' OR ', $report_exclude_sql)
        );

        $sub_where_sql[] = sprintf(
            '(%s)',
            implode(' OR ', $sub_report_exclude_sql)
        );

        // Date Filters
        if (is_array($date_filters)) {

            // Joining Date
            if (!empty($date_filters['joined']['start']) and $this->is_datetime($date_filters['joined']['start'])) {
                $where_sql[] = 'tblUser.JoiningDate >= \'' . $date_filters['joined']['start'] . '\'';
                $sub_where_sql[] = 'hnUser.JoiningDate >= \'' . $date_filters['joined']['start'] . '\'';
            }
            if (!empty($date_filters['joined']['end']) and $this->is_datetime($date_filters['joined']['end'])) {
                $where_sql[] = 'tblUser.JoiningDate <= \'' . $date_filters['joined']['end'] . '\'';
                $sub_where_sql[] = 'hnUser.JoiningDate <= \'' . $date_filters['joined']['end'] . '\'';
            }

            // Leaving Date
            if (!empty($date_filters['left']['start']) and $this->is_datetime($date_filters['left']['start'])) {
                $where_sql[] = 'tblUser.LeavingDate >= \'' . $date_filters['left']['start'] . '\'';
                $sub_where_sql[] = 'hnUser.LeavingDate >= \'' . $date_filters['left']['start'] . '\'';
            }

            if (!empty($date_filters['left']['end']) and $this->is_datetime($date_filters['left']['end'])) {
                $where_sql[] = 'tblUser.LeavingDate <= \'' . $date_filters['left']['end'] . '\'';
                $sub_where_sql[] = 'hnUser.LeavingDate <= \'' . $date_filters['left']['end'] . '\'';
            }


            // Course Started
            if (!empty($date_filters['coursestarted']['start']) and $this->is_datetime($date_filters['coursestarted']['start'])) {
                $where_sql[] = 'tblUserCourses.startedDateTime >= \'' . $date_filters['coursestarted']['start'] . '\'';
                $sub_where_sql[] = 'hnUserCourses.startedDateTime >= \'' . $date_filters['coursestarted']['start'] . '\'';
            }
            if (!empty($date_filters['coursestarted']['end']) and $this->is_datetime($date_filters['coursestarted']['end'])) {
                $where_sql[] = 'tblUserCourses.startedDateTime <= \'' . $date_filters['coursestarted']['end'] . '\'';
                $sub_where_sql[] = 'hnUserCourses.startedDateTime <= \'' . $date_filters['coursestarted']['end'] . '\'';
            }

            // Last Visit
            if (!empty($date_filters['lastvisited']['start']) and $this->is_datetime($date_filters['lastvisited']['start'])) {
                $where_sql[] = 'tblUserCourses.lastVisitDateTime >= \'' . $date_filters['lastvisited']['start'] . '\'';
                $sub_where_sql[] = 'hnUserCourses.lastVisitDateTime >= \'' . $date_filters['lastvisited']['start'] . '\'';
            }
            if (!empty($date_filters['lastvisited']['end']) and $this->is_datetime($date_filters['lastvisited']['end'])) {
                $where_sql[] = 'tblUserCourses.lastVisitDateTime <= \'' . $date_filters['lastvisited']['end'] . '\'';
                $sub_where_sql[] = 'hnUserCourses.lastVisitDateTime <= \'' . $date_filters['lastvisited']['end'] . '\'';
            }

            // Quiz Completed
            if (!empty($date_filters['quizcompleted']['start']) and $this->is_datetime($date_filters['quizcompleted']['start'])) {
                $where_sql[] = '(SELECT MAX(quizPassedDate) FROM tblUserModuleProgress WHERE tblUserModuleProgress.UserID = tblUser.UserID AND tblUserModuleProgress.courseID = tblUserCourses.courseID) >= \'' . $date_filters['quizcompleted']['start'] . '\'';
                $sub_where_sql[] = 'tblUserModuleProgress.quizPassedDate >= \'' . $date_filters['quizcompleted']['start'] . '\'';
            }
            if (!empty($date_filters['quizcompleted']['end']) and $this->is_datetime($date_filters['quizcompleted']['end'])) {
                $where_sql[] = '(SELECT MAX(quizPassedDate) FROM tblUserModuleProgress WHERE tblUserModuleProgress.UserID = tblUser.UserID AND tblUserModuleProgress.courseID = tblUserCourses.courseID) <= \'' . $date_filters['quizcompleted']['end'] . '\'';
                $sub_where_sql[] = 'tblUserModuleProgress.quizPassedDate <= \'' . $date_filters['quizcompleted']['end'] . '\'';
            }
        }

        // User Filters
        $filter_sql = $this->generate_user_filters_sql(
            $org_filters,
            $user_type_filter,
            ($this->logged_in_user["Administrator"] === 1),
            $job_type_filter,
            $user_exclude_filters
        );

        if ($filter_sql) {

            $where_sql[] = $filter_sql;

            $sub_where_sql[] = str_replace("tbl", "hn", $filter_sql);
        }

        if (is_array($course_filter) and count($course_filter) > 0 and $this->array_only_int($course_filter)) {
            $where_sql[] = 'vw_usercourselist_full.courseID IN (' . implode(',', $course_filter) . ')';
            $sub_where_sql[] = 'vwUser.courseID IN (' . implode(',', $course_filter) . ')';
        }

        if (is_array($employment_type_filters) && !empty($employment_type_filters) && $this->array_only_int($employment_type_filters)) {
            $where_sql[] = 'tblUser.EmploymentTypeID IN (' . implode(', ', $employment_type_filters) . ')';
            $sub_where_sql[] = 'hnUser.EmploymentTypeID IN (' . implode(', ', $employment_type_filters) . ')';
        }

        if (!is_array($group_by)) {
            $group_by = array($group_by);
        }

        if (is_array($group_by) and count($group_by)) {

            $group_by_fields = array(
                'org1' => 'tblUser.org1ID',
                'org2' => 'tblUser.org2ID',
                'org3' => 'tblUser.org3ID',
                'org4' => 'tblUser.org4ID',
                'user' => 'tblUser.UserID',
                'course' => 'vw_usercourselist_full.courseID'
            );

            foreach ($group_by as $tmp_value) {
                if (!empty($group_by_fields[$tmp_value])) {
                    $group_by_sql[] = $group_by_fields[$tmp_value];
                }
            }

            if (count($group_by_sql) == 0) {
                $group_by_sql[] = $group_by_fields['course'];
                $group_by = array('course');
            }

            $tblUserModuleProgress_where_sql = array();

            foreach ($group_by as $tmp_value) {
                if (!empty($group_by_fields[$tmp_value])) {

                    if ($tmp_value == 'course') {

                        $select_sql[] = '(SELECT tblCourse.AICCCourseTitle FROM tblCourse WHERE tblCourse.CourseID = vw_usercourselist_full.courseID) AS CourseTitle';
                        $select_sql[] = 'vw_usercourselist_full.CourseID';
                        $tblUserModuleProgress_where_sql[] = 'tblUserModuleProgress.CourseID = vw_usercourselist_full.courseID';
                    }
                    elseif ($tmp_value == 'user') {

                        $select_sql[] = '(SELECT tblUser.firstName, tblUser.lastName FROM tblUser AS usersub WHERE tblUser.UserID = usersub.UserID) AS UserFullName';
                        $tblUserModuleProgress_where_sql[] = 'UserID = tblUser.UserID';
                    }
                    elseif (substr($tmp_value, 0, 3) == 'org') {

                        $group_org_level = substr($tmp_value, -1);
                        $select_sql[] = $group_org_level . ' AS OrgLevel';
                        $select_sql[] = 'tblUser.org' . $group_org_level . 'ID AS OrgID';
                        $select_sql[] = '(SELECT org' . $group_org_level . 'Name FROM tblorg' . $group_org_level . ' WHERE tblorg' . $group_org_level . '.org' . $group_org_level . 'ID = tblUser.org' . $group_org_level . 'ID) AS OrgName';
                        $select_sql[] = '(SELECT org' . $group_org_level . 'LongName FROM tblorg' . $group_org_level . ' WHERE tblorg' . $group_org_level . '.org' . $group_org_level . 'ID = tblUser.org' . $group_org_level . 'ID) AS OrgLongName';

                        $tblUserModuleProgress_where_sql[] = 'hnUser.Org' . $group_org_level . 'ID = tblUser.Org' . $group_org_level . 'ID';
                    }
                }
            }
        }

        if(is_array($org1_attribute_filters) && !empty($org1_attribute_filters) && $this->table_exists("tblOrgAttribute")){

            //Because an org can have multiple attributes, select the distinct org1ID for use in the where clause, rather than joining
            $sql = "SELECT DISTINCT org1ID FROM tblOrgAttribute WHERE orgAttributeNameID IN (".implode(", ", $org1_attribute_filters).")";
            $qry = $this->udb_query($sql);

            $org1_filters = array();

            while($row = $this->udb_fetch_assoc($qry)){
                $org1_filters[] = $row["org1ID"];
            }

            if (!empty($org1_filters)) {
                $where_sql[] = "tblUser.org1ID in (".implode(", ", $org1_filters).")";
                $sub_where_sql[] = "hnUser.org1ID in (".implode(", ", $org1_filters).")";
            } else {
                //If there are no org1_filters to apply, then we can't meet the criteria of the filter and therefore
                //there can be no results to return.
                return array();
            }
        }

        if(is_array($course_type_filters) && !empty($course_type_filters) && $this->table_exists('tblCourseType')) {
            if (in_array(0, $course_type_filters)) {
                $index = array_search(0, $course_type_filters);

                unset($course_type_filters[$index]);

                if (!empty($course_type_filters)) {
                    $where_sql[] = "(tblCourse.courseTypeID IN(".implode(", ", $course_type_filters).") OR tblCourse.courseTypeID IS NULL)";
                    $sub_where_sql[] = "(hnCourse.courseTypeID IN(".implode(", ", $course_type_filters).") OR hnCourse.courseTypeID IS NULL)";
                } else {
                    $where_sql[] = "tblCourse.courseTypeID IS NULL";
                    $sub_where_sql[] = "hnCourse.courseTypeID IS NULL";
                }
            } else {
                $where_sql[] = "tblCourse.courseTypeID IN(".implode(", ", $course_type_filters).")";
                $sub_where_sql[] = "hnCourse.courseTypeID IN(".implode(", ", $course_type_filters).")";
            }
        }

        if($force_pass_status === 1){
            $where_sql[] = "(tblUserCourses.courseForced = 0 OR tblUserCourses.courseForced IS NULL)";
            $sub_where_sql[] = "(hnUserCourses.courseForced = 0 OR hnUserCourses.courseForced IS NULL)";
        }
        else if($force_pass_status === 2){
            $where_sql[] = "tblUserCourses.courseForced=1";
            $sub_where_sql[] = "hnUserCourses.courseForced=1";
        }

        if ($this->column_exists('vw_usercourselist_full', 'availability')) {
            if ($course_availability === 0) {
                //Show only available courses
                $where_sql[] = "vw_usercourselist_full.availability = 1";
                $sub_where_sql[] = "vwUser.availability = 1";

            } elseif ($course_availability === 1) {
                //Show only unavailable courses
                $where_sql[] = "vw_usercourselist_full.availability = 0";
                $sub_where_sql[] = "vwUser.availability = 1";
            }
        }

        $sub_where_sql = (count($sub_where_sql) > 0 ? " AND " . implode(' AND ', $sub_where_sql) : "");

        $select_sql[] = '(SELECT SUM(quizAttempts) FROM vw_usercourselist_full as vwUser LEFT JOIN tblCourse as hnCourse ON vwUser.courseID = hnCourse.courseID LEFT JOIN tblUser as hnUser ON hnUser.userId =vwUser.userID LEFT JOIN tblUserModuleProgress ON tblUserModuleProgress.userID = hnUser.userID AND tblUserModuleProgress.courseID = vwUser.courseID LEFT JOIN tblUserCourses as hnUserCourses ON hnUser.userID = hnUserCourses.userID AND vwUser.courseID = hnUserCourses.courseID WHERE AICCLessonStatus = \'c\' AND ' . implode(' AND ', $tblUserModuleProgress_where_sql) . ' AND quizAttempts != 0 AND quizAttempts IS NOT NULL ' . $sub_where_sql . ' ) AS QuizAttempts';
        $select_sql[] = '(SELECT COUNT(*) FROM vw_usercourselist_full as vwUser LEFT JOIN tblCourse as hnCourse ON vwUser.courseID = hnCourse.courseID LEFT JOIN tblUser as hnUser ON hnUser.userId =vwUser.userID LEFT JOIN tblUserModuleProgress ON tblUserModuleProgress.userID = hnUser.userID AND tblUserModuleProgress.courseID = vwUser.courseID LEFT JOIN tblUserCourses as hnUserCourses ON hnUser.userID = hnUserCourses.userID AND vwUser.courseID = hnUserCourses.courseID WHERE AICCLessonStatus = \'c\' AND ' . implode(' AND ', $tblUserModuleProgress_where_sql) . ' AND quizAttempts != 0 AND quizAttempts IS NOT NULL ' . $sub_where_sql . ' ) AS ModulesWithQuiz';
        $select_sql[] = '(SELECT SUM(quizAttempts) FROM vw_usercourselist_full as vwUser LEFT JOIN tblCourse as hnCourse ON vwUser.courseID = hnCourse.courseID LEFT JOIN tblUser as hnUser ON hnUser.userId =vwUser.userID LEFT JOIN tblUserModuleProgress ON tblUserModuleProgress.userID = hnUser.userID AND tblUserModuleProgress.courseID = vwUser.courseID LEFT JOIN tblUserCourses as hnUserCourses ON hnUser.userID = hnUserCourses.userID AND vwUser.courseID = hnUserCourses.courseID WHERE AICCLessonStatus = \'i\' AND ' . implode(' AND ', $tblUserModuleProgress_where_sql) . ' AND quizAttempts != 0 AND quizAttempts IS NOT NULL ' . $sub_where_sql . ' ) AS QuizAttempts_InProgress';
        $select_sql[] = '(SELECT COUNT(*) FROM vw_usercourselist_full as vwUser LEFT JOIN tblCourse as hnCourse ON vwUser.courseID = hnCourse.courseID LEFT JOIN tblUser as hnUser ON hnUser.userId =vwUser.userID LEFT JOIN tblUserModuleProgress ON tblUserModuleProgress.userID = hnUser.userID AND tblUserModuleProgress.courseID = vwUser.courseID LEFT JOIN tblUserCourses as hnUserCourses ON hnUser.userID = hnUserCourses.userID AND vwUser.courseID = hnUserCourses.courseID WHERE AICCLessonStatus = \'i\' AND ' . implode(' AND ', $tblUserModuleProgress_where_sql) . ' AND quizAttempts != 0 AND quizAttempts IS NOT NULL ' . $sub_where_sql . ' ) AS ModulesWithQuiz_InProgress';

        //--- Run the statement and parse the results -------------------

        $sql = 'SELECT ' . implode(', ', $select_sql) . ' ' .
                'FROM
                vw_usercourselist_full JOIN tblUser ON tblUser.userID = vw_usercourselist_full.userID
                LEFT JOIN tblUserCourses ON vw_usercourselist_full.courseID = tblUserCourses.courseID AND vw_usercourselist_full.userID = tblUserCourses.userID
                LEFT JOIN tblCourse ON vw_usercourselist_full.courseID = tblCourse.courseID '.
                'WHERE ' . implode(' AND ', $where_sql) . ' ' .
                'GROUP BY ' . implode(', ', $group_by_sql) . ' ' .
                'ORDER BY MAX(priority) ASC';

        $out_array = array();

        // print($sql);
        // exit;

        $tmp_query = $this->udb_query($sql);

        while ($row = $this->udb_fetch_assoc($tmp_query)) {

            $one_percent = ($row['UsersEligible_Count'] / 100);

            if ($one_percent > 0) {
                $row['UsersAttendance_Perc'] = round(($row['UsersAttendance_Count'] / $one_percent), 1);
                $row['UsersInProgress_Perc'] = round(($row['UsersInProgress_Count'] / $one_percent), 1);
                $row['UsersRefreshed_Perc'] = round(($row['UsersRefreshed_Count'] / $one_percent), 1);
                $row['UsersPassed_Perc'] = round(($row['UsersPassed_Count'] / $one_percent), 1);
            }
            else {
                $row['UsersAttendance_Perc'] = 0;
                $row['UsersInProgress_Perc'] = 0;
                $row['UsersRefreshed_Perc'] = 0;
                $row['UsersPassed_Perc'] = 0;
            }

            if ($row['UsersPassed_Count'] > 0) {
                if($row["QuizAttempts"] > 0 && $row["ModulesWithQuiz"] > 0){
                    $row['QuizAttemptsAvg'] = round($row['QuizAttempts'] / $row['ModulesWithQuiz'], 1);
                }
                else{
                    $row['QuizAttemptsAvg'] = 0;
                }
            }
            else {
                $row['QuizAttemptsAvg'] = 0;
            }

            if ($row['UsersInProgress_Count'] > 0) {
                if($row["QuizAttempts_InProgress"] > 0 && $row['ModulesWithQuiz_InProgress'] > 0){
                    $row['QuizAttemptsInProgressAvg'] = round($row['QuizAttempts_InProgress'] / $row['ModulesWithQuiz_InProgress'], 1);
                }
                else{
                    $row['QuizAttemptsInProgressAvg'] = 0;
                }
            }
            else {
                $row['QuizAttemptsInProgressAvg'] = 0;
            }

            if ($row['DurationTotal_Seconds'] > 0) {

                $row['DurationTotal_String'] = $this->seconds_to_time($row['DurationTotal_Seconds']);

                if ($row['UsersPassed_Count']) {
                    $row['DurationAvg_Seconds'] = round($row['DurationTotal_Seconds'] / $row['UsersPassed_Count']);
                    $row['DurationAvg_String'] = $this->seconds_to_time($row['DurationAvg_Seconds']);
                }
                else {
                    $row['DurationAvg_Seconds'] = 0;
                    $row['DurationAvg_String'] = "00:00:00";
                }
            }
            else{
                $row['DurationTotal_String'] = "00:00:00";
                $row['DurationAvg_Seconds'] = 0;
                $row['DurationAvg_String'] = "00:00:00";
            }

            if (array_key_exists("DurationInProgressTotal_Seconds", $row) && $row['DurationInProgressTotal_Seconds'] > 0) {

                $row['DurationInProgressTotal_String'] = $this->seconds_to_time($row['DurationInProgressTotal_Seconds']);

                if ($row['UsersInProgress_Count']) {
                    $row['DurationInProgressAvg_Seconds'] = round($row['DurationInProgressTotal_Seconds'] / $row['UsersInProgress_Count']);
                    $row['DurationInProgressAvg_String'] = $this->seconds_to_time($row['DurationInProgressAvg_Seconds']);
                }
                else {
                    $row['DurationInProgressAvg_Seconds'] = 0;
                    $row['DurationInProgressAvg_String'] = 0;
                }
            }

            if (isset($row["CourseTitle"])) {
                if($this->column_exists("courseShortTitle", "tblCourse")){
                    $course_short_title_sql = "SELECT courseShortTitle FROM tblCourse WHERE courseID = " . $row["CourseID"];

                    $course_short_title_query = $this->udb_query($course_short_title_sql);

                    if ($course_short_title_query !== false) {

                        $course_short_title = $this->udb_fetch_row($course_short_title_query);

                        $row["CourseShortTitle"] = $course_short_title[0];
                    }
                    else {
                        $row["CourseShortTitle"] = null;
                    }
                }
                else {
                    $row["CourseShortTitle"] = null;
                }
            }

            $out_array[] = $row;
        }

        return $out_array;
    }


    /**
     * Return an array of course quiz analysis data
     * @param array $course_ids Array of numeric course ids to return data for.
     *                          If null, returns data for all courses.
     * @return array
     */
    public function course_quiz_analysis(array $filters = array()) {

        $course_ids = array();
        $last_visited_date = array();

        if (array_key_exists('course_ids', $filters) && is_array($filters['course_ids'])) {
            $course_ids = array_filter($filters['course_ids'], 'is_numeric');
        }

        if (array_key_exists('last_visited_date', $filters) && is_array($filters['last_visited_date'])) {
            if (array_key_exists('from', $filters['last_visited_date'])) {
                if ($filters['last_visited_date']['from'] instanceof DateTime) {
                    $last_visited_date['from'] = $filters['last_visited_date']['from']->format('Y-m-d');
                } else {
                    $msg = sprintf(
                        'Invalid Last Visited Date From filter given to course_quiz_analysis.  Expected instance of DateTime class, given %s',
                        gettype($filters['last_visited_date']['from'])
                    );

                    $this->log_error($msg);
                }
            }

            if (array_key_exists('to', $filters['last_visited_date'])) {
                if ($filters['last_visited_date']['to'] instanceof DateTime) {
                    $last_visited_date['to'] = $filters['last_visited_date']['to']->format('Y-m-d');
                } else {
                    $msg = sprintf(
                        'Invalid Last Visited Date To filter given to course_quiz_analysis.  Expected instance of DateTime class, given %s',
                        gettype($filters['last_visited_date']['to'])
                    );

                    $this->log_error($msg);
                }
            }
        }

        $current_select_parts = array(
            'tblUser.userName',
            'tblCourse.AICCCourseTitle',
            'tblModule.AICCTitle',
            'tblUserModuleProgress.quizLastVisitedDateTime',
            'tblUserModuleProgress.quizAttempts',
            'tblUserModuleProgress.quizTimeSpent',
            'tblUserModuleProgress.quizPassed',
            'tblUserModuleProgress.AICCScore',
            'tblUserModuleProgress.AICCCoreLessonItem8',
        );

        $current_from_parts = array(
            'tblUser',
            'JOIN tblUserProfileCourses ON tblUserProfileCourses.userProfileID = tblUser.userProfileID',
            'JOIN tblCourse ON tblCourse.courseID = tblUserProfileCourses.courseID',
            'JOIN tblModule ON tblModule.courseID = tblCourse.courseID',
            'JOIN tblUserModuleProgress ON tblUserModuleProgress.userID = tblUser.userID AND tblUserModuleProgress.moduleID = tblModule.moduleID',
        );

        $current_where_parts = array(
            'tblModule.quizIsThereOne = 1',
            'AND tblUserModuleProgress.quizAttempts IS NOT NULL',
            'AND tblUserModuleProgress.quizTimeSpent IS NOT NULL',
            'AND tblUserModuleProgress.quizLastVisitedDateTime IS NOT NULL',
            'AND tblUserModuleProgress.AICCCoreLessonItem8 IS NOT NULL',
            'AND (tblUser.systemUser IS NULL OR tblUser.systemUser = 0)'
        );

        $historic_select_parts = array(
            'tblUser.userName',
            'tblCourse.AICCCourseTitle',
            'tblModule.AICCTitle',
            'tblUserModuleProgressHistory.quizLastVisitedDateTime',
            'tblUserModuleProgressHistory.quizAttempts',
            'tblUserModuleProgressHistory.quizTimeSpent',
            'tblUserModuleProgressHistory.quizPassed',
            'tblUserModuleProgressHistory.AICCScore',
            'tblUserModuleProgressHistory.AICCCoreLessonItem8',
        );

        $historic_from_parts = array(
            'tblUser',
            'JOIN tblUserProfileCourses ON tblUserProfileCourses.userProfileID = tblUser.userProfileID',
            'JOIN tblCourse ON tblCourse.courseID = tblUserProfileCourses.courseID',
            'JOIN tblModule ON tblModule.courseID = tblCourse.courseID',
            'JOIN tblUserModuleProgressHistory ON tblUserModuleProgressHistory.userID = tblUser.userID AND tblUserModuleProgressHistory.moduleID = tblModule.moduleID',
        );

        $historic_where_parts = array(
            'tblModule.quizIsThereOne = 1',
            'AND tblUserModuleProgressHistory.quizAttempts IS NOT NULL',
            'AND tblUserModuleProgressHistory.quizTimeSpent IS NOT NULL',
            'AND tblUserModuleProgressHistory.quizLastVisitedDateTime IS NOT NULL',
            'AND tblUserModuleProgressHistory.AICCCoreLessonItem8 IS NOT NULL',
            'AND (tblUser.systemUser IS NULL OR tblUser.systemUser = 0)'
        );

        if (!empty($course_ids)) {
            $courses_where_part = sprintf(
                'AND tblCourse.courseID IN(%s)',
                implode(',', $course_ids)
            );

            $current_where_parts[] = $courses_where_part;
            $historic_where_parts[] = $courses_where_part;
        }

        if (!empty($last_visited_date)) {
            $last_visited_date_part = array();

            if(array_key_exists('from', $last_visited_date)) {
                $last_visited_date_part[] = sprintf(
                    'AND quizLastVisitedDateTime >= %s',
                    '\''.$last_visited_date['from'].'\''
                );
            }

            if(array_key_exists('to', $last_visited_date)) {
                $last_visited_date_part[] = sprintf(
                    'AND quizLastVisitedDateTime <= %s',
                    '\''.$last_visited_date['to'].'\''
                );
            }

            if (!empty($last_visited_date_part)) {
                $current_where_parts[] = implode(" ", $last_visited_date_part);
                $historic_where_parts[] = implode(" ", $last_visited_date_part);
            } else {
                $this->log_error("Invalid Last Visited Date filter given in course_quiz_analysis.");
            }
        }

        $order_by_parts  = array(
            'userName ASC',
            'AICCCourseTitle ASC',
            'quizLastVisitedDateTime ASC'
        );

        $base_sql_part = 'SELECT %s FROM %s WHERE %s';

        $current_sql_part = sprintf(
            $base_sql_part,
            implode(', ', $current_select_parts),
            implode(' ', $current_from_parts),
            implode(' ', $current_where_parts)
        );

        $historic_sql_part = sprintf(
            $base_sql_part,
            implode(', ', $historic_select_parts),
            implode(' ', $historic_from_parts),
            implode(' ', $historic_where_parts)
        );

        $sql = sprintf(
            'SELECT * FROM (%s UNION %s) result ORDER BY %s',
            $current_sql_part,
            $historic_sql_part,
            implode(', ', $order_by_parts)
        );

        $qry = $this->udb_query($sql);

        $results = array();

        if ($qry === false) {
            $this->log_error('Failed to retrieve quiz analysis report');
            return $results;
        }

        while ($row = $this->udb_fetch_assoc($qry)) {
            $results[] = $row;
        }

        return $results;
    }

    /**
     * Marks a users learning as refreshed
     * @param  int  $course_id
     * @param  int  $module_id
     * @param  boolean  $module_only    Should this refresh only the module, or the entire course
     * @param  int|boolean $user_id     If false, use the logged in user
     * @return mixed  int|boolean       Refresh ID
     */
    public function refresh_user_learning($course_id, $module_id, $module_only, $user_id=false){
        if($user_id === false){
            $user_id = $this->logged_in_user["UserID"];
        }

        if(is_numeric($user_id) && is_numeric($course_id) && is_numeric($module_id) && is_bool($module_only)){

            $user_id = intval($user_id);
            $course_id = intval($course_id);
            $module_id = intval($module_id);

            $refresh_id = null;

            if ($module_only){
                $refresh_type = 'THREE STRIKES - MODULE ONLY';
            } else {
                $refresh_type = 'THREE STRIKES';
            }

            $sql = "INSERT INTO tblUserCourseRefresh (userID, courseID, refreshDate, refreshType)
                    VALUES (".$user_id.", ".$course_id.", GETDATE(), '".$refresh_type."')";

            $this->udb_query($sql);

            $refresh_id = $this->udb_last_insert_id();

            $this->lms_log_user_module_progress_history($user_id, $course_id, $module_id, $refresh_id);

            if($module_only === true){

                $sql = "UPDATE tblUserModuleProgress SET quizAttempts=0, quizLastVisitedDateTime=NULL,
                    quizTimeSpent='00:00:00', quizPassed=0, quizPassedDate=NULL, AICCLessonLocation=NULL, AICCLessonStatus='r',
                    AICCTime='00:00:00', AICCScore=0, moduleForced=NULL, moduleForcedBy=NULL, AICCCoreLessonItem8=NULL
                    WHERE userID=".$user_id." AND courseID=".$course_id." AND moduleID=".$module_id;

                $this->udb_query($sql);

                list($number_of_modules) = $this->udb_fetch_row($this->udb_query("SELECT noModules FROM tblCourse WHERE courseID=".$course_id));

                $course_status = $number_of_modules === 1 ? "r" : "i";

                $course_time_spent = $this->course_time_spent($course_id, $user_id);

                if(empty($course_time_spent)){
                    $course_time_spent = 0;
                }

                $course_time_spent = $this->seconds_to_time($course_time_spent["calculatedTime"]);

                $sql = "UPDATE tblUserCourses SET courseTimeSpent='".$course_time_spent."', courseStatus='".$course_status."', courseForced=NULL,
                        courseForcedBy=NULL WHERE userID=".$user_id." AND courseID=".$course_id;

                $this->udb_query($sql);
            }
            else{
                $with_quiz = array();
                $without_quiz = array();

                $sql = "SELECT moduleID, quizIsThereOne FROM tblModule WHERE courseID=".$course_id;

                $qry = $this->udb_query($sql);

                while($row = $this->udb_fetch_assoc($qry)){
                    if($row["quizIsThereOne"] === 1){
                        $with_quiz[] = $row["moduleID"];
                    }
                    else{
                        $without_quiz[] = $row["moduleID"];
                    }
                }

                if(!empty($with_quiz)){
                    $sql = "UPDATE tblUserModuleProgress SET quizAttempts=0, quizLastVisitedDateTime=NULL,
                        quizTimeSpent='00:00:00', quizPassed=0, quizPassedDate=NULL, AICCLessonLocation=NULL, AICCLessonStatus='r',
                        AICCTime='00:00:00', AICCScore=0,moduleForced=NULL, moduleForcedBy=NULL, AICCCoreLessonItem8=NULL
                        WHERE userID=".$user_id." AND courseID=".$course_id." AND moduleID IN (".implode(", ", $with_quiz).")";
                }

                $this->udb_query($sql);

                if(!empty($without_quiz)){
                    $sql = "UPDATE tblUserModuleProgress SET quizAttempts=null, quizLastVisitedDateTime=NULL,
                        quizTimeSpent=null, quizPassed=null, quizPassedDate=NULL, AICCLessonLocation=NULL, AICCLessonStatus='r',
                        AICCTime='00:00:00', AICCScore=null,moduleForced=NULL, moduleForcedBy=NULL, AICCCoreLessonItem8=NULL
                        WHERE userID=".$user_id." AND courseID=".$course_id." AND moduleID IN (".implode(", ", $without_quiz).")";
                }


                $this->udb_query($sql);

                $sql = "UPDATE tblUserCourses SET courseTimeSpent='00:00:00', courseStatus='r', courseForced=NULL,
                        courseForcedBy=NULL WHERE userID=".$user_id." AND courseID=".$course_id;

                $this->udb_query($sql);

            }

            return true;
        }

        return false;
    }

    /**
     * Generates a pivot table report of all passed and failed users.
     * Takes a map of headings to enable language support.
     * @param array $heading_map Array of key values pairs for multilingual support.
     * @param string $exports_dir Directory to export CSV file to.
     * @param bool $show_last_completed_date Whether to show the last completed date in place fo the "PASS" status.
     * @return boolean|string
     */
    public function course_report_pass_fail_report($language_map, $exports_dir, $show_last_completed_date = false) {

        //An invalid export dir was given
        if(!is_string($exports_dir)){
            return false;
        }

        $exports_dir = realpath($exports_dir);

        //Directory does not exist
        if (!$exports_dir) {
            return false;
        }

        $exports_dir .= '/';

        //clean up previously saved files (if they're more than an hour old)
        $old_files = scandir($exports_dir);

        foreach ($old_files as $old_file) {
            $file = $exports_dir.$old_file;
            //Ensure we have a file ending in .csv
            if (is_file($file)) {
                $info = pathinfo($file);

                if ($info["extension"] ===  "csv") {
                    if (filemtime($file) < (time() - (60 * 60))) {
                        unlink($file);
                    }
                }
            }
        }

        $default_language_map = array(
            "username" => "Username",
            "email" => "Email",
            "employee_name" => "Employee Name",
            "company_start_date" => "Company Start Date",
            "company_leave_date" => "Company Leaving Date",
            "account_active" => "Account Active",
            "tmp_exclude" => "Reporting Inclusion",
            "user_profile" => "User Profile",
            "user_type_description" => "User Type Description",
            "job_description" => "Job Description" ,
            "active" => "Active" ,
            "inactive" => "Inactive",
            "excluded" => "Excluded",
            "included" => "Included",
            "not_started" => "Not Started",
            "incomplete" => "Incomplete",
            "refresh" => "Refresh",
            "pass" => "Pass",
            "forced_pass" => "Forece Passed",
            "na" => "N/A",
            "flexible_profile" => "Flexible Profile"
        );

        //Merge our default language map with the given map to ensure there are
        //no keys missing.
        $language_map = array_merge($default_language_map, $language_map);

        $org_names = $this->get_org_level_names();

        $courses = $this->course_list();

        $course_set = array();

        //remap the courses to be indexed by courseID and to have upper case AICCCourseIDs
        foreach ($courses as $course) {

            $course["AICCCourseID"] = strtoupper($course["AICCCourseID"]);

            $course_set[$course["courseid"]] = $course;
        }

        foreach ($org_names as $org_level1 => $org_name1) {
            foreach ($org_names as $org_level2 => $org_name2) {
                if ($org_level1 != $org_level2 and $org_name1 == $org_name2) {
                    $org_names[$org_level2] = $org_name2.'_'.$org_level2;
                }
            }
        }

        $where_sql = "";

        //If we're not an Administrator, apply reporting access filters.
        if ($this->logged_in_user && $this->logged_in_user['Administrator'] !== 1) {
            $where_sql = $this->generate_user_filters_sql();
        }

        if ($this->column_exists('vw_usercourselist_full', 'availability')) {
            if (strlen($where_sql) > 0) {
                $where_sql .= ' AND ';
            }

            $where_sql .= 'vw_usercourselist_full.availability = 1';
        }

        $inner_froms = array(
            'tblUser',
            'LEFT JOIN tblUserType on tblUser.userTypeID = tblUserType.userTypeID',
            'LEFT JOIN tblJobType ON tblUser.jobTypeID = tblJobType.jobTypeID',
            'LEFT JOIN vw_usercourselist_full ON vw_usercourselist_full.userID = tblUser.userID',
            'LEFT JOIN tblUserCourses on vw_usercourselist_full.courseID = tblUserCourses.courseID AND tblUser.userID = tblUserCourses.userID',
            'LEFT JOIN tblUserProfile ON tblUser.userProfileID = tblUserProfile.userProfileID'
        );

        $pivot_selects = array(
            '[userID]',
            sprintf('[%s]', $org_names[4]),
            sprintf('[%s]', $org_names[3]),
            sprintf('[%s]', $org_names[2]),
            sprintf('[%s]', $org_names[1]),
        );

        //Copy our pivot selects as we need to maintain a separate set of selects
        //between the inner pivot and the outer paginated select statements.
        $paginated_selects = $pivot_selects;

        $inner_selects = array();

        if ($this->table_exists("tblOrgAttributeName") && $this->table_exists("tblOrgAttribute")) {
            $org_attributes = $this->org_attribute_list();

            if  (count($org_attributes) > 0) {
                $inner_selects[] = "tblOrgAttributeName.orgAttributeDesc";
                $inner_froms[] = "LEFT JOIN tblOrgAttribute ON tblUser.org1ID = tblOrgAttribute.org1ID LEFT JOIN tblOrgAttributeName ON tblOrgAttributeName.orgAttributeNameID = tblOrgAttribute.orgAttributeNameID ";

                $org_attributes_pivot = array();

                foreach ($org_attributes as $attribute) {
                    $pivot_selects[] = sprintf(
                        'CASE WHEN [%s] IS NULL THEN \'N\' ELSE \'Y\' END AS [%s]',
                        $attribute,
                        $attribute
                    );

                    $paginated_selects[] =sprintf('[%s]', $attribute);

                    $org_attributes_pivot[] = sprintf('[%s]', $attribute);
                }
            }
        }

        $pivot_selects[] = sprintf('[%s]', $language_map['username']);
        $pivot_selects[] = sprintf('[%s]', $language_map['email']);
        $pivot_selects[] = sprintf('[%s]', $language_map['employee_name']);
        $pivot_selects[] = sprintf('[%s]', $language_map['company_start_date']);
        $pivot_selects[] = sprintf('[%s]', $language_map['company_leave_date']);
        $pivot_selects[] = sprintf('[%s]', $language_map['account_active']);
        $pivot_selects[] = sprintf('[%s]', $language_map['tmp_exclude']);
        $pivot_selects[] = sprintf('[%s]', $language_map['user_profile']);
        $pivot_selects[] = sprintf('[%s]', $language_map['user_type_description']);
        $pivot_selects[] = sprintf('[%s]', $language_map['job_description']);

        $paginated_selects[] = sprintf('[%s]', $language_map['username']);
        $paginated_selects[] = sprintf('[%s]', $language_map['email']);
        $paginated_selects[] = sprintf('[%s]', $language_map['employee_name']);
        $paginated_selects[] = sprintf('[%s]', $language_map['company_start_date']);
        $paginated_selects[] = sprintf('[%s]', $language_map['company_leave_date']);
        $paginated_selects[] = sprintf('[%s]', $language_map['account_active']);
        $paginated_selects[] = sprintf('[%s]', $language_map['tmp_exclude']);
        $paginated_selects[] = sprintf('[%s]', $language_map['user_profile']);
        $paginated_selects[] = sprintf('[%s]', $language_map['user_type_description']);
        $paginated_selects[] = sprintf('[%s]', $language_map['job_description']);

        $inner_selects[] = 'tblUser.userID';
        $inner_selects[] = sprintf('userName AS [%s]', $language_map['username']);
        $inner_selects[] = sprintf('tblUser.email AS [%s]', $language_map['email']);
        $inner_selects[] = sprintf('firstName+\' \'+lastName as [%s]', $language_map["employee_name"]);
        $inner_selects[] = sprintf('joiningDate as [%s]', $language_map["company_start_date"]);
        $inner_selects[] = sprintf('leavingDate as [%s]', $language_map["company_leave_date"]);
        $inner_selects[] = sprintf(
            'CASE WHEN accountActive = 1 THEN \'%s\' ELSE \'%s\' END AS [%s]',
            $language_map['active'],
            $language_map['inactive'],
            $language_map['account_active']
        );
        $inner_selects[] = sprintf(
            'CASE WHEN tmpExclude = 1 THEN \'%s\' ELSE \'%s\' END AS [%s]',
            $language_map['excluded'],
            $language_map['included'],
            $language_map['tmp_exclude']
        );
        $inner_selects[] = sprintf('Org4Name AS [%s]', $org_names[4]);
        $inner_selects[] = sprintf('Org3Name AS [%s]', $org_names[3]);
        $inner_selects[] = sprintf('Org2Name AS [%s]', $org_names[2]);
        $inner_selects[] = sprintf('Org1LongName AS [%s]', $org_names[1]);

        if ($this->column_exists('tblUser', 'flexProfile')) {
            $inner_selects[] = sprintf(
                'CASE WHEN tblUser.flexProfile IS NULL OR tblUser.flexProfile = 0 THEN tblUserProfile.userProfileDescription ELSE \'%s\' END as [%s]',
                $language_map['flexible_profile'],
                $language_map["user_profile"]
            );
        } else {
            $inner_selects[] = sprintf('tblUserProfile.userProfileDescription as [%s]', $language_map["user_profile"]);
        }

        $inner_selects[] = sprintf('userTypeDescription as [%s]', $language_map["user_type_description"]);
        $inner_selects[] = sprintf('jobDescription as [%s]', $language_map["job_description"]);
        $inner_selects[] = 'vw_usercourselist_full.AICCCourseID';

        $course_status_cases = array();
        $course_status_cases[] = 'CASE WHEN courseStatus IS NULL OR courseStatus = \'a\' THEN 1 ELSE NULL END';
        $course_status_cases[] = 'CASE WHEN courseStatus = \'c\' AND courseForced = 1 THEN 5 ELSE NULL END';
        $course_status_cases[] = 'CASE WHEN courseStatus = \'c\' AND (courseForced IS NULL OR courseForced = 0) THEN 4 ELSE NULL END';
        $course_status_cases[] = 'CASE WHEN courseStatus = \'r\' THEN 3 ELSE NULL END';

        $inner_selects[] = sprintf(
            'COALESCE(%s, 2) as [Grade]',
            implode(',', $course_status_cases)
        );

        $course_pivots = array();

        foreach ($course_set as $course) {
            $course_pivots[] = sprintf('[%s]', $course['AICCCourseID']);
            $pivot_selects[] = sprintf(
                'CASE WHEN [%s] IS NULL THEN \'0\' ELSE [%s] END AS [%s]',
                $course['AICCCourseID'],
                $course['AICCCourseID'],
                $course['AICCCourseID']
            );

            $paginated_selects[] = sprintf('[%s]', $course['AICCCourseID']);
        }

        $inner_froms[] = 'JOIN tblOrg1 ON tblUser.org1ID = tblOrg1.org1ID';
        $inner_froms[] = 'JOIN tblOrg2 ON tblOrg1.org2ID = tblOrg2.org2ID';
        $inner_froms[] = 'JOIN tblOrg3 ON tblOrg2.org3ID = tblOrg3.org3ID';
        $inner_froms[] = 'JOIN tblOrg4 ON tblOrg3.org4ID = tblOrg4.org4ID';

        $org_attribute_sql = '';

        if (count($org_attributes) > 0) {
            $org_attribute_sql .= sprintf(
                'PIVOT( MAX([orgAttributeDesc]) FOR orgAttributeDesc IN (%s)) AS pvt2',
                implode(', ', $org_attributes_pivot)
            );
        }

        $base_sql = sprintf(
            'SELECT %s FROM (SELECT ROW_NUMBER() OVER (ORDER BY [%s]) as rowNum, %s FROM (SELECT %s FROM %s %s) ps PIVOT ( MAX([Grade]) FOR AICCCourseID IN (%s) ) AS pvt1 %s) AS PivotedResult',
            implode(', ', $paginated_selects),
            $language_map['username'],
            implode(', ', $pivot_selects),
            implode(', ', $inner_selects),
            implode(' ', $inner_froms),
            (is_string($where_sql) && strlen($where_sql) > 0 ? "WHERE ".$where_sql : ""),
            implode(', ', $course_pivots),
            $org_attribute_sql
        );

        $count_sql = 'SELECT COUNT(*) AS count FROM tblUser';

        $count_qry = $this->udb_query($count_sql);

        list($count) = $this->udb_fetch_row($count_qry);

        $page = 0;
        $limit = 10000;

        $unpaginated_sql = $base_sql.' WHERE rowNum BETWEEN %d AND %d';

        //course status map
        $course_status_map = array(
            0 => $language_map["na"],
            1 => $language_map["not_started"],
            2 => $language_map["incomplete"],
            3 => $language_map["refresh"],
            4 => $language_map["pass"],
            5 => $language_map["forced_pass"]
        );

        //Statuses to treated as completed - for use with courseLastCompletedDate.
        $completed_statuses = array(
            $course_status_map[4],
            $course_status_map[5]
        );

        $file_name = $this->customer_id . "-" . $this->logged_in_user["UserID"] . "-export.csv";
        $file = fopen($exports_dir . $file_name, "w");

        $headings = false;

        if ($file === false) {
            return false;
        }

        if ($show_last_completed_date === true) {
            $user_completed_sql = "SELECT
                                        *
                                    FROM (
                                        SELECT
                                            tblUser.userID,
                                            tblUserCourses.AICCCourseID,
                                            DATEDIFF(s, '1970-01-01 00:00:00', COALESCE(tblUserCourses.courseLastCompletedDate, tblUserCourses.lastVisitDateTime)) as completedDate
                                        FROM
                                            tblUser
                                            JOIN tblUserCourses ON tblUser.userID = tblUserCourses.userID
                                    ) as userCompleted
                                    PIVOT (
                                        MAX(completedDate)
                                        FOR AICCCourseID IN (%s)
                                    ) pivotCompleted
                                    ";

            $user_completed_sql = sprintf(
                $user_completed_sql,
                implode(",", $course_pivots)
            );

            $user_completed_qry = $this->udb_query($user_completed_sql);

            $user_completed_dates = array();

            while ($result = $this->udb_fetch_assoc($user_completed_qry)) {
                $userID = $result['userID'];
                unset($result['userID']);
                $user_completed_dates[$userID] = $result;
            }

        }

        while ($page < $count) {
            $paginated_sql = sprintf(
                $unpaginated_sql,
                $page,
                $page+$limit
            );

            $qry = $this->udb_query($paginated_sql);

            while ($result = $this->udb_fetch_assoc($qry)) {
                $userID = $result['userID'];

                unset($result['userID']);

                if (!$headings) {
                    fputcsv($file, array_keys($result));
                    $headings = true;
                }

                foreach ($course_set as $course) {
                    $result[$course["AICCCourseID"]] = $course_status_map[$result[$course["AICCCourseID"]]];

                    if ($show_last_completed_date === true) {
                        if (!empty($user_completed_dates[$userID][$course['AICCCourseID']])) {
                            if (in_array($result[$course['AICCCourseID']], $completed_statuses)) {
                                $result[$course["AICCCourseID"]] = date('Y-m-d H:i:s', $user_completed_dates[$userID][$course['AICCCourseID']]);
                            }
                        }
                    }
                }

                $result = array_map("trim", $result);

                fputcsv($file, $result);
            }

            $page += $limit;
        }

        fclose($file);

        return $file_name;
    }

    /**
     * Seconds to Time
     *
     * Helper function
     *
     */
    public function seconds_to_time($seconds) {
        if (!is_numeric($seconds) || $seconds <= 0) {
            //We've been given a non-positive integer, we can't really work
            //with that, so abort and give back the only sane value we can
            //really give.
            return '00:00:00';
        }

        return sprintf(
            '%s:%s:%s',
            str_pad(floor($seconds / 3600), 2, '0', STR_PAD_LEFT),
            str_pad(floor(($seconds % 3600) / 60), 2, '0', STR_PAD_LEFT),
            str_pad(($seconds % 60), 2, '0', STR_PAD_LEFT)
        );
    }

    /**
     * Convert a CMI Time Stamp (hhhh:mm:ss) to seconds.
     * @param string $time Time stamp to convert
     * @return int
     */
    public function time_to_seconds($timestamp)
    {
        $timestamp_parts = explode(":", $timestamp);

        $hours = 0;
        $minutes = 0;
        $seconds = 0;

        if (isset($timestamp_parts[0]) && is_numeric($timestamp_parts[0])) {
            $hours = round($timestamp_parts[0]);
        }

        if (isset($timestamp_parts[1]) && is_numeric($timestamp_parts[1])) {
            $minutes = round($timestamp_parts[1]);
        }

        if (isset($timestamp_parts[2]) && is_numeric($timestamp_parts[2])) {
            $seconds = round($timestamp_parts[2]);
        }

        return (floor($hours)*60*60)+(floor($minutes)*60)+floor($seconds);
    }

    //================================================================================================================
}


/**
 * Travelodge Comparison Report
 *
 * @param object $upskill An upskill class object.
 * @param array $survey_id_list List of survey IDs to use.
 * @param array $org_filters List of org filtes in format: array(Org Level => array(IDs))
 * @param array $user_type_filter List of job type IDs to filter by
 * @param array $employment_type_filters The employment types to filter by.
 */
function travelodge_comparison_report($upskill, $survey_id_list, $org_filters = array(), $user_type_filter = array(), array $employment_type_filters = array()) {

    $scores = array(
        'pulse' => array(
            'answer_group_type_id' => 1,
            'label' => 'PULSE Score'
        ),
        'great_place_to_work' => array(
            'answer_group_type_id' => 3,
            'label' => 'Great Place to Work'
        ),
        'engagement' => array(
            'answer_group_type_id' => 4,
            'label' => 'Engagement Score'
        ),
    );

    $net_promoters_groups = array('promoters' => 33, 'passives' => 34, 'detractors' => 35);

    //--- Positivity----------------------------------------------------------------------

    $scores['pulse']['target_score'] = 67;
    $scores['pulse']['previous_score'] = 61;

    $scores['pulse']['your_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['pulse']['answer_group_type_id'], //answer group type id
        $org_filters, //org filters
        $user_type_filter, //user type filter
        false, //ignore restricted views
        $employment_type_filters //employment type list
    );

    $scores['pulse']['company_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['pulse']['answer_group_type_id'], //answer group type id
        array(), //org filters
        array(), //user type filter
        true, //ignore restricted views
        $employment_type_filters //employment type list
    );

    //--- Great Place to Work ------------------------------------------------------------

    $scores['great_place_to_work']['your_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['great_place_to_work']['answer_group_type_id'], //answer group type id
        $org_filters, //org filters
        $user_type_filter, //user type filter
        false, //ignore restricted views
        $employment_type_filters //employment type filters
    );

    $scores['great_place_to_work']['company_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['great_place_to_work']['answer_group_type_id'], //answer group type id
        array(), //org filters
        array(), //user type filter
        true, //ignore restricted views
        $employment_type_filters //employment type filters
    );

    //--- Engagement ---------------------------------------------------------------------

    $scores['engagement']['your_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['engagement']['answer_group_type_id'], //answer group type id
        $org_filters, //org filters
        $user_type_filter, //user type filters
        false, //ignore restricted views
        $employment_type_filters //employment type filters
    );

    $scores['engagement']['company_score'] = $upskill->survey_answer_group_score(
        $survey_id_list, //survey id list
        $scores['engagement']['answer_group_type_id'], //answer group type id
        array(), //org filters
        array(), //user type filters
        true, //ignore restricted views
        $employment_type_filters //employment type filters
    );

    //--- Response Rate ------------------------------------------------------------------

    return $scores;
}
